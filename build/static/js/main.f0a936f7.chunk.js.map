{"version":3,"sources":["firebase.js","contexts/AuthContext.js","components/helpers/PrivateRoute.js","components/helpers/Logo.js","components/interfaces/Dashboard.js","components/interfaces/ForgotPassword.js","services/playersService.js","services/cardsService.js","services/betService.js","components/raiseBar/Controller.jsx","components/raiseBar/styles.js","components/raiseBar/Tracker.jsx","services/uiService.js","services/aiService.js","components/cards/Card.jsx","components/helpers/SpinnerLoading.js","components/cards/BackOfCard.jsx","components/players/PlayerStatus.jsx","components/players/Player.jsx","components/interfaces/PlayerWin.js","components/interfaces/Game.js","components/interfaces/Login.js","components/interfaces/Signup.js","components/interfaces/Statistics.js","App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","storageBucket","messagingSenderId","appId","auth","database","ref","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","login","email","password","signInWithEmailAndPassword","signup","createUserWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","Provider","PrivateRoute","Component","component","rest","render","props","to","Logo","className","src","Dashboard","emailAddress","error","setError","history","useHistory","a","push","playPoker","difficulty","username","substring","indexOf","Container","style","minHeight","maxWidth","Body","Alert","variant","Button","onClick","ForgotPassword","emailRef","useRef","message","setMessage","e","preventDefault","current","Form","onSubmit","Group","id","Label","Control","type","required","disabled","makeTable","require","playerName","users","uuid","name","avatarURL","cards","showDownHand","hand","descendingSortHand","chips","roundStartChips","roundEndChips","currentRoundChipsInvested","bet","betReconciled","folded","allIn","canRaise","stackInvestment","robot","manageOverflowIndex","currentIndex","incrementBy","arrayLength","direction","Error","choosePhaseStartActivePlayer","state","recursion","activePlayerIndex","players","length","blindIndex","big","chooseNextActivePlayer","activePlayer","allButOnePlayersAreAllIn","numPlayersActive","numPlayersAllIn","console","log","playerShowDown","remakePot","dealOtherCommunityCards","managePhaseShift","moveDealerChip","dealerIndex","nextDealer","findBrokePlayers","dealerID","filter","player","newDealerIndex","findIndex","small","anteUpBlinds","bigBlindIndex","smallBlindIndex","minBet","map","numPlayersFolded","blindIndicies","calculateBlindIndices","dealPlayerCards","startNextRound","communityCards","sidePots","playerHierarchy","showDownMessages","deck","shuffleCards","makeDeckOfCards","highBet","betInputValue","clearPlayerCards","card","checkWin","suits","VALUE_MAP","2","3","4","5","6","7","8","9","10","J","Q","K","A","suit","cardFace","shuffledDeck","Array","filledSlots","i","lastSlot","el","shuffleToPosition","randomStartPosition","totalNumCards","includes","clearCards","animationDelay","getCards","mutableDeckCopy","chosenCards","newDeck","phase","min","max","Math","ceil","floor","random","numToGet","pop","cardsToPop","getShowdownCards","frequencyHistogram","suitHistogram","concat","sort","b","forEach","valueSet","generateValueSet","checkIfFlush","isFlush","flushedSuit","flushCards","isRoyalFlush","checkIfRoyalFlush","checkIfStraightFlush","isStraightFlush","isLowStraightFlush","concurrentSFCardValues","concurrentSFCardValuesLow","checkIfStraight","isStraight","isLowStraight","concurrentCardValues","concurrentCardValuesLow","checkFrequencyHistogram","isFourOfAKind","isFullHouse","isThreeOfAKind","isTwoPair","isPair","frequencyHistogramMetaData","isNoPair","bools","heldRankHierarchy","match","metaData","highRankPosition","bestHandRank","bestHand","findBestHand","assignSidePots","numToPop","bestRank","slice","reduce","acc","cur","index","reverse","mutableHand","cloneDeep","indexOfQuad","quads","face","tripples","indexOfTripple","indexOfPair","pairs","buildPlayerRankings","activePlayers","hierarchy","rankMap","Map","playerIndex","get","handRank","playersWhoHoldThisRank","formattedPlayersWhoHoldThisRank","winnerHierarchy","sortedComparator","loserHierarchy","processComparator","comparator","round","filterableComparator","frame","handleSnapshotFrame","winningFrame","losingFrame","lowerTierComparator","snapshot","some","snapshotToMatchName","filteredWinnerSnapshots","processLowTierComparators","loserHierarchyFrame","loserComparatorToProcess","determinePlayerHandsHierarchy","createRankingsComparator","rankPlayersHands","contestants","contestant","highValue","assignWinnings","prize","winnerFound","rank","payWinnings","winners","findHandWinner","sidePot","potValue","pot","overflow","splitPot","winner","playerData","from","playerShowdownData","losers","nameToExtract","flushMatchCards","numConcurrentCards","checkIfLowerStraight","numTripples","numPairs","valueSetCopy","sortedValueSetCopy","Set","cardInfo","numPlayers","blindIndices","calculateMinBet","playerChipsStack","playerBet","playerTotalChips","manageBet","subtractableChips","managePlayerFold","dealFlopCards","dealTurnCards","dealRiverCards","sidePotStack","condensePots","calculatePots","playerStacks","investedPlayers","playerToRefund","ascBetPlayers","smallStackValue","builtSidePot","n","arrayIdentical","arr1","arr2","bool","Controller","handle","percent","getHandleProps","left","position","marginLeft","marginTop","zIndex","width","height","border","textAlign","cursor","borderRadius","backgroundColor","color","display","textShadow","justifyContent","fontFamily","fontSize","sliderStyle","railStyle","Tracker","source","target","getTrackProps","makeActionButtonText","makeNetPlayerEarnings","endChips","startChips","netChipEarnings","win","none","class","makeShowdownMessages","Fragment","makeActionMenu","changeSliderInputFn","rootStyle","domain","values","step","onChange","mode","getRailProps","handles","right","tracks","aiHandler","moveAnimationState","investmentRequiredToRemain","makeHistogram","stakes","groupStakes","preFlopValues","highCard","lowCard","suited","Object","entries","find","keyValuePair","createPreFlopDeterminant","callLimit","raiseChance","raiseRange","willCall","betting_hierarchy","callValue","willRaise","determinedRaiseRange","betValue","chooseBetProportion","handHierarchy","highRank","createGeneralizedDeterminant","raiseChange","straightGap","percentage","blind","insignificant","lowdraw","meddraw","hidraw","strong","major","aggro","beware","chance","Card","cardData","cardSuit","applyFoldedClassname","toUpperCase","SpinnerLoading","alt","BackOfCard","PlayerStatus","isActive","content","endTransition","CSSTransition","in","timeout","appear","enter","exit","classNames","onEntered","Player","playerBoxIndex","arrayIndex","playerAnimationSwitchboard","hasDealerChip","Animating","makePlayerCards","PlayerWin","search","useLocation","URLSearchParams","userStatistics","firebaseDb","child","uid","once","then","countValues","childSnapshot","key","childData","val","set","recordUserStatistics","Game","playActionMessages","0","isAnimating","1","cardAnimationDelay","executeGame","newState","setState","setTimeout","appState","aiHandlerUtil","changePlayerAnimationState","manageBetChange","parseInt","manageBetSubmit","manageSliderInputChange","manageNextRound","element","newAnimationSwitchboard","assign","popPlayerAnimationState","persistContent","renderTable","result","unshift","renderPlayerActionButtons","renderTableCommunityCards","purgeAnimation","renderPlayerShowdown","renderBestHands","rankSnapshot","isArray","renderHandSplit","renderHandWinner","makeCards","playerStateData","statePlayer","alignItems","renderGame","DropdownButton","title","Dropdown","Item","href","playersBoughtIn","this","imageLoaderRequest","XMLHttpRequest","addEventListener","open","send","prevState","Login","passwordRef","Signup","passwordConfirmRef","UserStatistics","num_beginner_games","num_beginner_wins","num_intermediate_games","num_intermediate_wins","num_expert_games","num_expert_wins","num_ultimate_games","num_ultimate_wins","GuestUserStatistics","Statistics","userStats","setUserStats","setUserStatistics","App","exact","path","ReactDOM","document","getElementById"],"mappings":"4iDAOMA,G,cAAMC,IAASC,cAAc,CAC/BC,OAAQC,0CACRC,WAAYD,yCACZE,YAAaF,0gBAAYG,gCACzBC,UAAWJ,yBACXK,cAAeL,qCACfM,kBAAmBN,eACnBO,MAAOP,+CAGEQ,EAAOZ,EAAIY,OAETZ,GADWA,EAAIa,WAAWC,MAC1Bd,G,OCXTe,EAAcC,IAAMC,gBAEnB,SAASC,IACd,OAAOC,qBAAWJ,GAMb,SAASK,EAAT,GAAqC,IAAbC,EAAY,EAAZA,SAAY,EACHC,qBADG,mBAClCC,EADkC,KACrBC,EADqB,OAEXF,oBAAS,GAFE,mBAElCG,EAFkC,KAEzBC,EAFyB,KA8CzCC,qBAAU,WAMR,OALoBf,EAAKgB,oBAAmB,SAAAC,GAC1CL,EAAeK,GACfH,GAAW,QAIZ,IAEH,IAAMI,EAAQ,CACZP,cACAQ,MA3CF,SAAeC,EAAOC,GACpB,OAAOrB,EAAKsB,2BAA2BF,EAAOC,IA2C9CE,OAnDF,SAAgBH,EAAOC,GACrB,OAAOrB,EAAKwB,+BAA+BJ,EAAOC,IAmDlDI,OAtCF,WACE,OAAOzB,EAAK0B,WAsCZC,cAhCF,SAAuBP,GACrB,OAAOpB,EAAK4B,uBAAuBR,IAgCnCS,YA1BF,SAAqBT,GACnB,OAAOT,EAAYkB,YAAYT,IA0B/BU,eApBF,SAAwBT,GACtB,OAAOV,EAAYmB,eAAeT,KAsBpC,OACE,cAAClB,EAAY4B,SAAb,CAAsBb,MAAOA,EAA7B,UACIL,GAAWJ,IC5EJ,SAASuB,EAAT,GAA0D,IAAvBC,EAAsB,EAAjCC,UAAyBC,EAAQ,6BAC9DxB,EAAgBL,IAAhBK,YAER,OACE,cAAC,IAAD,2BACMwB,GADN,IAEEC,OAAQ,SAAAC,GACN,OAAO1B,EAAc,cAACsB,EAAD,eAAeI,IAAY,cAAC,IAAD,CAAUC,GAAG,e,iECItDC,G,kKAZX,WACI,OACI,qBAAKC,UAAU,iBAAf,SACI,uBAAMA,UAAU,eAAhB,UACI,+BAAO,qBAAKA,UAAU,YAAYC,IAAI,uBACtC,oBAAID,UAAU,cAAd,mD,GANDP,cCOJ,SAASS,IAAa,IAgDZC,EAhDW,EACNjC,mBAAS,IADH,mBACzBkC,EADyB,KAClBC,EADkB,OAEAvC,IAAxBK,EAFwB,EAExBA,YAAac,EAFW,EAEXA,OACfqB,EAAUC,cAHgB,4CAUhC,sBAAAC,EAAA,6DACIH,EAAS,IADb,kBAIcpB,IAJd,OAKQqB,EAAQG,KAAK,UALrB,gDAOQJ,EAAS,qBAPjB,0DAVgC,kEAwBhC,sBAAAG,EAAA,sDACIH,EAAS,IACT,IACIC,EAAQG,KAAK,eACf,SACEJ,EAAS,6BALjB,4CAxBgC,+BAoCjBK,IApCiB,2EAoChC,wCAAAF,EAAA,sDAAyBG,EAAzB,+BAAsC,WAClCN,EAAS,IACT,IACIC,EAAQG,KAAK,gBAAkBE,GACjC,SACEN,EAAS,wBALjB,4CApCgC,sBAoDhC,OA/CAH,EAAUU,UA2CWT,EA3CYhC,EAAYS,OA4CrBiC,UAAU,EAAGV,EAAaW,QAAQ,MAItD,mCACI,eAACC,EAAA,EAAD,CACIf,UAAU,+DACVgB,MAAO,CAAEC,UAAW,SAFxB,UAII,qBAAKjB,UAAU,oBAAf,SACI,cAAC,EAAD,MAEJ,sBAAKA,UAAU,QAAQgB,MAAO,CAAEE,SAAU,SAA1C,UACI,cAAC,IAAD,UACI,eAAC,IAAKC,KAAN,WACI,oBAAInB,UAAU,mBAAd,uBACCI,GAAS,cAACgB,EAAA,EAAD,CAAOC,QAAQ,SAAf,SAAyBjB,IACnC,sBAAKJ,UAAU,mBAAf,qBAA0C,uCAAUE,EAAUU,YAA9D,OACA,sBAAKZ,UAAU,yBAAf,UACI,cAACsB,EAAA,EAAD,CAAQtB,UAAU,aAAauB,QAAS,kBAAMb,EAAU,aAAxD,iCAGA,cAACY,EAAA,EAAD,CAAQtB,UAAU,aAAauB,QAAS,kBAAMb,EAAU,iBAAxD,qCAGA,cAACY,EAAA,EAAD,CAAQtB,UAAU,aAAauB,QAAS,kBAAMb,EAAU,WAAxD,+BAGA,cAACY,EAAA,EAAD,CAAQtB,UAAU,aAAauB,QAAS,kBAAMb,EAAU,aAAxD,2CAGA,cAACY,EAAA,EAAD,CAAQD,QAAQ,UAAUrB,UAAU,QAAQuB,QAhFxC,2CAgFJ,8CAMZ,qBAAKvB,UAAU,yBAAf,SACI,cAACsB,EAAA,EAAD,CAAQD,QAAQ,OAAOE,QAvFX,2CAuFZ,+B,aC3FT,SAASC,IACtB,IAAMC,EAAWC,mBACTvC,EAAkBrB,IAAlBqB,cAF+B,EAGbjB,mBAAS,IAHI,mBAGhCkC,EAHgC,KAGzBC,EAHyB,OAITnC,mBAAS,IAJA,mBAIhCyD,EAJgC,KAIvBC,EAJuB,OAKT1D,oBAAS,GALA,mBAKhCG,EALgC,KAKvBC,EALuB,iDAUvC,WAA4BuD,GAA5B,SAAArB,EAAA,6DACEqB,EAAEC,iBADJ,SAIIF,EAAW,IACXvB,EAAS,IACT/B,GAAW,GANf,SAOUa,EAAcsC,EAASM,QAAQrD,OAPzC,OAQIkD,EAAW,6CARf,kDAUIvB,EAAS,4BAVb,QAaE/B,GAAW,GAbb,2DAVuC,sBA0BvC,OACE,mCACE,cAACyC,EAAA,EAAD,CACEf,UAAU,mDACVgB,MAAO,CAAEC,UAAW,SAFtB,SAIE,sBAAKjB,UAAU,QAAQgB,MAAO,CAAEE,SAAU,SAA1C,UACE,cAAC,IAAD,UACE,eAAC,IAAKC,KAAN,WACE,oBAAInB,UAAU,mBAAd,4BACCI,GAAS,cAACgB,EAAA,EAAD,CAAOC,QAAQ,SAAf,SAAyBjB,IAClCuB,GAAW,cAACP,EAAA,EAAD,CAAOC,QAAQ,UAAf,SAA0BM,IACtC,eAACK,EAAA,EAAD,CAAMC,SAtCqB,4CAsC3B,UACE,eAACD,EAAA,EAAKE,MAAN,CAAYC,GAAG,QAAf,UACE,cAACH,EAAA,EAAKI,MAAN,oBACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,QAAQ5E,IAAK+D,EAAUc,UAAQ,OAEpD,cAACjB,EAAA,EAAD,CAAQkB,SAAUnE,EAAS2B,UAAU,QAAQsC,KAAK,SAAlD,+BAIF,qBAAKtC,UAAU,yBAAf,SACE,cAAC,IAAD,CAAMF,GAAG,SAAT,0BAIN,sBAAKE,UAAU,yBAAf,8BACmB,cAAC,IAAD,CAAMF,GAAG,UAAT,+B,iFChDvB2C,GADQC,EAAQ,KACP,uCAAG,0CAAAlC,EAAA,6DAAOmC,EAAP,+BAAoB,OAE/BC,EAAQ,CAAC,CACdT,GAAIU,MACJC,KAAMH,EACNI,UAAW,oCACXC,MAAO,GACPC,aAAc,CACbC,KAAM,GACNC,mBAAoB,IAErBC,MAAO,IACPC,gBAAiB,IACjBC,cAAe,IACfC,0BAA2B,EAC3BC,IAAK,EACLC,eAAe,EACfC,QAAQ,EACRC,OAAO,EACPC,UAAU,EACVC,gBAAiB,EACjBC,OAAO,GAER,CACC3B,GAAIU,MACJC,KAAM,UACNC,UAAW,mCACXC,MAAO,GACPC,aAAc,CACbC,KAAM,GACNC,mBAAoB,IAErBC,MAAO,IACPC,gBAAiB,IACjBC,cAAe,IACfC,0BAA2B,EAC3BC,IAAK,EACLC,eAAe,EACfC,QAAQ,EACRC,OAAO,EACPC,UAAU,EACVC,gBAAiB,EACjBC,OAAO,GAER,CACC3B,GAAIU,MACJC,KAAM,UACNC,UAAW,kCACXC,MAAO,GACPC,aAAc,CACbC,KAAM,GACNC,mBAAoB,IAErBC,MAAO,IACPC,gBAAiB,IACjBC,cAAe,IACfC,0BAA2B,EAC3BC,IAAK,EACLC,eAAe,EACfC,QAAQ,EACRC,OAAO,EACPC,UAAU,EACVC,gBAAiB,EACjBC,OAAO,GAER,CACC3B,GAAIU,MACJC,KAAM,UACNC,UAAW,qCACXC,MAAO,GACPC,aAAc,CACbC,KAAM,GACNC,mBAAoB,IAErBC,MAAO,IACPC,gBAAiB,IACjBC,cAAe,IACfC,0BAA2B,EAC3BC,IAAK,EACLC,eAAe,EACfC,QAAQ,EACRC,OAAO,EACPC,UAAU,EACVC,gBAAiB,EACjBC,OAAO,GAER,CACC3B,GAAIU,MACJC,KAAM,UACNC,UAAW,qCACXC,MAAO,GACPC,aAAc,CACbC,KAAM,GACNC,mBAAoB,IAErBC,MAAO,IACPC,gBAAiB,IACjBC,cAAe,IACfC,0BAA2B,EAC3BC,IAAK,EACLC,eAAe,EACfC,QAAQ,EACRC,OAAO,EACPC,UAAU,EACVC,gBAAiB,EACjBC,OAAO,GAER,CACC3B,GAAIU,MACJC,KAAM,UACNC,UAAW,qCACXC,MAAO,GACPC,aAAc,CACbC,KAAM,GACNC,mBAAoB,IAErBC,MAAO,IACPC,gBAAiB,IACjBC,cAAe,IACfC,0BAA2B,EAC3BC,IAAK,EACLC,eAAe,EACfC,QAAQ,EACRC,OAAO,EACPC,UAAU,EACVC,gBAAiB,EACjBC,OAAO,IA9HS,kBAiIVlB,GAjIU,2CAAH,sDAqJTmB,EAAsB,SAACC,EAAcC,EAAaC,EAAaC,GACpE,OAAQA,GACP,IAAM,KACL,OACEH,EAAeC,GAAeC,EAGjC,IAAM,OACL,OACGF,EAAeC,GAAeC,EAAeA,EAGjD,QAAS,MAAME,MAAM,wDAMjBC,EAA+B,SAA/BA,EAAgCC,GAA8B,IAAvBC,EAAsB,wDAMlE,OALKA,EAEMA,IACVD,EAAME,kBAAoBT,EAAoBO,EAAME,kBAAmB,EAAGF,EAAMG,QAAQC,OAAQ,OAFhGJ,EAAME,kBAAoBT,EAAoBO,EAAMK,WAAWC,IAAK,EAAGN,EAAMG,QAAQC,OAAQ,MAI1FJ,EAAMG,QAAQH,EAAME,mBAAmBd,QAGU,IAAjDY,EAAMG,QAAQH,EAAME,mBAAmBpB,MAFnCiB,EAA6BC,GAAO,GAKrCA,GAMFO,EAAyB,SAAzBA,EAA0BP,GAC/BA,EAAME,kBAAoBT,EAAoBO,EAAME,kBAAmB,EAAGF,EAAMG,QAAQC,OAAQ,MAChG,IAAMI,EAAeR,EAAMG,QAAQH,EAAME,mBAEnCO,EAA4BT,EAAMU,iBAAmBV,EAAMW,kBAAoB,EACrF,OAA+B,IAA3BX,EAAMU,kBACTE,QAAQC,IAAI,iDACJC,GAAeC,GAAUC,GAAwBhB,MAEtDQ,EAAapB,QAChBwB,QAAQC,IAAI,gEACLN,EAAuBP,IAI9BS,IACCD,EAAapB,QACdoB,EAAarB,cAEL2B,GAAeC,GAAUC,GAAwBhB,KAG/B,IAAvBQ,EAAa1B,MACZkB,EAAMW,kBAAoBX,EAAMU,kBACnCE,QAAQC,IAAI,2BACJC,GAAeC,GAAUC,GAAwBhB,MAC/CS,GAA4BD,EAAanB,MAC3CyB,GAAeC,GAAUC,GAAwBhB,KAElDO,EAAuBP,GAI5BQ,EAAarB,eAChByB,QAAQC,IAAI,uFACLI,GAAiBjB,IAGlBA,GAQFkB,EAAiB,SAAjBA,EAAkBlB,GACvBA,EAAMmB,YAAc1B,EAAoBO,EAAMmB,YAAa,EAAGnB,EAAMG,QAAQC,OAAQ,MACpF,IAAMgB,EAAapB,EAAMG,QAAQH,EAAMmB,aACvC,OAAyB,IAArBC,EAAWtC,MACPoC,EAAelB,GAGhBqB,EAAiBrB,EAAOoB,EAAW5C,OASrC6C,EAAmB,SAACrB,EAAOsB,GAChCtB,EAAMG,QAAUH,EAAMG,QAAQoB,QAAO,SAAAC,GAAM,OAAIA,EAAO1C,MAAQ,KAC9D,IAAM2C,EAAiBzB,EAAMG,QAAQuB,WAAU,SAAAF,GAAM,OAAIA,EAAOhD,OAAS8C,KAGzE,GAFAtB,EAAMmB,YAAcM,EACpBzB,EAAME,kBAAoBuB,EACG,IAAzBzB,EAAMG,QAAQC,OAEjB,OAAOJ,EACD,GAA6B,IAAzBA,EAAMG,QAAQC,OACxBJ,EAAMK,WAAWsB,MAAQF,EACzBzB,EAAMK,WAAWC,IAAMb,EAAoBgC,EAAgB,EAAGzB,EAAMG,QAAQC,OAAQ,MACpFJ,EAAMG,QAAUyB,GAAa5B,EAAMG,QAAS,CAAE0B,cAAe7B,EAAMK,WAAWC,IAAKwB,gBAAiB9B,EAAMK,WAAWsB,OAAS3B,EAAM+B,QAAQC,KAAI,SAAAR,GAAM,kCAClJA,GADkJ,IAErJ9C,MAAO,GACPC,aAAc,CACbC,KAAM,GACNC,mBAAoB,IAErBE,gBAAiByC,EAAO1C,MAAQ0C,EAAOtC,IACvCD,0BAA2B,EAC3BE,eAAe,EACfC,QAAQ,EACRC,OAAO,OAERW,EAAMW,gBAAkB,EACxBX,EAAMiC,iBAAmB,EACzBjC,EAAMU,iBAAmBV,EAAMG,QAAQC,WACjC,CACN,IAAM8B,EAAgBC,GAAsBV,EAAgBzB,EAAMG,QAAQC,QAC1EJ,EAAMK,WAAa,CAClBC,IAAK4B,EAAcL,cACnBF,MAAOO,EAAcJ,iBAEtB9B,EAAMG,QAAUyB,GAAa5B,EAAMG,QAAS+B,EAAelC,EAAM+B,QAAQC,KAAI,SAAAR,GAAM,kCAC/EA,GAD+E,IAElF9C,MAAO,GACPC,aAAc,CACbC,KAAM,GACNC,mBAAoB,IAErBE,gBAAiByC,EAAO1C,MAAQ0C,EAAOtC,IACvCD,0BAA2B,EAC3BE,eAAe,EACfC,QAAQ,EACRC,OAAO,OAERW,EAAMW,gBAAkB,EACxBX,EAAMiC,iBAAmB,EACzBjC,EAAMU,iBAAmBV,EAAMG,QAAQC,OAExC,OAAOgC,GAAgBpC,IAOlBqC,EAAiB,SAACrC,GACvBA,EAAMsC,eAAiB,GACvBtC,EAAMuC,SAAW,GACjBvC,EAAMwC,gBAAkB,GACxBxC,EAAMyC,iBAAmB,GACzBzC,EAAM0C,KAAOC,GAAaC,MAC1B5C,EAAM6C,QAAU,GAChB7C,EAAM8C,cAAgB,GACtB9C,EAAM+B,OAAS,GARkB,IAW3BgB,EADc/C,EAAZG,QACyB6B,KAAI,SAAAR,GAAM,kCAAUA,GAAV,IAAkB9C,MAAO8C,EAAO9C,MAAMsD,KAAI,SAAAgB,YAErF,OADAhD,EAAMG,QAAU4C,EACT7B,EAAelB,IAMjBiD,EAAW,SAAA9C,GAChB,OAA8D,IAAtDA,EAAQoB,QAAO,SAAAC,GAAM,OAAIA,EAAO1C,MAAQ,KAAGsB,QCvU9C1B,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,KACtEwE,EAAQ,CAAC,QAAS,QAAS,OAAQ,WAGnCC,GAAY,CACjBC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,GAAI,EACJC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,IAQEpB,GAAkB,WACvB,IAD6B,EACvBF,EAAO,GADgB,cAIZQ,GAJY,IAI7B,2BAAwB,CAAC,IAAD,EAAfe,EAAe,sBACNvF,GADM,IACvB,2BAAwB,CAAC,IAAhBsE,EAAe,QACvBN,EAAKvG,KAAK,CACT+H,SAAUlB,EACViB,KAAMA,EACN7J,MAAO+I,GAAUH,MALI,gCAJK,8BAa7B,OAAON,GAOFC,GAAe,SAACD,GAGrB,IAFA,IAAIyB,EAAe,IAAIC,MA/CF,IAgDjBC,EAAc,GACTC,EAAI,EAAGA,EAjDK,GAiDcA,IAElC,GAAU,KAANA,EAAU,CAEb,IAAMC,EAAWJ,EAAazC,WAAU,SAAC8C,GAAD,MAAqB,oBAANA,KACvDL,EAAaI,GAAY7B,EAAK4B,GAC9BD,EAAYlI,KAAKoI,OACX,CAGN,IADA,IAAIE,EAAoBC,GAAoB,EAAGC,IACxCN,EAAYO,SAASH,IAC3BA,EAAoBC,GAAoB,EAAGC,IAE5CR,EAAaM,GAAqB/B,EAAK4B,GACvCD,EAAYlI,KAAKsI,GAGnB,OAAON,GAOF/B,GAAkB,SAACpC,GACxBA,EAAM6E,YAAa,EAGnB,IAFA,IAAIC,EAAiB,EAEd9E,EAAMG,QAAQH,EAAME,mBAAmBxB,MAAM0B,OAAS,GAAG,CAAC,IAAD,EACtB2E,GAAS/E,EAAM0C,KAAM,GAAtDsC,EADuD,EACvDA,gBAAiBC,EADsC,EACtCA,YAGzBA,EAAYH,eAAiBA,EAC7BA,GAAkC,IAElC,IAAMI,EAAO,YAAOF,GACpBhF,EAAMG,QAAQH,EAAME,mBAAmBxB,MAAMvC,KAAK8I,GAElDjF,EAAM0C,KAAOwC,EACblF,EAAME,kBAAoBT,EAAoBO,EAAME,kBAAmB,EAAGF,EAAMG,QAAQC,OAAQ,MAEjG,GAA4D,IAAxDJ,EAAMG,QAAQH,EAAME,mBAAmBxB,MAAM0B,OAIhD,OAHAJ,EAAME,kBAAoBT,EAAoBO,EAAMK,WAAWC,IAAK,EAAGN,EAAMG,QAAQC,OAAQ,MAE7FJ,EAAMmF,MAAQ,WACPnF,GAQH0E,GAAsB,SAACU,EAAKC,GAGjC,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,GAOhDL,GAAW,SAACrC,EAAMgD,GAEvB,IACIT,EADED,EAAe,YAAOtC,GAE5B,GAAiB,IAAbgD,EAEHT,EAAcD,EAAgBW,UACxB,CAENV,EAAc,GACd,IAAK,IAAIX,EAAI,EAAGA,EAAIoB,EAAUpB,IAC7BW,EAAY9I,KAAK6I,EAAgBW,OAGnC,MAAO,CAAEX,kBAAiBC,gBA+DrBjE,GAA0B,SAAChB,GAEhC,IAAM4F,EAAa,EAAI5F,EAAMsC,eAAelC,OAC5C,GAAIwF,GAAc,EAAG,CACpB,IADoB,EAChBd,EAAiB,EADD,EAEqBe,GAAiB7F,EAAM0C,KAAMkD,GAA9DZ,EAFY,EAEZA,gBAAiBC,EAFL,EAEKA,YAFL,cAIHA,GAJG,IAIpB,2BAA8B,CAAC,IAAtBjC,EAAqB,QAC7BA,EAAK8B,eAAiBA,EACtBA,GAAkC,IAClC9E,EAAMsC,eAAenG,KAAK6G,IAPP,8BAUpBhD,EAAM0C,KAAOsC,EAId,OADAhF,EAAMmF,MAAQ,WACPnF,GAMFc,GAAiB,SAACd,GAAU,oBAEdA,EAAMG,SAFQ,yBAExBqB,EAFwB,QAG1BsE,EAAqB,GACrBC,EAAgB,GAGtBvE,EAAO7C,aAAaC,KAAO4C,EAAO9C,MAAMsH,OAAOhG,EAAMsC,gBACrDd,EAAO7C,aAAaE,mBAAqB2C,EAAO7C,aAAaC,KAAKoD,KAAI,SAAAwC,GAAE,OAAIA,KAAIyB,MAAK,SAAC/J,EAAGgK,GAAJ,OAAUA,EAAE9L,MAAQ8B,EAAE9B,SAE3GoH,EAAO7C,aAAaE,mBAAmBsH,SAAQ,SAAAnD,GAC9C8C,EAAmB9C,EAAKkB,UAAa4B,EAAmB9C,EAAKkB,UAAY,GAAK,EAC9E6B,EAAc/C,EAAKiB,MAAS8B,EAAc/C,EAAKiB,MAAQ,GAAK,KAG7DzC,EAAOsE,mBAAqBA,EAC5BtE,EAAOuE,cAAgBA,EAEvB,IAAMK,EAAWC,GAAiB7E,EAAO7C,aAAaE,oBAlBtB,EAqBCyH,GAAaP,GAAtCQ,EArBwB,EAqBxBA,QAASC,EArBe,EAqBfA,YACXC,EAAcF,GAAY/E,EAAO7C,aAAaE,mBAAmB0C,QAAO,SAAAyB,GAAI,OAAIA,EAAKiB,OAASuC,KAC9FE,EAAgBH,GAAYI,GAAkBF,GAvBpB,EAwBoEF,GAAYK,GAAqBH,GAA7HI,EAxBwB,EAwBxBA,gBAAiBC,EAxBO,EAwBPA,mBAAoBC,EAxBb,EAwBaA,uBAAwBC,EAxBrC,EAwBqCA,0BAxBrC,EAyBqDC,GAAgBb,GAA7Fc,EAzBwB,EAyBxBA,WAAYC,EAzBY,EAyBZA,cAAeC,EAzBH,EAyBGA,qBAAsBC,EAzBzB,EAyByBA,wBAzBzB,EA0BsEC,GAAwB9F,EAAO7C,aAAaE,mBAAoBiH,GAA9JyB,EA1BwB,EA0BxBA,cAAeC,EA1BS,EA0BTA,YAAaC,EA1BJ,EA0BIA,eAAgBC,EA1BpB,EA0BoBA,UAAWC,EA1B/B,EA0B+BA,OAAQC,EA1BvC,EA0BuCA,2BACjEC,GAAcnB,IAAmBG,IAAsBU,IAAoBC,IAAkBjB,IAAcW,IAAiBO,IAAqBC,IAAgBC,EAGvKnG,EAAO7C,aAAamJ,MAAQ,CAC3BpB,eACAG,kBACAU,gBACAC,cACAjB,UACAW,aACAO,iBACAC,YACAC,SACAE,YAGDrG,EAAO7C,aAAaoJ,kBAAoB,CAAC,CACxCvJ,KAAM,cACNwJ,MAAOtB,GACL,CACFlI,KAAM,iBACNwJ,MAAOnB,GACL,CACFrI,KAAM,iBACNwJ,MAAOT,GACL,CACF/I,KAAM,aACNwJ,MAAOR,GACL,CACFhJ,KAAM,QACNwJ,MAAOzB,GACL,CACF/H,KAAM,WACNwJ,MAAOd,GACL,CACF1I,KAAM,kBACNwJ,MAAOP,GACL,CACFjJ,KAAM,WACNwJ,MAAON,GACL,CACFlJ,KAAM,OACNwJ,MAAOL,GACL,CACFnJ,KAAM,UACNwJ,MAAOH,IAGRrG,EAAOyG,SAAWL,EAGlB,IAAMM,EAAmB1G,EAAO7C,aAAaoJ,kBAAkBrG,WAAU,SAAA8C,GAAE,OAAiB,IAAbA,EAAGwD,SAClFxG,EAAO7C,aAAawJ,aAAe3G,EAAO7C,aAAaoJ,kBAAkBG,GAAkB1J,KAC3FgD,EAAO7C,aAAayJ,SAAWC,GAAa7G,EAAO7C,aAAaE,mBAAoB2C,EAAO7C,aAAawJ,aAAc3B,EAAaC,EAAYW,EAAsBC,EAAyBF,EAAeL,EAAoBC,EAAwBC,EAA2BY,IA9ErR,2BAAmC,IAFF,8BAoFjC,OAAOU,GAAetI,IAOjB6F,GAAmB,SAACnD,EAAM6F,GAE/B,IACItD,EADED,EAAe,YAAOtC,GAG5B,GAAiB,IAAb6F,EACHtD,EAAc,CAACD,EAAgBW,WACzB,CAENV,EAAc,GACd,IAAK,IAAIX,EAAI,EAAGA,EAAIiE,EAAUjE,IAC7BW,EAAY9I,KAAK6I,EAAgBW,OAGnC,MAAO,CAAEX,kBAAiBC,gBAMrBoD,GAAe,SAACzJ,EAAM4J,EAAUhC,EAAaC,EAAYW,EAAsBC,EAAyBF,EAAeL,EAAoBC,EAAwBC,EAA2BY,GAEnM,OAAQY,GAEP,IAAM,cACL,OAAO/B,EAAWgC,MAAM,EAAG,GAG5B,IAAM,iBACL,OAAI3B,GAAsBC,EAAuB3G,OAAS,GACzD4G,EAA0B,GAAK,GACxBA,EAA0B0B,QAAO,SAACC,EAAKC,EAAKC,GAIlD,OAHIA,EAAQ,GACXF,EAAIxM,KAAKsK,EAAWA,EAAW/E,WAAU,SAAAsG,GAAK,OAAIA,EAAM5N,QAAUwO,OAE5DD,IACL,IAAIG,WAEA/B,EAAuB2B,QAAO,SAACC,EAAKC,EAAKC,GAI/C,OAHIA,EAAQ,GACXF,EAAIxM,KAAKsK,EAAWA,EAAW/E,WAAU,SAAAsG,GAAK,OAAIA,EAAM5N,QAAUwO,OAE5DD,IACL,IAIL,IAAM,iBAIL,IAHA,IAAMP,EAAW,GACbW,EAAcC,oBAAUpK,GAFJ,WAIf0F,GACR,IAAM2E,EAAcF,EAAYrH,WAAU,SAAAsG,GAAK,OAAIA,EAAM9D,WAAa0D,EAA2BsB,MAAM,GAAGC,QAC1Gf,EAASjM,KAAK4M,EAAYE,IAC1BF,EAAcA,EAAYxH,QAAO,SAACyG,EAAOa,GAAR,OAAkBA,IAAUI,MAHrD3E,EAAI,EAAGA,EAAI,EAAGA,IAAM,IAM7B,OAAO8D,EAASpC,OAAO+C,EAAYN,MAAM,EAAG,IAG7C,IAAM,aACL,IAAML,EAAW,GACbW,EAAcC,oBAAUpK,GAC5B,GAAIgJ,EAA2BwB,SAAShJ,OAAS,EAAG,CACnD,IADoD,IAAD,WAC1CkE,GACR,IAAM+E,EAAiBN,EAAYrH,WAAU,SAAAsG,GAAK,OAAIA,EAAM9D,WAAa0D,EAA2BwB,SAAS,GAAGD,QAChHf,EAASjM,KAAK4M,EAAYM,IAC1BN,EAAcA,EAAYxH,QAAO,SAACyG,EAAOa,GAAR,OAAkBA,IAAUQ,MAHrD/E,EAAI,EAAGA,EAAI,EAAGA,IAAM,IAK7B,IANmD,eAM1CA,GACR,IAAMgF,EAAcP,EAAYrH,WAAU,SAAAsG,GAAK,OAAIA,EAAM9D,WAAa0D,EAA2BwB,SAAS,GAAGD,QAC7Gf,EAASjM,KAAK4M,EAAYO,IAC1BP,EAAcA,EAAYxH,QAAO,SAACyG,EAAOa,GAAR,OAAkBA,IAAUS,MAHrDhF,EAAI,EAAGA,EAAI,EAAGA,IAAM,IAK7B,OAAO8D,EAEP,IADO,IAAD,WACG9D,GACR,IAAM+E,EAAiBN,EAAYrH,WAAU,SAAAsG,GAAK,OAAIA,EAAM9D,WAAa0D,EAA2BwB,SAAS,GAAGD,QAChHf,EAASjM,KAAK4M,EAAYM,IAC1BN,EAAcA,EAAYxH,QAAO,SAACyG,EAAOa,GAAR,OAAkBA,IAAUQ,MAHrD/E,EAAI,EAAGA,EAAI,EAAGA,IAAM,IAK7B,IANM,eAMGA,GACR,IAAMgF,EAAcP,EAAYrH,WAAU,SAAAsG,GAAK,OAAIA,EAAM9D,WAAa0D,EAA2B2B,MAAM,GAAGJ,QAC1Gf,EAASjM,KAAK4M,EAAYO,IAC1BP,EAAcA,EAAYxH,QAAO,SAACyG,EAAOa,GAAR,OAAkBA,IAAUS,MAHrDhF,EAAI,EAAGA,EAAI,EAAGA,IAAM,IAK7B,OAAO8D,EAIT,IAAM,QACL,OAAO3B,EAAWgC,MAAM,EAAG,GAG5B,IAAM,WACL,OAAItB,GAAiBC,EAAqBhH,OAAS,GAClDiH,EAAwB,GAAK,GACtBA,EAAwBqB,QAAO,SAACC,EAAKC,EAAKC,GAIhD,OAHIA,EAAQ,GACXF,EAAIxM,KAAKyC,EAAKA,EAAK8C,WAAU,SAAAsG,GAAK,OAAIA,EAAM5N,QAAUwO,OAEhDD,IACL,IAAIG,WAEA1B,EAAqBsB,QAAO,SAACC,EAAKC,EAAKC,GAI7C,OAHIA,EAAQ,GACXF,EAAIxM,KAAKyC,EAAKA,EAAK8C,WAAU,SAAAsG,GAAK,OAAIA,EAAM5N,QAAUwO,OAEhDD,IACL,IAIL,IAAM,kBAIL,IAHA,IAAMP,EAAW,GACbW,EAAcC,oBAAUpK,GAFH,WAIhB0F,GACR,IAAM+E,EAAiBN,EAAYrH,WAAU,SAAAsG,GAAK,OAAIA,EAAM9D,WAAa0D,EAA2BwB,SAAS,GAAGD,QAChHf,EAASjM,KAAK4M,EAAYM,IAC1BN,EAAcA,EAAYxH,QAAO,SAACyG,EAAOa,GAAR,OAAkBA,IAAUQ,MAHrD/E,EAAI,EAAGA,EAAI,EAAGA,IAAM,IAM7B,OAAO8D,EAASpC,OAAO+C,EAAYN,MAAM,EAAG,IAG7C,IAAM,WAGL,IAFA,IAAML,EAAW,GACbW,EAAcC,oBAAUpK,GAFV,WAGT0F,GACR,IAAMgF,EAAcP,EAAYrH,WAAU,SAAAsG,GAAK,OAAIA,EAAM9D,WAAa0D,EAA2B2B,MAAM,GAAGJ,QAC1Gf,EAASjM,KAAK4M,EAAYO,IAC1BP,EAAcA,EAAYxH,QAAO,SAACyG,EAAOa,GAAR,OAAkBA,IAAUS,MAHrDhF,EAAI,EAAGA,EAAI,EAAGA,IAAM,IAM7B,IATkB,eASTA,GAER,IAAMgF,EAAcP,EAAYrH,WAAU,SAAAsG,GAAK,OAAIA,EAAM9D,WAAa0D,EAA2B2B,MAAM,GAAGJ,QAC1Gf,EAASjM,KAAK4M,EAAYO,IAC1BP,EAAcA,EAAYxH,QAAO,SAACyG,EAAOa,GAAR,OAAkBA,IAAUS,MAJrDhF,EAAI,EAAGA,EAAI,EAAGA,IAAM,IAM7B,OAAO8D,EAASpC,OAAO+C,EAAYN,MAAM,EAAG,IAI7C,IAAM,OAGL,IAFA,IAAML,EAAW,GACbW,EAAcC,oBAAUpK,GAFd,WAGL0F,GACR,IAAMgF,EAAcP,EAAYrH,WAAU,SAAAsB,GAAI,OAAIA,EAAKkB,WAAa0D,EAA2B2B,MAAM,GAAGJ,QAExGf,EAASjM,KAAK4M,EAAYO,IAC1BP,EAAcA,EAAYxH,QAAO,SAACyB,EAAM6F,GAAP,OAAiBA,IAAUS,MAJpDhF,EAAI,EAAGA,EAAI,EAAGA,IAAM,IAM7B,OAAO8D,EAASpC,OAAO+C,EAAYN,MAAM,EAAG,IAK7C,IAAM,UACL,OAAO7J,EAAK6J,MAAM,EAAG,GAEtB,QAAS,MAAM3I,MAAM,yDA2EjB0J,GAAsB,SAACxJ,GAG5B,IAAMyJ,EAAgBzJ,EAAMG,QAAQoB,QAAO,SAAAC,GAAM,OAAKA,EAAOpC,UACzDsK,EAAY,GAEVC,EAAU,IAAIC,IAAI,CACvB,CAAC,cAAe,IAChB,CAAC,iBAAkB,IACnB,CAAC,iBAAkB,IACnB,CAAC,aAAc,IACf,CAAC,QAAS,IACV,CAAC,WAAY,IACb,CAAC,kBAAmB,IACpB,CAAC,WAAY,IACb,CAAC,OAAQ,IACT,CAAC,UAAW,MAIbH,EAActD,SAAQ,SAAC3E,EAAQqI,GAAiB,IAE9CrL,EAEGgD,EAFHhD,KAF6C,EAI1CgD,EADH7C,aAAgBwJ,EAH6B,EAG7BA,aAAcC,EAHe,EAGfA,SAE/BuB,EAAQG,IAAI3B,GAAchM,KAAK,CAC9BqC,OACA4J,WACAyB,mBA5BoC,oBAgCWF,GAhCX,kDAgC1BI,EAhC0B,KAgChBC,EAhCgB,KAiCrC,GAAIA,EAAuB5J,OAAS,EAAG,CAEtC,GAAiB,gBAAb2J,EAA4B,CAC/B,IAAME,EAAkCD,EAAuBhI,KAAI,SAAAR,GAAM,MAAK,CAC7EhD,KAAMgD,EAAOhD,KACb4J,SAAU5G,EAAO4G,SACjB2B,eAGD,OADAL,EAAYA,EAAU1D,OAAOiE,GAC7B,WAGD,GAAsC,IAAlCD,EAAuB5J,OAAc,CAAC,IAAD,EACb4J,EAAuB,GAA1CxL,EADgC,EAChCA,KAAM4J,EAD0B,EAC1BA,SACdsB,EAAYA,EAAU1D,OAAO,CAAC,CAC7BxH,OACA4J,WACA2B,mBAGK,GAAIC,EAAuB5J,OAAS,EAAG,CAC7C,IAIM8J,EA9H4B,SAACC,EAAkBJ,GACxD,IAAIG,EAAkB,GAClBE,EAAiB,GACfC,EAAoB,SAApBA,EAAqBC,GAA2B,IAAfC,EAAc,uDAAN,EAC9C,GAA6B,IAAzBD,EAAW,GAAGlK,OAAlB,CAKA,IAAIoK,EAAuBL,EAAiBnI,KAAI,SAAAwC,GAAE,OAAIA,KAChDiG,EAAQH,EAAWC,GAP2B,EAQdG,GAAoBD,GAAlDE,EAR4C,EAQ5CA,aAAcC,EAR8B,EAQ9BA,YAEtB,GAAIA,EAAYxK,OAAS,EAAG,CAC3B,IAAMyK,EAAsBL,EAAqBxI,KAAI,SAAAyI,GACpD,OAAOA,EAAMlJ,QAAO,SAAAuJ,GACnB,OAAOF,EAAYG,MAAK,SAAAC,GACvB,OAAOA,EAAoBxM,OAASsM,EAAStM,cAKhD4L,EAAiB,CAACS,GAAqB7E,OAAOoE,GAG/C,GAA4B,IAAxBO,EAAavK,OAAc,CAAC,IAAD,EACHuK,EAAa,GAAhCnM,EADsB,EACtBA,KAAM4J,EADgB,EAChBA,SACd8B,EAAkBA,EAAgBlE,OAAO,CAAC,CACzCxH,OACA4J,WACA2B,mBAGK,GAAIQ,IAAWJ,EAAiB/J,OAAS,EAAI,CACnD,IAAM6K,EAA0BN,EAAa3I,KAAI,SAAA8I,GAAQ,MAAK,CAC7DtM,KAAMsM,EAAStM,KACf4J,SAAU0C,EAAS1C,SACnB2B,eAEDG,EAAkBA,EAAgBlE,OAAO,CAACiF,QACpC,CAQNZ,EAP6BG,EAAqBxI,KAAI,SAAAyI,GACrD,OAAOA,EAAMlJ,QAAO,SAAAuJ,GACnB,OAAOH,EAAaI,MAAK,SAAAC,GACxB,OAAOA,EAAoBxM,OAASsM,EAAStM,cAIP+L,EAAQ,QA5ClD,CAAiC,IAAD,EACJD,EAAW,GAAG,GAAjC9L,EADuB,EACvBA,KAAM4J,EADiB,EACjBA,SACd8B,EAAkBA,EAAgBlE,OAAO,CAAC,CAAExH,OAAM4J,WAAU2B,gBAwD9D,OAFAM,EAAkBF,GARgB,SAA5Be,EAA6BC,GAClC,GAAIf,EAAehK,OAAS,EAAG,CAC9B,IAAMgL,EAA2BD,EAAoB,GACrDf,EAAiBe,EAAoB1C,MAAM,GAC3C4B,EAAkBe,GAClBF,EAA0Bd,IAI5Bc,CAA0Bd,GACnBF,EAgEoBmB,CAJCC,GAAyBvB,EAAUC,GAC1DhI,KAAI,SAAC8I,GACL,OAAOA,EAAS7E,MAAK,SAAC/J,EAAGgK,GAAJ,OAAUA,EAAElD,KAAK5I,MAAQ8B,EAAE8G,KAAK5I,YAEiB2P,GACxEL,EAAYA,EAAU1D,OAAOkE,MA3BhC,2BAA0D,IAhCpB,8BAgEtC,OAAOR,GAMF6B,GAAmB,SAACvL,EAAOwL,GAGhC,IAHgD,EAG1C7B,EAAU,IAAIC,IAAI,CACvB,CAAC,cAAe,IAChB,CAAC,iBAAkB,IACnB,CAAC,iBAAkB,IACnB,CAAC,aAAc,IACf,CAAC,QAAS,IACV,CAAC,WAAY,IACb,CAAC,kBAAmB,IACpB,CAAC,WAAY,IACb,CAAC,OAAQ,IACT,CAAC,UAAW,MAbmC,cAgBzB4B,GAhByB,yBAgBvCC,EAhBuC,QAiBzC5B,EAAc7J,EAAMG,QAAQuB,WAAU,SAAAF,GAAM,OAAIA,EAAOhD,OAASiN,KAChEjK,EAASxB,EAAMG,QAAQ0J,GAExBrI,EAAOpC,QAEXuK,EAAQG,IAAItI,EAAO7C,aAAawJ,cAAchM,KAAK,CAClDqC,KAAMgD,EAAOhD,KACbqL,cACAzB,SAAU5G,EAAO7C,aAAayJ,YATjC,2BAAqC,IAhBW,8BA6BhD,OAAOuB,GAMFe,GAAsB,SAACD,GAC5B,IAAMiB,EAAYjB,EAAM,GAAGzH,KAAK5I,MAGhC,MAAO,CAAEuQ,aAFYF,EAAMlJ,QAAO,SAAAuJ,GAAQ,OAAIA,EAAS9H,KAAK5I,QAAUsR,KAE/Cd,YADHH,EAAMlJ,QAAO,SAAAuJ,GAAQ,OAAIA,EAAS9H,KAAK5I,MAAQsR,OAO9DC,GAAiB,SAAC3L,EAAO2J,EAASiC,GACvC,IAAIC,GAAc,EA4BlB,OAzBAlC,EAAQxD,SAAQ,SAACqF,EAAaM,EAAM9J,GACnC,IAAK6J,EAEJ,GAA2B,IAAvBL,EAAYpL,OACfyL,GAAc,EACdjL,QAAQC,IAAI,WAAY2K,EAAY,GAAGhN,KAAM,yCAA0CsN,GACvF9L,EAAQ+L,GAAY/L,EAAOwL,EAAaI,EAAOE,QAEzC,GAAIN,EAAYpL,OAAS,EAAG,CAClCQ,QAAQC,IAAI2K,GACZK,GAAc,EAEd,IAAMG,EAAUC,GAAeX,GAAyBQ,EAAMN,GAAcM,GAErD,IAAnBE,EAAQ5L,QACXQ,QAAQC,IAAI,WAAYmL,EAAQ,GAAGxN,KAAM,yCAA0CsN,GACnF9L,EAAQ+L,GAAY/L,EAAOgM,EAASJ,EAAOE,KAG3ClL,QAAQC,IAAI,wCAAyCmL,EAAS,qCAAsCF,GACpG9L,EAAQ+L,GAAY/L,EAAOgM,EAASJ,EAAOE,QAKxC9L,GAMFsI,GAAiB,SAACtI,GAEvBA,EAAMwC,gBAAkBgH,GAAoBxJ,GAC5CY,QAAQC,IAAI,yCACZD,QAAQC,IAAIb,EAAMwC,iBAJe,oBAObxC,EAAMuC,UAPO,IAOjC,2BAAoC,CAAC,IAA5B2J,EAA2B,QAC7BvC,EAAU4B,GAAiBvL,EAAOkM,EAAQV,aAChDxL,EAAQ2L,GAAe3L,EAAO2J,EAASuC,EAAQC,WATf,8BAiBjC,OALAnM,EAAMG,QAAUH,EAAMG,QAAQ6B,KAAI,SAAAR,GAAM,kCACpCA,GADoC,IAEvCxC,cAAewC,EAAO1C,WAGhBkB,GAMF+L,GAAc,SAAC/L,EAAOgM,EAASJ,EAAOE,GAE3C,GAAuB,IAAnBE,EAAQ5L,OACXJ,EAAMyC,iBAAmBzC,EAAMyC,iBAAiBuD,OAAO,CAAC,CACvD1H,MAAO,CAAC0N,EAAQ,GAAGxN,MACnBoN,QACAE,UAEDlL,QAAQC,IAAI,gBAAiB+K,EAAO,aAAcI,EAAQ,GAAGxN,MAC7DwB,EAAMG,QAAQ6L,EAAQ,GAAGnC,aAAa/K,OAAS8M,EAC/C5L,EAAMoM,KAAOR,OAEP,GAAII,EAAQ5L,OAAS,EAAG,CAC9B,IAAMiM,EAAWT,EAAQI,EAAQ5L,OAC3BkM,EAAWhH,KAAKE,MAAMoG,EAAQI,EAAQ5L,QAC5CQ,QAAQC,IAAI,8BAA+B+K,EAAO,eAAgBI,EAAQ5L,OAAQ,iCAAkCiM,GACpHrM,EAAMyC,iBAAmBzC,EAAMyC,iBAAiBuD,OAAO,CAAC,CACvD1H,MAAO0N,EAAQhK,KAAI,SAAAuK,GAAM,OAAIA,EAAO/N,QACpCoN,MAAOU,EACPR,UAEDE,EAAQ7F,SAAQ,SAAAoG,GACfvM,EAAMG,QAAQoM,EAAO1C,aAAa/K,OAASwN,EAC3CtM,EAAMoM,KAAOE,KAGf,OAAOtM,GAMFsL,GAA2B,SAACQ,EAAMU,GACvC,IAAIlC,EACJ,OAAQwB,GAEP,IAAM,cACLxB,EAAalG,MAAMqI,KAAK,CAAErM,OAAQ,IAClCoM,EAAWrG,SAAQ,SAACuG,EAAoB7D,GACvCyB,EAAWnO,KAAK,CAEfqC,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,cAG9B,MAGD,IAAM,iBACLkC,EAAalG,MAAMqI,KAAK,CAAErM,OAAQ,IAAK,kBAAMgE,MAAMqI,KAAK,CAAErM,OAAQ,OAClEoM,EAAWrG,SAAQ,SAACuG,EAAoB7D,GACvCyB,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,WAE7BkC,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,cAG9B,MAGD,IAAM,aACLkC,EAAalG,MAAMqI,KAAK,CAAErM,OAAQ,IAAK,kBAAMgE,MAAMqI,KAAK,CAAErM,OAAQ,OAClEoM,EAAWrG,SAAQ,SAACuG,EAAoB7D,GACvCyB,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,WAE7BkC,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,cAG9B,MAID,IAAM,QACN,IAAM,UACLkC,EAAalG,MAAMqI,KAAK,CAAErM,OAAQ,IAAK,kBAAMgE,MAAMqI,KAAK,CAAErM,OAAQ,OAClEoM,EAAWrG,SAAQ,SAACuG,EAAoB7D,GACvC,IAAK,IAAIvE,EAAI,EAAGA,EAAI,EAAGA,IACtBgG,EAAWhG,GAAGnI,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS9D,GACjC9F,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,cAI/B,MAGD,IAAM,kBACLkC,EAAalG,MAAMqI,KAAK,CAAErM,OAAQ,IAAK,kBAAMgE,MAAMqI,KAAK,CAAErM,OAAQ,OAClEoM,EAAWrG,SAAQ,SAACuG,EAAoB7D,GACvCyB,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,WAE7BkC,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,WAE7BkC,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,cAG9B,MAID,IAAM,WACN,IAAM,iBACLkC,EAAalG,MAAMqI,KAAK,CAAErM,OAAQ,IAAK,kBAAMgE,MAAMqI,KAAK,CAAErM,OAAQ,OAClEoM,EAAWrG,SAAQ,SAACuG,EAAoB7D,GACvCyB,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,cAG9B,MAGD,IAAM,WACLkC,EAAalG,MAAMqI,KAAK,CAAErM,OAAQ,IAAK,kBAAMgE,MAAMqI,KAAK,CAAErM,OAAQ,OAClEoM,EAAWrG,SAAQ,SAACuG,EAAoB7D,GACvCyB,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,WAE7BkC,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,WAE7BkC,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,cAG9B,MAGD,IAAM,OACLkC,EAAalG,MAAMqI,KAAK,CAAErM,OAAQ,IAAK,kBAAMgE,MAAMqI,KAAK,CAAErM,OAAQ,OAClEoM,EAAWrG,SAAQ,SAACuG,EAAoB7D,GACvCyB,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,WAE7BkC,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,WAE7BkC,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,WAE7BkC,EAAW,GAAGnO,KAAK,CAElB6G,KAAMwJ,EAAW3D,GAAOT,SAAS,GACjC5J,KAAMgO,EAAW3D,GAAOrK,KACxBqL,YAAa2C,EAAW3D,GAAOgB,YAC/BzB,SAAUoE,EAAW3D,GAAOT,cAG9B,MAED,QAAS,MAAMtI,MAAM,mEAEtB,OAAOwK,GAMF2B,GAAiB,SAAC3B,EAAYwB,GACnC,IAAIE,EACJ,GAAa,gBAATF,EAAwB,OAAOxB,EACnC,IAH4C,eAGnChG,GACR,IAAIoH,EAAY,EACZiB,EAAS,GAyBb,GAAuB,KAvBvBX,EAAU1B,EAAWhG,GAAG2B,MAAK,SAAC/J,EAAGgK,GAAJ,OAAUA,EAAElD,KAAK5I,MAAQ8B,EAAE8G,KAAK5I,SAAOsO,QAAO,SAACC,EAAKC,EAAKC,GAErF,OAAID,EAAI5F,KAAK5I,MAAQsR,GAEpBA,EAAY9C,EAAI5F,KAAK5I,MACrBuO,EAAIxM,KAAK,CACRqC,KAAMoK,EAAIpK,KACVqL,YAAajB,EAAIiB,cAEXlB,GACGC,EAAI5F,KAAK5I,QAAUsR,GAC7B/C,EAAIxM,KAAK,CACRqC,KAAMoK,EAAIpK,KACVqL,YAAajB,EAAIiB,cAEXlB,GAEGC,EAAI5F,KAAK5I,MAAQsR,GAC3BiB,EAAOxQ,KAAKyM,EAAIpK,MACTmK,QAFD,IAIL,KAESvI,QAAgBkE,IAAMgG,EAAWlK,OAC5C,MAAM,CAAN,EAAO4L,GAEHW,EAAOvM,QAAU,GACpBuM,EAAOxG,SAAQ,SAACyG,GACftC,EAAaA,EAAWtI,KAAI,SAAA8I,GAAQ,OAAIA,EAASvJ,QAAO,SAACiD,GAAD,OAAQA,EAAGhG,OAASoO,YAhCvEtI,EAAI,EAAGA,EAAIgG,EAAWlK,OAAQkE,IAAK,CAAC,IAAD,IAAnCA,GAAmC,kCAqC5C,OAAO0H,GAOF1F,GAAe,SAACP,GAIrB,IAAK,IAAI9B,KAAQ8B,EAChB,GAAIA,EAAc9B,IAAS,EAC1B,MAAO,CACNsC,SAAS,EACTC,YAAavC,GAIhB,MAAO,CACNsC,SAAS,EACTC,YAAa,OAOTG,GAAoB,SAACkG,GAE1B,OAAkC,KAA7BA,EAAgB,GAAGzS,OACO,KAA7ByS,EAAgB,GAAGzS,OACU,KAA7ByS,EAAgB,GAAGzS,OACU,KAA7ByS,EAAgB,GAAGzS,OACU,KAA7ByS,EAAgB,GAAGzS,OAQhB6M,GAAkB,SAACb,GAExB,GAAIA,EAAShG,OAAS,EAAG,OAAO,EAIhC,IAHA,IAAI0M,EAAqB,EACrB1F,EAAuB,GAElB9C,EAAI,EAAGA,EAAI8B,EAAShG,OAAQkE,IAAK,CACzC,GAA2B,IAAvBwI,EACH,MAAO,CACN5F,YAAY,EACZE,wBAGGhB,EAAS9B,GAAK8B,EAAS9B,EAAI,MAAS,EACb,IAAvBwI,GACHA,EAAqB,EACrB1F,EAAqBjL,KAAKiK,EAAS9B,EAAI,IACvC8C,EAAqBjL,KAAKiK,EAAS9B,MAGnCwI,IACA1F,EAAqBjL,KAAKiK,EAAS9B,MAGpCwI,EAAqB,EACrB1F,EAAuB,IAGzB,GAAI0F,GAAsB,EACzB,MAAO,CACN5F,YAAY,EACZE,wBAID,GAAoB,KAAhBhB,EAAS,GAAW,CAAC,IAAD,EAC0B2G,GAAqB/D,oBAAU5C,IAA1Ee,EADiB,EACjBA,cAAeE,EADE,EACFA,wBAErB,GAAIF,EAAe,MAAO,CACzBD,YAAY,EACZC,gBACAC,uBACAC,2BAGF,MAAO,CACNH,YAAY,EACZC,eAAe,EACfC,yBAQGR,GAAuB,SAACiG,GAE7B,IAAMzG,EAAWC,GAAiBwG,GAFe,EAGoC5F,GAAgBb,GACrG,MAAO,CACNS,gBALgD,EAGzCK,WAGPJ,mBANgD,EAG7BK,cAInBJ,uBAPgD,EAGdK,qBAKlCJ,0BARgD,EAGQK,0BAapDC,GAA0B,SAAC1I,EAAMkH,GAGtC,IAAIyB,GAAgB,EAChBC,GAAc,EACdC,GAAiB,EACjBC,GAAY,EACZC,GAAS,EACTqF,EAAc,EACdC,EAAW,EACXrF,EAA6B,CAChC2B,MAAO,GACPH,SAAU,GACVF,MAAO,IAGR,IAAK,IAAIhF,KAAY4B,EACiB,IAAjCA,EAAmB5B,KACtBqD,GAAgB,EAChBK,EAA2BsB,MAAM/M,KAAK,CACrCgN,KAAMjF,EACN9J,MAAO+I,GAAUe,MAIkB,IAAjC4B,EAAmB5B,KACtBuD,GAAiB,EACjBuF,IACApF,EAA2BwB,SAASjN,KAAK,CACxCgN,KAAMjF,EACN9J,MAAO+I,GAAUe,MAIkB,IAAjC4B,EAAmB5B,KACtByD,GAAS,EACTsF,IACArF,EAA2B2B,MAAMpN,KAAK,CACrCgN,KAAMjF,EACN9J,MAAO+I,GAAUe,MAmBpB,OAbA0D,EAA2B2B,MAAQ3B,EAA2B2B,MAAMvH,KAAI,SAAAwC,GAAE,OAAIA,KAAIyB,MAAK,SAAC/J,EAAGgK,GAAJ,OAAUA,EAAE9L,MAAQ8B,EAAE9B,SAC7GwN,EAA2BwB,SAAWxB,EAA2BwB,SAASpH,KAAI,SAAAwC,GAAE,OAAIA,KAAIyB,MAAK,SAAC/J,EAAGgK,GAAJ,OAAUA,EAAE9L,MAAQ8B,EAAE9B,SACnHwN,EAA2BsB,MAAQtB,EAA2BsB,MAAMlH,KAAI,SAAAwC,GAAE,OAAIA,KAAIyB,MAAK,SAAC/J,EAAGgK,GAAJ,OAAUA,EAAE9L,MAAQ8B,EAAE9B,UAGxG4S,GAAe,GAAOC,GAAY,GAAKD,GAAe,KAC1DxF,GAAc,GAGXyF,GAAY,IACfvF,GAAY,GAGN,CACNH,gBACAC,cACAC,iBACAC,YACAC,SACAC,+BAQImF,GAAuB,SAACG,GAC7B,IAAIJ,EAAqB,EACrBzF,EAA0B,GAE9B6F,EAAa,GAAK,EAIlB,IAFA,IAAMC,EAAqBD,EAAalL,KAAI,SAAAwC,GAAE,OAAIA,KAAIyB,MAAK,SAAC/J,EAAGgK,GAAJ,OAAUhK,EAAIgK,KAEhE5B,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC3B,GAAIwI,GAAsB,EACzB,MAAO,CACN3F,eAAe,EACfE,2BAGG8F,EAAmB7I,GAAK6I,EAAmB7I,EAAI,KAAQ,EAChC,IAAvBwI,GACHA,EAAqB,EACrBzF,EAAwBlL,KAAKgR,EAAmB7I,EAAI,IACpD+C,EAAwBlL,KAAKgR,EAAmB7I,MAEhDwI,IACAzF,EAAwBlL,KAAKgR,EAAmB7I,MAGjDwI,EAAqB,EACrBzF,EAA0B,IAG5B,OAAIyF,GAAsB,EAClB,CACN3F,eAAe,EACfE,2BAGM,CACNF,eAAe,EACfE,4BAQGhB,GAAmB,SAACzH,GACzB,OAAOwF,MAAMqI,KAAK,IAAIW,IAAIxO,EAAKoD,KAAI,SAAAqL,GAAQ,OAAIA,EAASjT,YCzrCnD+H,GAAwB,SAAChB,EAAamM,GAC3C,MAAQ,CACPzL,eAAgBV,EAAc,GAAKmM,EACnCxL,iBAAkBX,EAAc,GAAKmM,IAIjC1L,GAAe,SAACzB,EAASoN,EAAcxL,GAAY,IAChDF,EAAmC0L,EAAnC1L,cAAeC,EAAoByL,EAApBzL,gBAKvB,OAJA3B,EAAQ0B,GAAe3C,IAAM6C,EAC7B5B,EAAQ0B,GAAe/C,MAAQqB,EAAQ0B,GAAe/C,MAAQiD,EAC9D5B,EAAQ2B,GAAiB5C,IAAM6C,EAAS,EACxC5B,EAAQ2B,GAAiBhD,MAAQqB,EAAQ2B,GAAiBhD,MAASiD,EAAS,EACrE5B,GAGFqN,GAAkB,SAAC3K,EAAS4K,EAAkBC,GACnD,IAAMC,EAAmBF,EAAmBC,EAC5C,OAAIC,EAAmB9K,EACf8K,EAEA9K,GAOH+K,GAAY,SAAC5N,EAAOd,EAAKkG,EAAKC,GACnC,GAAInG,EAAMkG,EAET,OADApF,EAAM8C,cAAgBsC,EACfxE,QAAQC,IAAI,eAEpB,GAAI3B,EAAMmG,EAET,OADArF,EAAM8C,cAAgBuC,EACfzE,QAAQC,IAAI,eAGpB,GAAI3B,EAAMc,EAAM6C,QAAS,CAExB7C,EAAM6C,QAAU3D,EAChBc,EAAM+B,OAAS/B,EAAM6C,QAHG,oBAIL7C,EAAMG,SAJD,IAIxB,2BAAkC,CAAC,IAA1BqB,EAAyB,QAC5BA,EAAOpC,QAA4B,KAAjBoC,EAAO1C,QAC7B0C,EAAOrC,eAAgB,IAND,+BAWzB,IAAMqB,EAAeR,EAAMG,QAAQH,EAAME,mBACnC2N,EAAoB3O,EAAMsB,EAAatB,IAS7C,OARAsB,EAAatB,IAAMA,EAEnBsB,EAAa1B,MAAQ0B,EAAa1B,MAAQ+O,EACf,IAAvBrN,EAAa1B,QAChB0B,EAAanB,OAAQ,EACrBW,EAAMW,mBAEPH,EAAarB,eAAgB,EACtBoB,EAAuBP,IAGzB8N,GAAmB,SAAC9N,GACzB,IAAMQ,EAAeR,EAAMG,QAAQH,EAAME,mBAOzC,OANAM,EAAapB,QAAS,EACtBoB,EAAarB,eAAgB,EAC7Ba,EAAMiC,mBACNjC,EAAMU,mBAEYH,EAAuBP,IAIpCiB,GAAmB,SAACjB,GACzB,OAAQA,EAAMmF,OACb,IAAM,WAEL,OADAnF,EAAMmF,MAAQ,OD0DK,SAACnF,GACtB,IADgC,EAC5B8E,EAAiB,EADW,EAESC,GAAS/E,EAAM0C,KAAM,GAAtDsC,EAFwB,EAExBA,gBAAiBC,EAFO,EAEPA,YAFO,cAKfA,GALe,IAKhC,2BAA8B,CAAC,IAAtBjC,EAAqB,QAE7BA,EAAK8B,eAAiBA,EACtBA,GAAkC,IAClC9E,EAAMsC,eAAenG,KAAK6G,IATK,8BAiBhC,OALAhD,EAAM0C,KAAOsC,GACbhF,EAAQD,EAA6BC,IAE/BmF,MAAQ,WAEPnF,EC1EE+N,CAAchN,GAAUf,IAEhC,IAAM,WAEL,OADAA,EAAMmF,MAAQ,OD6EK,SAACnF,GAAW,IAAD,EACS+E,GAAS/E,EAAM0C,KAAM,GAAtDsC,EADwB,EACxBA,gBAAiBC,EADO,EACPA,YASzB,OARAA,EAAYH,eAAiB,EAE7B9E,EAAMsC,eAAenG,KAAK8I,GAC1BjF,EAAM0C,KAAOsC,GACbhF,EAAQD,EAA6BC,IAE/BmF,MAAQ,WAEPnF,ECtFEgO,CAAcjN,GAAUf,IAEhC,IAAM,WAEL,OADAA,EAAMmF,MAAQ,QD0FM,SAACnF,GAAW,IAAD,EACQ+E,GAAS/E,EAAM0C,KAAM,GAAtDsC,EADyB,EACzBA,gBAAiBC,EADQ,EACRA,YASzB,OARAA,EAAYH,eAAiB,EAE7B9E,EAAMsC,eAAenG,KAAK8I,GAC1BjF,EAAM0C,KAAOsC,GACbhF,EAAQD,EAA6BC,IAE/BmF,MAAQ,WAEPnF,ECnGEiO,CAAelN,GAAUf,IAEjC,IAAM,WAEL,OADAA,EAAMmF,MAAQ,WACPrE,GAAeC,GAAUf,IAEjC,QAAS,MAAMF,MAAM,sDAOjBiB,GAAY,SAACf,GAAW,IAAD,gBACTA,EAAMG,SADG,IAC5B,2BAAkC,CAAC,IAA1BqB,EAAyB,QAEjCxB,EAAMoM,IAAMpM,EAAMoM,IAAM5K,EAAOtC,IAE/BsC,EAAO0M,aAAe1M,EAAOtC,IAC7BsC,EAAOrC,eAAgB,GANI,8BAU5Ba,EAAQmO,GAAaC,GAAcpO,EAAOA,EAAMG,UAVpB,oBAYTH,EAAMG,SAZG,IAY5B,2BAAkC,CAAC,IAA1BqB,EAAyB,QACjCA,EAAOvC,2BAA6BuC,EAAOtC,IAC3CsC,EAAOtC,IAAM,GAdc,8BAoB5B,OAHAc,EAAM+B,OAAS,EACf/B,EAAM6C,QAAU,EAChB7C,EAAM8C,cAAgB,EACf9C,GAMFoO,GAAgB,SAAhBA,EAAiBpO,EAAOqO,GAE7B,IAAMC,EAAkBD,EAAa9M,QAAO,SAAAC,GAAM,OAAIA,EAAO0M,aAAe,KAC5E,GAA+B,IAA3BI,EAAgBlO,OACnB,OAAOJ,EAER,GAA+B,IAA3BsO,EAAgBlO,OAAc,CAEjC,IAAMmO,EAAiBvO,EAAMG,QAAQH,EAAMG,QAAQuB,WAAU,SAAAF,GAAM,OAAIA,EAAOhD,OAAS8P,EAAgB,GAAG9P,SAG1G,OAFA+P,EAAezP,MAAQyP,EAAezP,MAAQwP,EAAgB,GAAGJ,aACjElO,EAAMoM,KAAOkC,EAAgB,GAAGJ,aACzBlO,EAGR,IAAMwO,EAAgBF,EAAgBrI,MAAK,SAAC/J,EAAGgK,GAAJ,OAAUhK,EAAEgS,aAAehI,EAAEgI,gBAClEO,EAAkBD,EAAc,GAAGN,aAEnCQ,EAAeF,EAAc9F,QAAO,SAACC,EAAKC,GAM/C,OALKA,EAAIxJ,QACRuJ,EAAI6C,YAAYrP,KAAKyM,EAAIpK,MAE1BmK,EAAIwD,SAAWxD,EAAIwD,SAAWsC,EAC9B7F,EAAIsF,aAAetF,EAAIsF,aAAeO,EAC/B9F,IACL,CACF6C,YAAa,GACbW,SAAU,IAGX,OADAnM,EAAMuC,SAASpG,KAAKuS,GACbN,EAAcpO,EAAOwO,IAOvBL,GAAe,SAACnO,GACrB,GAAIA,EAAMuC,SAASnC,OAAS,EAC3B,IAAK,IAAIkE,EAAI,EAAGA,EAAItE,EAAMuC,SAASnC,OAAQkE,IAC1C,IADgD,IAAD,WACtCqK,GACJC,GAAe5O,EAAMuC,SAAS+B,GAAGkH,YAAaxL,EAAMuC,SAASoM,GAAGnD,eACnExL,EAAMuC,SAAS+B,GAAG6H,SAAWnM,EAAMuC,SAAS+B,GAAG6H,SAAWnM,EAAMuC,SAASoM,GAAGxC,SAC5EnM,EAAMuC,SAAWvC,EAAMuC,SAAShB,QAAO,SAACiD,EAAIqE,GAAL,OAAeA,IAAU8F,OAHzDA,EAAIrK,EAAI,EAAGqK,EAAI3O,EAAMuC,SAASnC,OAAQuO,IAAM,EAA5CA,GAQX,OAAO3O,GAGF4O,GAAiB,SAACC,EAAMC,GAE7B,OAAID,EAAKzO,SAAW0O,EAAK1O,QAGyD,IAA3EyO,EAAK7M,KAAI,SAAAwC,GAAE,OAAIsK,EAAKlK,SAASJ,MAAKjD,QAAO,SAAAwN,GAAI,OAAa,IAATA,KAAe3O,Q,UCtJzD4O,OA/Bf,YAGI,IAAD,IAFDC,OAAUpR,EAET,EAFSA,GAAIzD,EAEb,EAFaA,MAAO8U,EAEpB,EAFoBA,QACrBC,EACC,EADDA,eAEA,OACE,6CACEzS,MAAO,CACL0S,KAAK,GAAD,OAAKF,EAAL,KACJG,SAAU,WACVC,YAAa,GACbC,UAAW,GACXC,OAAQ,EACRC,MAAO,GACPC,OAAQ,GACRC,OAAQ,oBACRC,UAAW,SACXC,OAAQ,UACRC,aAAc,OACdC,gBAAiB,UACjBC,MAAO,SAELb,EAAetR,IAhBrB,aAkBE,qBAAKnB,MAAO,CAAEuT,QAAS,OAAQC,WAAY,+BAAgCC,eAAgB,SAAUC,WAAY,SAAUC,SAAU,GAAId,UAAW,IAApJ,SACGnV,QC3BHkW,GAAc,CAClBjB,SAAU,WACVI,MAAO,OACPC,OAAQ,IAGJa,GAAY,CAChBlB,SAAU,WACVI,MAAO,OACPC,OAAQ,GACRH,UAAW,GACXO,aAAc,EACdC,gBAAiB,WCSJS,OAnBf,YAAqD,IAAlCC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,cACjC,OACE,iCACEjU,MAAO,CACL2S,SAAU,WACVK,OAAQ,GACRF,OAAQ,EACRD,UAAW,GACXQ,gBAAiB,UACjBD,aAAc,EACdD,OAAQ,UACRT,KAAK,GAAD,OAAKqB,EAAOvB,QAAZ,KACJO,MAAM,GAAD,OAAKiB,EAAOxB,QAAUuB,EAAOvB,QAA7B,OAEHyB,OCiBJC,GAAuB,SAAC/N,EAASC,EAAetC,GACrD,OAAiB,IAAZqC,GAAqC,IAAlBC,EAChB,QACID,IAAYC,EAChB,OACIA,EAAgBD,GAAaC,IAAkBtC,EAAa1B,MAAQ0B,EAAatB,IACrF,UACI4D,EAAgBD,EACpB,aADD,GAQFgO,GAAwB,SAACC,EAAUC,GACxC,IAAMC,EAAmBF,EAAWC,EAC9BE,EAAOD,EAAkB,EACzBE,EAA4B,IAApBF,EACd,OACC,qBAAKG,MAAK,mCAA+BF,EAAQ,WAAeC,EAAS,GAAO,YAAhF,mBACMD,EAAQ,IAAQ,IADtB,OAC4BD,MAQxBI,GAAuB,SAAC3O,GAC7B,OAAOA,EAAiBT,KAAI,SAAC3E,EAASwL,GAAW,IACxCvK,EAAuBjB,EAAvBiB,MAAOsN,EAAgBvO,EAAhBuO,MAAOE,EAASzO,EAATyO,KACtB,OAAIxN,EAAM8B,OAAS,EAEjB,eAAC,IAAMiR,SAAP,WACC,sBAAK3V,UAAU,cAAf,UACC,sBAAMA,UAAU,eAAhB,mBACK4C,EAAM8B,OADX,eAGA,sBAAM1E,UAAU,kBAAhB,mCAGA,sBAAMA,UAAU,eAAhB,mBACKoQ,EADL,UAKAxN,EAAM0D,KAAI,SAAA7H,GACT,OACC,sBAAwBgX,MAAM,cAA9B,UACC,sBAAMzV,UAAU,iBAAhB,mBACKvB,EADL,OAGA,sBAAMuB,UAAU,kBAAhB,oBAGA,sBAAMA,UAAU,mBAAhB,mBACKkQ,EADL,aAGA,sBAAMlQ,UAAU,kBAAhB,6BAVSmN,EAAQ1O,QAfD0O,GAkCK,IAAjBvK,EAAM8B,OAEf,sBAAiB1E,UAAU,cAA3B,UACC,sBAAMA,UAAU,iBAAhB,mBACK4C,EAAM,GADX,OAGA,sBAAM5C,UAAU,kBAAhB,mBAGA,sBAAMA,UAAU,mBAAhB,mBACKkQ,EADL,aAGA,sBAAMlQ,UAAU,kBAAhB,kCAGA,sBAAMA,UAAU,eAAhB,mBACKoQ,EADL,SAbSjD,QAFL,MA2BHyI,GAAiB,SAACzO,EAAS1C,EAASD,EAAmBiF,EAAOoM,GACnE,IAAMnM,EAAMoI,GAAgB3K,EAAS1C,EAAQD,GAAmBpB,MAAOqB,EAAQD,GAAmBhB,KAC5FmG,EAAMlF,EAAQD,GAAmBpB,MAAQqB,EAAQD,GAAmBhB,IAC1E,MACY,aAAViG,GAAkC,aAAVA,GAAkC,aAAVA,GAAkC,aAAVA,EAAyBhF,EAAQD,GAAmBV,MAAU,qBAAI9D,UAAU,oBAAd,sCAAqDyE,EAAQD,GAAmB1B,SACtN,cAAC,IAAM6S,SAAP,UACC,eAAC,KAAD,CACCG,UAAWlB,GACXmB,OAAQ,CAACrM,EAAKC,GACdqM,OAAQ,CAACtM,GACTuM,KAAM,EAENC,SAAUL,EACVM,KAAM,EAPP,UASC,cAAC,KAAD,UAEE,gBAAGC,EAAH,EAAGA,aAAH,OACC,iCAAKpV,MAAO6T,IAAeuB,SAI9B,cAAC,KAAD,UAEE,gBAAGC,EAAH,EAAGA,QAAS5C,EAAZ,EAAYA,eAAZ,OACC,qBAAKzT,UAAU,iBAAf,SAEEqW,EAAQ/P,KAAI,SAAAiN,GAAM,OACjB,cAAC,GAAD,CAECA,OAAQA,EACRE,eAAgBA,GAFXF,EAAOpR,YAUnB,cAAC,KAAD,CAAQmU,OAAO,EAAf,SAEE,gBAAGC,EAAH,EAAGA,OAAQtB,EAAX,EAAWA,cAAX,OACC,qBAAKjV,UAAU,gBAAf,SAEEuW,EAAOjQ,KACN,gBAAGnE,EAAH,EAAGA,GAAI4S,EAAP,EAAOA,OAAQC,EAAf,EAAeA,OAAf,OACC,cAAC,GAAD,CAECD,OAAQA,EACRC,OAAQA,EACRC,cAAeA,GAHV9S,gBAcZ,MCxKAqU,GAAY,SAAClS,EAAOmS,GAAwB,IACzCtP,EAAY7C,EAAZ6C,QACFrC,EAAeR,EAAMG,QAAQH,EAAME,mBACnCkF,EAAMoI,GAAgB3K,EAASrC,EAAa1B,MAAO0B,EAAatB,KAChEmG,EAAM7E,EAAa1B,MAAQ0B,EAAatB,IAExCkT,EAA8BvP,GADZrC,EAAa1B,MAAQ0B,EAAatB,IAAMsB,EAAajB,iBACZ,IAC3DV,EAAqB2B,EAAa9B,MAAMsH,OAAOhG,EAAMsC,gBAAgB2D,MAAK,SAAC/J,EAAGgK,GAAJ,OAAUA,EAAE9L,MAAQ8B,EAAE9B,SAPtD,EAQFiY,GAAcxT,GAApDiH,EARwC,EAQxCA,mBAAoBC,EARoB,EAQpBA,cACtBuM,EAASC,GAAYH,GACrBI,EAAgBhS,EAAa9B,MAAMsD,KAAI,SAAAwC,GAAE,OAAIA,EAAGpK,SAChDqY,EAAWnN,KAAKD,IAAL,MAAAC,KAAI,YAAQkN,IACvBE,EAAUpN,KAAKF,IAAL,MAAAE,KAAI,YAAQkN,IAC5B,OAAQxS,EAAMmF,OAGb,IAAM,WAEL,IAAMwN,EAASC,OAAOC,QAAQ9M,GAAe+M,MAAK,SAAAC,GAAY,OAAwB,IAApBA,EAAa,MAF7D,EAI6BC,GAAyBP,EAAUC,EAASC,EADtEF,EAAWC,GAAW,GACnCO,EAJU,EAIVA,UAAWC,EAJD,EAICA,YAAaC,EAJd,EAIcA,WAC1BC,EAAYC,GAAkBf,IAAWe,GAAkBJ,GAC3DK,EAAa9S,EAAa1B,MAAQ0B,EAAatB,KAAO2D,EAAWA,EAAUrC,EAAa1B,MAAQ0B,EAAatB,IACnH,GAAIkU,EAAU,CACb,GAAIG,GAAUL,GAAc,CAC3B,IAAMM,EAAuBL,EAAW7N,KAAKE,MAAMF,KAAKG,UAAY0N,EAAW/S,OAAS,IAAM,GAE9F,GADmBiT,GAAkBf,IAAWe,GAAkBG,GACnD,CACd,IAAIC,EAAWnO,KAAKE,MAAMkO,GAAoBF,GAAwBhT,EAAa1B,OASnF,OARI2U,EAAW5Q,GACVA,EAAUwC,IACboO,EAAW5Q,GAGT4Q,EAAWpO,IACd7E,EAAalB,UAAW,GACzB6S,EAAmBnS,EAAME,kBAAP,UAA6B0Q,GAAqB/N,EAAS4Q,EAAUjT,GAArE,YAAsFiT,IACjG7F,GAAU5N,EAAOyT,EAAUrO,EAAKC,GAIvC,OADA8M,EAAmBnS,EAAME,kBAAP,UAA6B0Q,GAAqB/N,EAASyQ,EAAW9S,GAAtE,YAAwF8S,EAAY9S,EAAatB,IAAQoU,EAAa,KACjJ1F,GAAU5N,EAAOsT,EAAWlO,EAAKC,GAIzC,OADA8M,EAAmBnS,EAAME,kBAAP,UAA6B0Q,GAAqB/N,EAASyQ,EAAW9S,GAAtE,YAAwF8S,EAAY9S,EAAatB,IAAQoU,EAAa,KACjJ1F,GAAU5N,EAAOsT,EAAWlO,EAAKC,GAIzC,OADA8M,EAAmBnS,EAAME,kBAAP,QACX4N,GAAiB9N,GAI1B,IAAM,WACN,IAAM,WACN,IAAM,WAAN,MAWKsH,GAAwBzI,EAAoBiH,GAP/C6B,EAJF,EAIEA,OACAD,EALF,EAKEA,UACAD,EANF,EAMEA,eACAF,EAPF,EAOEA,cACAC,EARF,EAQEA,YACAI,EATF,EASEA,2BAGKxB,EAAWC,GAAiBxH,GAZnC,EAoBKoI,GAAgBb,GALnBc,EAfF,EAeEA,WAfF,KAgBEC,cAhBF,EAiBEC,qBAjBF,EAkBEC,wBAQGf,GAAaP,IAHhBQ,EAvBF,EAuBEA,QACAC,EAxBF,EAwBEA,YAIKC,EAAcF,GACnB1H,EACE0C,QAAO,SAAAyB,GAAI,OAAIA,EAAKiB,OAASuC,KA9BjC,EAuCMD,GAAYK,GAAqBH,GALrCI,EAlCF,EAkCEA,gBAMKH,GAxCP,EAmCEI,mBAnCF,EAoCEC,uBApCF,EAqCEC,0BAGqBT,GACrBI,GAAkBF,IAabkN,EAAgB,CAAC,CACtBnV,KAAM,cACNwJ,MAAOtB,GACL,CACFlI,KAAM,iBACNwJ,MAAOnB,GACL,CACFrI,KAAM,iBACNwJ,MAAOT,GACL,CACF/I,KAAM,aACNwJ,MAAOR,GACL,CACFhJ,KAAM,QACNwJ,MAAOzB,GACL,CACF/H,KAAM,WACNwJ,MAAOd,GACL,CACF1I,KAAM,kBACNwJ,MAAOP,GACL,CACFjJ,KAAM,WACNwJ,MAAON,GACL,CACFlJ,KAAM,OACNwJ,MAAOL,GACL,CACFnJ,KAAM,UACNwJ,OAxCEtB,IACAG,IACAU,IACAC,IACAjB,IACAW,IACAO,IACAC,IACAC,IAoCGiM,EAAWD,EAAcA,EAAcjS,WAAU,SAAA8C,GAAE,OAAiB,IAAbA,EAAGwD,UAAiBxJ,KAvFlF,EAwFgDqV,GAA6BhV,EAAoB+U,EAAUhM,GAAlGqL,EAxFT,EAwFSA,UAAWC,EAxFpB,EAwFoBA,YAAaC,EAxFjC,EAwFiCA,WAC1BC,EAAYC,GAAkBf,IAAWe,GAAkBJ,GAC3DK,EAAa9S,EAAa1B,MAAQ0B,EAAatB,KAAO2D,EAAWA,EAAUrC,EAAa1B,MAAQ0B,EAAatB,IACnH,GAAIkU,EAAU,CACb,GAAIG,GAAUL,GAAc,CAC3B,IAAMM,EAAuBL,EAAW7N,KAAKE,MAAMF,KAAKG,UAAY0N,EAAW/S,OAAS,IAAM,GAE9F,GADmBiT,GAAkBf,IAAWe,GAAkBG,GACnD,CACd,IAAIC,EAAWnO,KAAKE,MAAMkO,GAAoBF,GAAwBhT,EAAa1B,OAMnF,OALI2U,EAAW5Q,IACd4Q,EAAW5Q,GAEZrC,EAAalB,UAAW,EACxB6S,EAAmBnS,EAAME,kBAAP,UAA6B0Q,GAAqB/N,EAAS4Q,EAAUjT,GAArE,YAAsFiT,IACjG7F,GAAU5N,EAAOyT,EAAUrO,EAAKC,GAGvC,OADA8M,EAAmBnS,EAAME,kBAAP,UAA6B0Q,GAAqB/N,EAASyQ,EAAW9S,GAAtE,YAAwF8S,EAAY9S,EAAatB,IAAQoU,EAAa,KACjJ1F,GAAU5N,EAAOsT,EAAWlO,EAAKC,GAIzC,OADA8M,EAAmBnS,EAAME,kBAAP,UAA6B0Q,GAAqB/N,EAASyQ,EAAW9S,GAAtE,YAAwF8S,EAAY9S,EAAatB,IAAQoU,EAAa,KACjJ1F,GAAU5N,EAAOsT,EAAWlO,EAAKC,GAIzC,OADA8M,EAAmBnS,EAAME,kBAAP,QACX4N,GAAiB9N,GAE1B,QAAS,MAAMF,MAAM,8CAQjB+T,GAA+B,SAACjV,EAAMgV,EAAUhM,GACrD,MAAiB,gBAAbgM,EACI,CACNX,UAAW,SACXC,YAAa,EACbC,WAAY,CAAC,WAES,mBAAbS,GAMa,mBAAbA,EALH,CACNX,UAAW,SACXC,YAAa,EACbC,WAAY,CAAC,SAAU,QAAS,WAQV,eAAbS,EACH,CACNX,UAAW,SACXC,YAAa,EACbC,WAAY,CAAC,SAAU,SAAU,QAAS,WAEpB,UAAbS,EACH,CACNX,UAAW,SACXa,YAAa,EACbX,WAAY,CAAC,SAAU,QAAS,WAEV,aAAbS,GAMa,oBAAbA,EALH,CACNX,UAAW,SACXa,YAAa,EACbX,WAAY,CAAC,UAAW,UAAW,mBAQb,aAAbS,EACH,CACNX,UAAW,SACXa,YAAa,GACbX,WAAY,CAAC,UAAW,UAAW,mBAEb,SAAbS,EACH,CACNX,UAAW,SACXa,YAAa,GACbX,WAAY,CAAC,UAAW,UAAW,mBAEb,YAAbS,EACH,CACNX,UAAW,UACXa,YAAa,GACbX,WAAY,CAAC,UAAW,UAAW,wBAJ9B,GAaFH,GAA2B,SAACP,EAAUC,EAASC,EAAQoB,GAC5D,GAAItB,IAAaC,EAyBV,OAAID,EAAW,GAAKC,EAAU,EAEhCC,EACI,CACNM,UAAW,SACXC,YAAa,EACbC,WAAY,CAAC,gBAAiB,UAAW,UAAW,WAG9C,CACNF,UAAW,SACXC,YAAa,IACbC,WAAY,CAAC,gBAAiB,UAAW,UAAW,WAG5CV,EAAW,GAAKC,EAAU,EAEhCC,EACI,CACNM,UAAW,SACXC,YAAa,IACbC,WAAY,CAAC,gBAAiB,UAAW,UAAW,WAG9C,CACNF,UAAW,SACXC,YAAa,IACbC,WAAY,CAAC,gBAAiB,UAAW,UAAW,WAG5CV,EAAW,GAAKC,EAAU,EAChCC,EACI,CACNM,UAAW,QACXC,YAAa,IACbC,WAAY,CAAC,gBAAiB,YAGxB,CACNF,UAAW,QACXC,YAAa,IACbC,WAAY,CAAC,gBAAiB,YAGtBV,EAAW,GAAKC,EAAU,EAChCC,EACI,CACNM,UAAW,SACXC,YAAa,GACbC,WAAY,CAAC,gBAAiB,YAErBY,EACH,CACNd,UAAW,QACXC,YAAa,GAGP,CACND,UAAW,SACXC,YAAa,GAIXP,EACI,CACNM,UAAW,SACXC,YAAa,GACbC,WAAY,CAAC,kBAEJY,EACH,CACNd,UAAW,SACXC,YAAa,GAGP,CACND,UAAW,gBACXC,YAAa,GArGf,OAAQT,GACP,KAAMA,EAAW,EAChB,MAAO,CACNQ,UAAW,SACXC,YAAa,GACbC,WAAY,CAAC,UAAW,UAAW,SAAU,WAG/C,KAAMV,EAAW,EAChB,MAAO,CACNQ,UAAW,QACXC,YAAa,IACbC,WAAY,CAAC,gBAAiB,UAAW,YAG3C,KAAMV,EAAW,EACjB,QACC,MAAO,CACNQ,UAAW,QACXC,YAAa,GACbC,WAAY,CAAC,gBAAiB,UAAW,cA0FxCZ,GAAc,SAACyB,GACpB,QAAQ,GACP,KAAMA,EAAa,GAClB,MAAO,SACR,KAAMA,EAAa,GAClB,MAAO,QACR,KAAMA,EAAa,GAClB,MAAO,QACR,KAAMA,EAAa,GAClB,MAAO,SACR,KAAMA,EAAa,GAClB,MAAO,SACR,KAAMA,EAAa,GAClB,MAAO,UACR,KAAMA,EAAa,EAClB,MAAO,UACR,KAAMA,GAAc,EACnB,MAAO,gBACR,KAAMA,EAAa,EACnB,QACC,MAAO,UAQJN,GAAsB,SAACpB,GAC5B,MAAe,UAAXA,EACI,GAAAhN,KAAKG,SAAuB,EACd,kBAAX6M,EACHhN,KAAKG,UAAY,IAAO,KAAQ,IAClB,YAAX6M,EACH,IAAAhN,KAAKG,SAA2B,IAClB,YAAX6M,EACHhN,KAAKG,UAAY,IAAO,IAAQ,GAClB,WAAX6M,EACH,GAAAhN,KAAKG,SAA2B,IAClB,WAAX6M,EACHhN,KAAKG,UAAY,IAAO,KAAQ,IAClB,UAAX6M,EACHhN,KAAKG,UAAY,GAAO,KAAQ,IAClB,UAAX6M,EACH,IAAAhN,KAAKG,SAA2B,GAClB,WAAX6M,EACH,IAAAhN,KAAKG,SAAwB,SAD9B,GAQF4N,GAAoB,CACzBY,MAAO,EACPC,cAAe,EACfC,QAAS,EACTC,QAAS,EACTC,OAAQ,EACRC,OAAQ,EACRC,MAAO,EACPC,MAAO,EACPC,OAAQ,GAGHlB,GAAY,SAACmB,GAClB,OAAOpP,KAAKG,SAAWiP,GAGlBrC,GAAgB,SAACzT,GAMtB,OALkBA,EAAK8J,QAAO,SAACC,EAAKC,GAGnC,OAFAD,EAAI7C,mBAAmB8C,EAAI1E,WAAayE,EAAI7C,mBAAmB8C,EAAI1E,WAAa,GAAK,EACrFyE,EAAI5C,cAAc6C,EAAI3E,OAAS0E,EAAI5C,cAAc6C,EAAI3E,OAAS,GAAK,EAC5D0E,IACL,CAAE7C,mBAAoB,GAAIC,cAAe,MChb9B4O,GAnBF,SAACpZ,GAAW,IAAD,EAQlBA,EANFqZ,SACE3Q,EAHkB,EAGlBA,KACAC,EAJkB,EAIlBA,SAOA2Q,GAXkB,EAKlB/P,eAGAvJ,EADFuZ,qBAIa7Q,EAAK1H,UAAU,EAAG,GAAGwY,eAGpC,OACE,qBAAKrZ,UAAU,aAAf,SAA4B,qBAAKC,IAAG,UAAKjD,GAAL,6BAAgDwL,GAAhD,OAA2D2Q,EAA3D,aCJzBG,GAVQ,SAAAzZ,GACtB,OACC,qBAAKG,UAAU,cAAf,SACC,qBAAKA,UAAU,cAAf,SACC,qBAAKC,IAAK,mBAAoBsZ,IAAI,yBCevBC,GApBI,SAAC3Z,GAAW,IAAD,EAQxBA,EANFqZ,SACE3Q,EAHwB,EAGxBA,KACAC,EAJwB,EAIxBA,SACAY,EALwB,EAKxBA,eAEFgQ,EACEvZ,EADFuZ,qBAIF,OACE,qBAEEpZ,UAAS,sCAAkCoZ,EAAuB,UAAY,IAC9EpY,MAAO,CAAEoI,eAAe,GAAD,OAAMgQ,EAAwB,EAAIhQ,EAAlC,QAHzB,UACUb,EADV,YACkBC,K,UCOPiR,OAnBf,YAAoE,IAA5CtM,EAA2C,EAA3CA,MAAOuM,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,cAC9C,OACI,cAACC,GAAA,EAAD,CACIC,GAAIJ,EACJK,QAAS,CACLC,OAAQ,EACRC,MAAO,EACPC,KAAM,MAEVC,WAAW,qBACXC,UAAW,kBAAMR,EAAczM,IARnC,SAUI,qBAAKnN,UAAU,eAAf,mBACQ2Z,QCkHLU,GAtHA,SAACxa,GAAW,IAyENya,EAvEjBC,EAgBE1a,EAhBF0a,WACAC,EAeE3a,EAfF2a,2BACAZ,EAcE/Z,EAdF+Z,cACAa,EAaE5a,EAbF4a,cACAf,EAYE7Z,EAZF6Z,SACAjQ,EAWE5J,EAXF4J,MACAN,EAUEtJ,EAVFsJ,WARsB,EAkBpBtJ,EATFiG,OACEhC,EAVoB,EAUpBA,MACAJ,EAXoB,EAWpBA,OACAV,EAZoB,EAYpBA,MACAD,EAboB,EAapBA,UACAD,EAdoB,EAcpBA,KACAM,EAfoB,EAepBA,MACAI,EAhBoB,EAgBpBA,IAkEJ,OACE,sBAAKxD,UAAS,0BAAqBua,GAAnC,UACE,cAAC,GAAD,CACEpN,MAAOoN,EACPb,UAbaY,EAaOC,IAZpBC,EAA2BF,GAAgBI,WAa3Cf,QAASa,EAA2BD,GAAYZ,QAChDC,cAAeA,IAEjB,qBAAK5Z,UAAU,mBAAf,SAnEoB,WACtB,IAAIoZ,EAOJ,OALI1V,GAAUyF,KACZiQ,GAAuB,GAIrBtV,EACKd,EAAMsD,KAAI,SAACgB,EAAM6F,GACtB,GAAc,aAAV1D,EACF,OACE,cAAC,GAAD,CAAwByP,SAAU5R,EAAM8R,qBAAsBA,GAA7CjM,GAInB,IAAM+L,EAAQ,2BAAQ5R,GAAR,IAAc8B,eAAgB,IAC5C,OACE,cAAC,GAAD,CAAkB8P,SAAUA,EAAUE,qBAAsBA,GAAjDjM,MAOVnK,EAAMsD,KAAI,SAACgB,EAAM6F,GACtB,OACE,cAAC,GAAD,CAAkB+L,SAAU5R,EAAM8R,qBAAsBA,GAA7CjM,MAyCZwN,KAEH,qBAAK3a,UAAU,aAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,qBACEA,UAAS,2BAAuB0Z,EAAW,gBAAkB,IAC7DzZ,IAAK8C,EACLwW,IAAI,kBAEN,oBAAIvZ,UAAU,mBAAmBgB,MAAO,CAAE,SAAa8B,EAAK4B,OAAS,GAAM,GAAK,IAAhF,mBACM5B,KAEN,sBAAK9C,UAAU,wBAAf,UACE,qBAAKA,UAAU,0BAA0BC,IAhH3B,qBAgHmDsZ,IAAI,iBACrE,oBAAIvZ,UAAU,yBAAd,mBAA2CoD,QAE7C,sBAAKpD,UAAU,sBAAf,UACE,qBAAKA,UAAU,wBAAwBC,IAAI,mBAAmBsZ,IAAI,eAClE,oBAAIvZ,UAAU,uBAAd,mBAAyCwD,QAhD7CiX,EAEA,qBAAKza,UAAU,mBAAf,SACE,qBAAKC,IAzEY,mBAyEasZ,IAAI,kBAG1B,cCxEH,SAASqB,GAAU/a,GAAQ,IAC9B1B,EAAgBL,IAAhBK,YACFmC,EAAUC,cAEVsa,EAASC,cAAcD,OACvBla,EAAa,IAAIoa,gBAAgBF,GAAQzM,IAAI,cALd,4CAarC,WAAoCvM,GAApC,eAAArB,EAAA,sDACQwa,EAAiB,IAAI9D,OACzB+D,EAAWxd,WAAWC,MAAMwd,MAAM/c,EAAYgd,KAAKC,KAAK,SAASC,MAAK,SAAUjM,GAC5E,IAAIkM,EAAc,EAClBlM,EAAS3E,SAAQ,SAAU8Q,GACvB,IAAIC,EAAMD,EAAcC,IACpBC,EAAYF,EAAcG,MAC9BV,EAAeQ,GAAOC,EACtBH,GAAe,KAEA,GAAfA,IACAL,EAAWxd,WAAWC,MAAMwd,MAAM/c,EAAYgd,KAAKQ,IAAI,CACnD,mBAAsB,EAAG,kBAAqB,EAC9C,uBAA0B,EAAG,sBAAyB,EACtD,iBAAoB,EAAG,gBAAmB,EAC1C,mBAAsB,EAAG,kBAAqB,IAElDX,EAAiB,CACb,mBAAsB,EAAG,kBAAqB,EAC9C,uBAA0B,EAAG,sBAAyB,EACtD,iBAAoB,EAAG,gBAAmB,EAC1C,mBAAsB,EAAG,kBAAqB,IAKpC,YAAdra,GACAqa,EAAc,mBAAyBA,EAAc,mBAAyB,EAC1Enb,EAAMgR,OAAO/N,MAAQ5C,EAAUU,WAC/Boa,EAAc,kBAAwBA,EAAc,kBAAwB,IAE7D,gBAAdra,GACLqa,EAAc,uBAA6BA,EAAc,uBAA6B,EAClFnb,EAAMgR,OAAO/N,MAAQ5C,EAAUU,WAC/Boa,EAAc,sBAA4BA,EAAc,sBAA4B,IAErE,UAAdra,GACLqa,EAAc,iBAAuBA,EAAc,iBAAuB,EACtEnb,EAAMgR,OAAO/N,MAAQ5C,EAAUU,WAC/Boa,EAAc,gBAAsBA,EAAc,gBAAsB,IAEzD,YAAdra,IACLqa,EAAc,mBAAyBA,EAAc,mBAAyB,EAC1Enb,EAAMgR,OAAO/N,MAAQ5C,EAAUU,WAC/Boa,EAAc,kBAAwBA,EAAc,kBAAwB,IAGpFC,EAAWxd,WAAWC,MAAMwd,MAAM/c,EAAYgd,KAAKQ,IAAI,CACnD,mBAAsBX,EAAc,mBAAwB,kBAAqBA,EAAc,kBAC/F,uBAA0BA,EAAc,uBAA4B,sBAAyBA,EAAc,sBAC3G,iBAAoBA,EAAc,iBAAsB,gBAAmBA,EAAc,gBACzF,mBAAsBA,EAAc,mBAAwB,kBAAqBA,EAAc,uBAGpG,SAAU5a,GACT8E,QAAQC,IAAI,8CAvDpB,4CAbqC,kEA2ErC,WAAuCtD,GAAvC,SAAArB,EAAA,sDACIqB,EAAEC,iBACFoD,QAAQC,IAAI,6BACZ,IACI7E,EAAQG,KAAK,cACf,SACEyE,QAAQC,IAAI,mDANpB,4CA3EqC,sBAqFrC,OA7EA5G,qBAAU,YAR2B,oCASjCqd,MA6EA,cAAC7a,EAAA,EAAD,CACIf,UAAU,+DACVgB,MAAO,CAAEC,UAAW,SAFxB,SAII,qBAAKjB,UAAU,QAAQgB,MAAO,CAAEE,SAAU,SAA1C,SACI,cAAC,IAAD,UACI,eAAC,IAAKC,KAAN,WACI,qBAAKnB,UAAU,oBAAf,SACI,qBAAKA,UAAU,YAAYC,IAAI,6BAEnC,qBAAKD,UAAU,cAAf,SACI,+BACKH,EAAMgR,OAAO/N,KADlB,cAIJ,cAACxB,EAAA,EAAD,CAAQtB,UAAU,aAAauB,QArGd,4CAqGjB,0C,IC2cTsa,G,4MA9gBbvX,MAAQ,CACNjG,SAAS,EACT8R,YAAa,KACbU,OAAQ,KACRpM,QAAS,KACTO,iBAAkB,KAClBuB,iBAAkB,KAClBtB,gBAAiB,KACjBT,kBAAmB,KACnBiB,YAAa,KACbd,WAAY,KACZqC,KAAM,KACNJ,eAAgB,GAChB8J,IAAK,KACLvJ,QAAS,KACTC,cAAe,KACfP,SAAU,GACVR,OAAQ,GACRoD,MAAO,UACP3C,gBAAiB,GACjBC,iBAAkB,GAClB+U,mBAAoB,GACpBtB,2BAA4B,CAC1BuB,EAAG,CAAEC,aAAa,EAAOrC,QAAS,MAClCsC,EAAG,CAAED,aAAa,EAAOrC,QAAS,MAClCjS,EAAG,CAAEsU,aAAa,EAAOrC,QAAS,MAClChS,EAAG,CAAEqU,aAAa,EAAOrC,QAAS,MAClC/R,EAAG,CAAEoU,aAAa,EAAOrC,QAAS,MAClC9R,EAAG,CAAEmU,aAAa,EAAOrC,QAAS,Q,EAKtCuC,mBAAqB,E,EAiFrBC,YAAc,WAEZ,IAAMC,EAAW1V,GAAgB4G,oBAAU,EAAKhJ,QAEhD,EAAK+X,SAASD,GAAU,WACjB,EAAK9X,MAAMG,QAAQ,EAAKH,MAAME,mBAAmBV,OAAgC,aAArB,EAAKQ,MAAMmF,OAC1E6S,YAAW,WACT,EAAK9F,cACJ,U,EASTA,UAAY,WAAO,IAAD,EACoC,EAAKlS,MAAlBiY,GADvB,EACR/B,2BADQ,+CAGV4B,EAAWI,GAAclP,oBAAUiP,GAAW,EAAKE,4BAGzD,EAAKJ,SAAL,2BACKD,GADL,IAEEhV,cAAegV,EAAS/V,UACvB,WACI,EAAK/B,MAAMG,QAAQ,EAAKH,MAAME,mBAAmBV,OAAgC,aAArB,EAAKQ,MAAMmF,OAC1E6S,YAAW,WAET,EAAK9F,cACJ,U,EAQTkG,gBAAkB,SAAChB,EAAKhS,EAAKC,GACf,KAAR+R,IAAYA,EAAMhS,GAClBgS,EAAM/R,IAAK+R,EAAM/R,GAErB,EAAK0S,SAAS,CACZjV,cAAeuV,SAASjB,EAAK,O,EAOjCkB,gBAAkB,SAACpZ,EAAKkG,EAAKC,GAAS,IAAD,EACiB,EAAKrF,MAAlBiY,GADJ,EAC3B/B,2BAD2B,+CAG3BhW,EAAsB+X,EAAtB/X,kBAER,EAAKiY,2BAA2BjY,EAAhC,UAAsD0Q,GAAqB,EAAK5Q,MAAM6C,QAAS,EAAK7C,MAAM8C,cAAe,EAAK9C,MAAMG,QAAQ,EAAKH,MAAME,oBAAvJ,YAA+KhB,EAAM,EAAKc,MAAMG,QAAQ,EAAKH,MAAME,mBAAmBhB,IAAQA,EAAO,KACrP,IAAM4Y,EAAWlK,GAAU5E,oBAAUiP,GAAWI,SAASnZ,EAAK,IAAKmZ,SAASjT,EAAK,IAAKiT,SAAShT,EAAK,KAGpG,EAAK0S,SAASD,GAAU,WACjB,EAAK9X,MAAMG,QAAQ,EAAKH,MAAME,mBAAmBV,OAAgC,aAArB,EAAKQ,MAAMmF,OAC1E6S,YAAW,WAET,EAAK9F,cACJ,U,EAQTqG,wBAA0B,SAACnB,GACzB,EAAKW,SAAS,CACZjV,cAAesU,EAAI,M,EAOvBtJ,iBAAmB,WAAO,IAAD,EAC6B,EAAK9N,MAAlBiY,GADhB,EACf/B,2BADe,+CAGjB4B,EAAWhK,GAAiB9E,oBAAUiP,IAG5C,EAAKF,SAASD,GAAU,WACjB,EAAK9X,MAAMG,QAAQ,EAAKH,MAAME,mBAAmBV,OAAgC,aAArB,EAAKQ,MAAMmF,OAC1E6S,YAAW,WAET,EAAK9F,cACJ,U,EAQTsG,gBAAkB,WAEhB,EAAKT,SAAS,CAAElT,YAAY,IAE5B,IACI0H,EADEuL,EAAWzV,EAAe2G,oBAAU,EAAKhJ,QAG/C,GAAIiD,EAAS6U,EAAS3X,SASpB,OARgB2X,EAAS3X,QACjBgG,SAAQ,SAAAsS,GACVA,EAAQ3Z,MAAQ,IAClByN,EAASkM,MAEb,EAAKV,SAAS,CAAExL,OAAQA,SACxB,EAAKwL,SAAS,CAAElM,aAAa,IAK/B,EAAKkM,SAASD,GAAU,WACjB,EAAK9X,MAAMG,QAAQ,EAAKH,MAAME,mBAAmBV,OAAgC,aAArB,EAAKQ,MAAMmF,OAC1E6S,YAAW,kBAAM,EAAK9F,cAAa,U,EAQzCiG,2BAA6B,SAACtP,EAAOwM,GACnC,IAAMqD,EAA0B9F,OAAO+F,OACrC,GACA,EAAK3Y,MAAMkW,2BAFmBtD,OAAA,IAAAA,CAAA,GAG3B/J,EAAQ,CAAE6O,aAAa,EAAMrC,aAElC,EAAK0C,SAAS,CAAE7B,2BAA4BwC,K,EAM9CE,wBAA0B,SAAC/P,GACzB,IAAMgQ,EAAiB,EAAK7Y,MAAMkW,2BAA2BrN,GAAOwM,QAC9DqD,EAA0B9F,OAAO+F,OACrC,GACA,EAAK3Y,MAAMkW,2BAFmBtD,OAAA,IAAAA,CAAA,GAG3B/J,EAAQ,CAAE6O,aAAa,EAAOrC,QAASwD,KAE5C,EAAKd,SAAS,CAAE7B,2BAA4BwC,K,EAM9CI,YAAc,WAAM,MASd,EAAK9Y,MANPG,EAHgB,EAGhBA,QACAD,EAJgB,EAIhBA,kBACAiB,EALgB,EAKhBA,YACA0D,EANgB,EAMhBA,WACAM,EAPgB,EAOhBA,MACA+Q,EARgB,EAQhBA,2BA0BF,OAtBwB/V,EAAQuI,QAAO,SAACqQ,EAAQvX,EAAQqH,GAEtD,IAAMuM,EAAYvM,IAAU3I,EACtBiW,EAAiBtN,IAAU1H,EAiBjC,OAbA4X,EAAOC,QACL,cAAC,GAAD,CAEE/C,WAAYpN,EACZuM,SAAUA,EACVe,cAAeA,EACf3U,OAAQA,EACRqD,WAAYA,EACZM,MAAOA,EACP+Q,2BAA4BA,EAC5BZ,cAAe,EAAKsD,yBARf/P,IAWFkQ,IACN,IACoB/W,KAAI,SAAA5G,GAAS,OAAIA,M,EAM1C6d,0BAA4B,WAAO,IAAD,EACsC,EAAKjZ,MAAnE6C,EADwB,EACxBA,QAAS1C,EADe,EACfA,QAASD,EADM,EACNA,kBAAmBiF,EADb,EACaA,MAAOrC,EADpB,EACoBA,cAE9CsC,EAAMoI,GAAgB3K,EAAS1C,EAAQD,GAAmBpB,MAAOqB,EAAQD,GAAmBhB,KAE5FmG,EAAMlF,EAAQD,GAAmBpB,MAAQqB,EAAQD,GAAmBhB,IAG1E,OAASiB,EAAQD,GAAmBV,OAAqB,aAAV2F,EAAyB,KACtE,eAAC,IAAMkM,SAAP,WACE,wBAAQ3V,UAAU,cAAcuB,QAAS,kBAAM,EAAK6Q,oBAApD,kBAGA,wBAAQpS,UAAU,aAAauB,QAAS,kBAAM,EAAKqb,gBAAgBxV,EAAesC,EAAKC,IAAvF,SACGuL,GAAqB/N,EAASC,EAAe3C,EAAQD,U,EAS9DgZ,0BAA4B,SAACC,GAC3B,OAAO,EAAKnZ,MAAMsC,eAAeN,KAAI,SAACgB,EAAM6F,GAC1C,IAAI+L,EAAQ,eAAQ5R,GAKpB,OAJImW,IACFvE,EAAS9P,eAAiB,GAI1B,cAAC,GAAD,CAAkB8P,SAAUA,GAAjB/L,O,EAUjBuQ,qBAAuB,WACrB,OACE,sBAAK1d,UAAU,uBAAf,UACE,oBAAIA,UAAU,qBAAd,4BAGA,qBAAKA,UAAU,wBAAf,SACG0V,GAAqB,EAAKpR,MAAMyC,oBAEnC,oBAAI/G,UAAU,oCAAd,6BAGA,qBAAKA,UAAU,+BAAf,SACG,EAAKwd,2BAA0B,KAElC,wBAAQxd,UAAU,4BAA4BuB,QAAS,kBAAM,EAAKub,mBAAlE,yBACE,EAAKa,sB,EAUbA,gBAAkB,WAIhB,OAF4B,EAAKrZ,MAAzBwC,gBAEeR,KAAI,SAAAsX,GAEzB,OADYlV,MAAMmV,QAAQD,GACb,EAAKE,gBAAgBF,GAAgB,EAAKG,iBAAiBH,O,EAQ5EE,gBAAkB,SAACF,GACjB,OAAOA,EAAatX,KAAI,SAAAR,GACtB,OAAO,EAAKiY,iBAAiBjY,O,EAIjCkY,UAAY,SAAChb,GACX,OAAOA,EAAMsD,KAAI,SAACgB,EAAM6F,GACtB,IAAM+L,EAAQ,2BAAQ5R,GAAR,IAAc8B,eAAgB,IAC5C,OAAO,cAAC,GAAD,CAAkB8P,SAAUA,GAAjB/L,O,EAQtB4Q,iBAAmB,SAACjY,GAAW,IAErBhD,EAA6BgD,EAA7BhD,KAAM4J,EAAuB5G,EAAvB4G,SAAU2B,EAAavI,EAAbuI,SAElB4P,EAAkB,EAAK3Z,MAAMG,QAAQ2S,MAAK,SAAA8G,GAAW,OAAIA,EAAYpb,OAASA,KAEpF,OACE,wBAAO2S,MAAM,+BAAb,UACE,gCACE,+BACE,wCACA,+CACA,2CACA,8CACA,+CAGJ,gCACE,+BACE,6BACG3S,IACH,6BACE,qBAAK2S,MAAM,+BAAX,SACE,qBAAKA,MAAM,wBAAX,SACG,EAAKuI,UAAUC,EAAgBjb,aAItC,6BAAI,qBAAKhD,UAAU,+BAAf,SACF,qBAAKA,UAAU,iCAAiCgB,MAAO,CAAEmd,WAAY,UAArE,SAEIzR,EAASpG,KAAI,SAACgB,EAAM6F,GAElB,IAAM+L,EAAQ,2BAAQ5R,GAAR,IAAc8B,eAAgB,IAC5C,OAAO,cAAC,GAAD,CAAkB8P,SAAUA,GAAjB/L,YAM1B,6BAAKkB,IACL,6BAAK8G,GAAsB8I,EAAgB3a,cAAe2a,EAAgB5a,4B,EAgBpF+a,WAAa,WAAO,IAAD,EACsC,EAAK9Z,MAApD6C,EADS,EACTA,QAAS1C,EADA,EACAA,QAASD,EADT,EACSA,kBAAmBiF,EAD5B,EAC4BA,MAC7C,OACE,sBAAKzJ,UAAU,iBAAf,UACE,qBAAKA,UAAU,aAAagB,MAAO,CAAEE,SAAU,WAC/C,sBAAKlB,UAAU,kBAAf,UACE,sBAAKA,UAAU,aAAf,UACE,qBAAKC,IAAK,sBACV,8DACA,eAACoe,EAAA,EAAD,CAAgBlc,GAAG,wBAAwBmc,MAAM,GAAjD,UACE,eAACC,EAAA,EAASC,KAAV,CAAeC,KAAK,IAApB,cAAyB,cAAC,IAAD,CAAM3e,GAAG,aAAT,oCACzB,eAACye,EAAA,EAASC,KAAV,CAAeC,KAAK,IAApB,cAAyB,cAAC,IAAD,CAAM3e,GAAG,SAAT,6BAG7B,qBAAKE,UAAU,oBAAoBC,IAAK,qBAAsBsZ,IAAI,gBACjE,EAAK6D,cACN,qBAAKpd,UAAU,qBAAf,SACG,EAAKwd,8BAER,sBAAKxd,UAAU,UAAf,UACE,qBAAKC,IAAK,mBAAoBsZ,IAAI,cAClC,6CAAS,EAAKjV,MAAMoM,KAApB,aAGoB,aAArB,EAAKpM,MAAMmF,OAAyB,EAAKiU,uBAC5C,sBAAK1d,UAAU,WAAf,UACE,qBAAKA,UAAU,eAAf,SACG,EAAKud,8BAER,qBAAKvd,UAAU,SAAf,UACK,EAAKsE,MAAMjG,SAAYuX,GAAezO,EAAS1C,EAASD,EAAmBiF,EAAO,EAAKiT,0B,8FAxcpG,2CAAAlc,EAAA,sEACwBiC,EAAUvC,EAAUU,UAD5C,OACQ6D,EADR,OAGQgB,EAAcmE,KAAKE,MAAMF,KAAKG,SAAWH,KAAKE,MAAMrF,EAAQC,SAG5D8B,EAAgBC,GAAsBhB,EAAahB,EAAQC,QAC3Dga,EAAkBxY,GAAazB,EAAS+B,EAAemY,KAAKra,MAAM+B,SAElEuY,EAAqB,IAAIC,gBAGZC,iBAAiB,QAAQ,SAAAjd,GAC1CqD,QAAQC,IAAR,UAAetD,EAAES,OACjB4C,QAAQC,IAAItD,GACZqD,QAAQC,IAAI,iBACZ,EAAKkX,SAAS,CACZhe,SAAS,OAKbugB,EAAmBE,iBAAiB,aAAa,SAAAjd,GAC/CqD,QAAQC,IAAR,UAAetD,EAAES,OACjB4C,QAAQC,IAAItD,MAGd+c,EAAmBE,iBAAiB,WAAW,SAAAjd,GAC7CqD,QAAQC,IAAR,UAAetD,EAAES,OACjB4C,QAAQC,IAAItD,MAGd+c,EAAmBE,iBAAiB,YAAY,SAAAjd,GAC9CqD,QAAQC,IAAR,UAAetD,EAAES,OACjB4C,QAAQC,IAAItD,MAGd+c,EAAmBE,iBAAiB,SAAS,SAAAjd,GAC3CqD,QAAQC,IAAR,UAAetD,EAAES,OACjB4C,QAAQC,IAAItD,MAGd+c,EAAmBE,iBAAiB,SAAS,SAAAjd,GAC3CqD,QAAQC,IAAR,UAAetD,EAAES,OACjB4C,QAAQC,IAAItD,MAGd+c,EAAmBG,KAAK,MAAO,sBAC/BH,EAAmBI,OAGnBL,KAAKtC,UAAS,SAAA4C,GAAS,MAAK,CAC1Bxa,QAASia,EACT1Z,iBAAkBP,EAAQC,OAC1B6B,iBAAkB,EAClBtB,gBAAiB,EACjBT,kBAAmBiB,EACnBA,cACAd,WAAY,CACVC,IAAK4B,EAAcL,cACnBF,MAAOO,EAAcJ,iBAEvBY,KAAMC,GAAaC,MACnBwJ,IAAK,EACLvJ,QAAS8X,EAAU5Y,OACnBe,cAAe6X,EAAU5Y,OACzBoD,MAAO,kBAGTkV,KAAKxC,cArEP,iD,0EAmdA,WACE,OACE,qBAAKnc,UAAU,MAAf,SACE,qBAAKA,UAAU,sBAAf,SAIK2e,KAAKra,MAAMjG,QAAW,cAAC,GAAD,IACpBsgB,KAAKra,MAAM6L,YAAe,cAACyK,GAAD,CAAW/J,OAAQ8N,KAAKra,MAAMuM,SACvD8N,KAAKP,qB,GAngBF3e,aCjCJ,SAASyf,KACtB,IAAMzd,EAAWC,mBACXyd,EAAczd,mBACZ/C,EAAUb,IAAVa,MAHsB,EAIJT,mBAAS,IAJL,mBAIvBkC,EAJuB,KAIhBC,EAJgB,OAKAnC,oBAAS,GALT,mBAKvBG,EALuB,KAKdC,EALc,KAMxBgC,EAAUC,cANc,4CAW9B,WAA4BsB,GAA5B,SAAArB,EAAA,6DACEqB,EAAEC,iBADJ,SAIIzB,EAAS,IACT/B,GAAW,GALf,SAMUK,EAAM8C,EAASM,QAAQrD,MAAOygB,EAAYpd,QAAQrD,OAN5D,OAOI4B,EAAQG,KAAK,cAPjB,gDASIJ,EAAS,6BATb,QAYE/B,GAAW,GAZb,0DAX8B,kEA6B9B,WAAiCuD,GAAjC,SAAArB,EAAA,6DACEqB,EAAEC,iBACFoD,QAAQC,IAAI,gBAFd,SAII9E,EAAS,IACT/B,GAAW,GALf,SAMUK,EAAM,kBAAmB,YANnC,OAOIuG,QAAQC,IAAIxG,GACZ2B,EAAQG,KAAK,cARjB,kDAUIJ,EAAS,+BAVb,QAaE/B,GAAW,GAbb,2DA7B8B,sBA6C9B,OACE,mCACE,eAACyC,EAAA,EAAD,CACEf,UAAU,+DACVgB,MAAO,CAAEC,UAAW,SAFtB,UAIE,qBAAKjB,UAAU,oBAAf,SACE,cAAC,EAAD,MAEF,sBAAKA,UAAU,QAAQgB,MAAO,CAAEE,SAAU,SAA1C,UACE,cAAC,IAAD,UACE,eAAC,IAAKC,KAAN,WACE,oBAAInB,UAAU,mBAAd,oBACCI,GAAS,cAACgB,EAAA,EAAD,CAAOC,QAAQ,SAAf,SAAyBjB,IACnC,eAAC4B,EAAA,EAAD,CAAMC,SA3DY,4CA2DlB,UACE,eAACD,EAAA,EAAKE,MAAN,CAAYC,GAAG,QAAf,UACE,cAACH,EAAA,EAAKI,MAAN,oBACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,QAAQ5E,IAAK+D,EAAUc,UAAQ,OAEpD,eAACP,EAAA,EAAKE,MAAN,CAAYC,GAAG,WAAf,UACE,cAACH,EAAA,EAAKI,MAAN,uBACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,WAAW5E,IAAKyhB,EAAa5c,UAAQ,OAE1D,cAACjB,EAAA,EAAD,CAAQkB,SAAUnE,EAAS2B,UAAU,QAAQsC,KAAK,SAAlD,uBAIF,cAAChB,EAAA,EAAD,CAAQkB,SAAUnE,EAASgD,QAAQ,UAAUrB,UAAU,aAAauB,QAxElD,4CAwElB,2BAGA,qBAAKvB,UAAU,yBAAf,SACE,cAAC,IAAD,CAAMF,GAAG,mBAAT,qCAIN,sBAAKE,UAAU,6BAAf,oCACyB,cAAC,IAAD,CAAMF,GAAG,UAAT,gCChFpB,SAASsf,KACtB,IAAM3d,EAAWC,mBACXyd,EAAczd,mBACd2d,EAAqB3d,mBACnB3C,EAAWjB,IAAXiB,OAJuB,EAKLb,mBAAS,IALJ,mBAKxBkC,EALwB,KAKjBC,EALiB,OAMDnC,oBAAS,GANR,mBAMxBG,EANwB,KAMfC,EANe,KAOzBgC,EAAUC,cAPe,4CAY/B,WAA4BsB,GAA5B,SAAArB,EAAA,yDACEqB,EAAEC,iBAEEqd,EAAYpd,QAAQrD,QAAU2gB,EAAmBtd,QAAQrD,MAH/D,yCAIW2B,EAAS,2BAJpB,uBAQIA,EAAS,IACT/B,GAAW,GATf,SAUUS,EAAO0C,EAASM,QAAQrD,MAAOygB,EAAYpd,QAAQrD,OAV7D,OAWI4B,EAAQG,KAAK,cAXjB,kDAaIJ,EAAS,+BAbb,QAgBE/B,GAAW,GAhBb,2DAZ+B,sBA+B/B,OACE,mCACE,eAACyC,EAAA,EAAD,CACEf,UAAU,+DACVgB,MAAO,CAAEC,UAAW,SAFtB,UAIE,qBAAKjB,UAAU,oBAAf,SACE,cAAC,EAAD,MAEF,sBAAKA,UAAU,QAAQgB,MAAO,CAAEE,SAAU,SAA1C,UACE,cAAC,IAAD,UACE,eAAC,IAAKC,KAAN,WACE,oBAAInB,UAAU,mBAAd,qBACCI,GAAS,cAACgB,EAAA,EAAD,CAAOC,QAAQ,SAAf,SAAyBjB,IACnC,eAAC4B,EAAA,EAAD,CAAMC,SA7Ca,4CA6CnB,UACE,eAACD,EAAA,EAAKE,MAAN,CAAYC,GAAG,QAAf,UACE,cAACH,EAAA,EAAKI,MAAN,oBACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,QAAQ5E,IAAK+D,EAAUc,UAAQ,OAEpD,eAACP,EAAA,EAAKE,MAAN,CAAYC,GAAG,WAAf,UACE,cAACH,EAAA,EAAKI,MAAN,uBACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,WAAW5E,IAAKyhB,EAAa5c,UAAQ,OAE1D,eAACP,EAAA,EAAKE,MAAN,CAAYC,GAAG,mBAAf,UACE,cAACH,EAAA,EAAKI,MAAN,oCACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,WAAW5E,IAAK2hB,EAAoB9c,UAAQ,OAEjE,cAACjB,EAAA,EAAD,CAAQkB,SAAUnE,EAAS2B,UAAU,QAAQsC,KAAK,SAAlD,6BAMN,sBAAKtC,UAAU,mCAAf,sCAC2B,cAAC,IAAD,CAAMF,GAAG,SAAT,+BCjErC,SAASwf,GAAT,GAA6C,IAAnBtE,EAAkB,EAAlBA,eAEhB1a,EAAUC,cAFwB,4CAIxC,WAAuCsB,GAAvC,SAAArB,EAAA,sDACIqB,EAAEC,iBACFoD,QAAQC,IAAI,6BACZ,IACI7E,EAAQG,KAAK,cACf,SACEyE,QAAQC,IAAI,mDANpB,4CAJwC,sBAcxC,OACI,qCACI,wBAAOsQ,MAAM,gBAAb,UACI,gCACI,+BACI,wCACA,4CACA,0CAGR,kCACI,+BACI,mCAAMuF,EAAeuE,sBACrB,0CACA,6BAAKvE,EAAewE,uBAExB,+BACI,6BAAKxE,EAAeyE,yBACpB,8CACA,6BAAKzE,EAAe0E,2BAExB,+BACI,6BAAK1E,EAAe2E,mBACpB,wCACA,6BAAK3E,EAAe4E,qBAExB,+BACI,6BAAK5E,EAAe6E,qBACpB,oDACA,6BAAK7E,EAAe8E,uBAExB,qBAAIrK,MAAM,aAAV,UACI,6BAAKuF,EAAeuE,mBAAqBvE,EAAeyE,uBAAyBzE,EAAe2E,iBAAmB3E,EAAe6E,qBAClI,uCACA,6BAAK7E,EAAewE,kBAAoBxE,EAAe0E,sBAAwB1E,EAAe4E,gBAAkB5E,EAAe8E,6BAK3I,cAACxe,EAAA,EAAD,CAAQtB,UAAU,aAAauB,QArDC,4CAqDhC,oCAOZ,SAASwe,GAAT,GAAiD,EAAlB/E,eAAmB,IACxC1a,EAAUC,cAD6B,4CAG7C,WAAuCsB,GAAvC,SAAArB,EAAA,sDACIqB,EAAEC,iBACFoD,QAAQC,IAAI,6BACZ,IACI7E,EAAQG,KAAK,cACf,SACEyE,QAAQC,IAAI,mDANpB,4CAH6C,sBAa7C,OACI,qCACI,8BACI,2EAEJ,cAAC7D,EAAA,EAAD,CAAQtB,UAAU,aAAauB,QAlBM,4CAkBrC,oCASG,SAASye,GAAWngB,GAAQ,IAC/B1B,EAAgBL,IAAhBK,YAD8B,EAERD,oBAAS,GAFD,mBAE/BG,EAF+B,KAEtBC,EAFsB,OAGJJ,mBAAS,IAAIgZ,QAHT,mBAG/B+I,EAH+B,KAGpBC,EAHoB,KAIlClF,EAAiB,IAAI9D,OAJa,4CAUtC,4BAAA1W,EAAA,sDAEQ8a,EAAc,EAElBL,EAAWxd,WAAWC,MAAMwd,MAAM/c,EAAYgd,KAAKC,KAAK,SAASC,MAAK,SAAUjM,GAC5ElK,QAAQC,IAAI,YACZD,QAAQC,IAAIiK,GACZA,EAAS3E,SAAQ,SAAU8Q,GACvB,IAAIC,EAAMD,EAAcC,IACpBC,EAAYF,EAAcG,MAC9BV,EAAeQ,GAAOC,EACtBH,GAAe,KAIA,GAAfA,IACAN,EAAiB,CACb,mBAAsB,EAAG,kBAAqB,EAC9C,uBAA0B,EAAG,sBAAyB,EACtD,iBAAoB,EAAG,gBAAmB,EAC1C,mBAAsB,EAAG,kBAAqB,IAGtDkF,EAAalF,GAEM,GAAfM,GACAhd,GAAW,MA1BvB,4CAVsC,sBA0CtC,OApCAC,qBAAU,YAN4B,mCAOlC4hB,MAoCA,mCAEI,eAACpf,EAAA,EAAD,CACIf,UAAU,+DACVgB,MAAO,CAAEC,UAAW,SAFxB,UAII,qBAAKjB,UAAU,oBAAf,SACI,cAAC,EAAD,MAEJ,qBAAKA,UAAU,QAAQgB,MAAO,CAAEE,SAAU,SAA1C,SACI,cAAC,IAAD,UACI,eAAC,IAAKC,KAAN,WACI,oBAAInB,UAAU,mBAAd,iCAG0B,mBAArB7B,EAAYS,MAA8B,cAACmhB,GAAD,IACtC1hB,EAAW,aAAe,cAACihB,GAAD,CAAgBtE,eAAgBiF,gB,ICpHhFG,G,4JAnBb,WACE,OACE,cAAC,IAAD,UACE,cAACpiB,EAAD,UACE,eAAC,IAAD,WACE,cAACwB,EAAD,CAAc6gB,OAAK,EAACC,KAAK,IAAI5gB,UAAWmc,KACxC,cAACrc,EAAD,CAAc6gB,OAAK,EAACC,KAAK,aAAa5gB,UAAWQ,IACjD,cAACV,EAAD,CAAc6gB,OAAK,EAACC,KAAK,cAAc5gB,UAAWsgB,KAClD,cAAC,IAAD,CAAOM,KAAK,UAAU5gB,UAAW0f,KACjC,cAAC,IAAD,CAAOkB,KAAK,SAAS5gB,UAAWwf,KAChC,cAAC,IAAD,CAAOoB,KAAK,mBAAmB5gB,UAAW8B,e,GAZpC/B,a,OCflB8gB,IAAS3gB,OAAO,cAAC,GAAD,IAAS4gB,SAASC,eAAe,U","file":"static/js/main.f0a936f7.chunk.js","sourcesContent":["import firebase from \"firebase/app\"\r\nimport \"firebase/auth\"\r\nimport \"firebase/database\"\r\n\r\n/**\r\n * Initialize Firebase cloud key values (for recording data on cloud DB)\r\n */\r\nconst app = firebase.initializeApp({\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\r\n})\r\n\r\nexport const auth = app.auth()\r\nexport const firebaseDb = app.database().ref()\r\nexport default app","import React, { useContext, useState, useEffect } from \"react\"\r\nimport { auth } from \"../firebase\"\r\n\r\n\r\n/**\r\n * Authentication context to handle user authentication for\r\n * restricted pages (Dashboard, Statistics, Game, etc.)\r\n */\r\nconst AuthContext = React.createContext()\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext)\r\n}\r\n\r\n/*\r\n    Authentication Provider\r\n*/\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState()\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  /*\r\n    Sign up with Email and Password\r\n  */\r\n  function signup(email, password) {\r\n    return auth.createUserWithEmailAndPassword(email, password)\r\n  }\r\n\r\n  /*\r\n    Login with Email and Password\r\n  */\r\n  function login(email, password) {\r\n    return auth.signInWithEmailAndPassword(email, password)\r\n  }\r\n\r\n  /*\r\n    Logout with Email and Password\r\n  */\r\n  function logout() {\r\n    return auth.signOut()\r\n  }\r\n\r\n  /*\r\n    Reset Password for Email\r\n  */\r\n  function resetPassword(email) {\r\n    return auth.sendPasswordResetEmail(email)\r\n  }\r\n\r\n  /*\r\n    Update Email\r\n  */\r\n  function updateEmail(email) {\r\n    return currentUser.updateEmail(email)\r\n  }\r\n\r\n  /*\r\n    Update Email\r\n  */\r\n  function updatePassword(password) {\r\n    return currentUser.updatePassword(password)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(user => {\r\n      setCurrentUser(user)\r\n      setLoading(false)\r\n    })\r\n\r\n    return unsubscribe\r\n  }, [])\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    signup,\r\n    logout,\r\n    resetPassword,\r\n    updateEmail,\r\n    updatePassword\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  )\r\n}","import React from \"react\"\r\nimport { Route, Redirect } from \"react-router-dom\"\r\nimport { useAuth } from \"../../contexts/AuthContext\"\r\n\r\n/**\r\n * PrivateRoute component used to restrict access to specific\r\n * pages to only logged in users.\r\n */\r\nexport default function PrivateRoute({ component: Component, ...rest }) {\r\n  const { currentUser } = useAuth()\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n        return currentUser ? <Component {...props} /> : <Redirect to=\"/login\" />\r\n      }}\r\n    ></Route>\r\n  )\r\n}","import React, { Component } from 'react';\r\n\r\n/**\r\n * Logo component which represents the Logo image of the Poker App\r\n * aligned with the name of the App.\r\n */\r\nclass Logo extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"logo-main mb-4\">\r\n                <span className=\"navbar-brand\">\r\n                    <span ><img className=\"logo mr-2\" src=\"/assets/logo.svg\" /></span>\r\n                    <h3 className=\"navbar-text\">No-Limit Texas Hold'em Poker</h3>\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Logo;","import React, { useState } from \"react\";\r\nimport { Alert, Button, Card, Container } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport '../../Game.css';\r\nimport Logo from '../helpers/Logo';\r\n\r\n\r\n/**\r\n * Dashboard component to provide users with menu \r\n * where they can join a Poker game or view their \r\n * individual game statistics.\r\n */\r\nexport default function Dashboard() {\r\n    const [error, setError] = useState(\"\")\r\n    const { currentUser, logout } = useAuth()\r\n    const history = useHistory()\r\n\r\n    Dashboard.username = getUsername(currentUser.email)\r\n\r\n    /*\r\n     Logout user\r\n    */\r\n    async function handleLogout() {\r\n        setError(\"\")\r\n\r\n        try {\r\n            await logout()\r\n            history.push(\"/login\")\r\n        } catch {\r\n            setError(\"Failed to log out\")\r\n        }\r\n    }\r\n\r\n    /*\r\n     Show user statistics\r\n    */\r\n    async function viewStatistics() {\r\n        setError(\"\")\r\n        try {\r\n            history.push(\"/Statistics\")\r\n        } catch {\r\n            setError(\"Failed to view statistics\")\r\n        }\r\n    }\r\n\r\n    /*\r\n     Start Game\r\n    */\r\n    async function playPoker(difficulty = \"Beginner\") {\r\n        setError(\"\")\r\n        try {\r\n            history.push(\"/?difficulty=\" + difficulty)\r\n        } catch {\r\n            setError(\"Failed to enter game\")\r\n        }\r\n    }\r\n\r\n    /*\r\n     Get username from email address\r\n    */\r\n    function getUsername(emailAddress) {\r\n        return emailAddress.substring(0, emailAddress.indexOf(\"@\"));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container\r\n                className=\"d-flex flex-column align-items-center justify-content-center\"\r\n                style={{ minHeight: \"100vh\" }}\r\n            >\r\n                <div className=\"w-200 text-center\">\r\n                    <Logo />\r\n                </div>\r\n                <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <h2 className=\"text-center mb-4\">Dashboard</h2>\r\n                            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                            <div className=\"text-center mb-2\">Welcome <strong> {Dashboard.username}</strong>!</div>\r\n                            <div className=\"w-100 text-center mt-2\">\r\n                                <Button className=\"w-100 mb-3\" onClick={() => playPoker(\"beginner\")}>\r\n                                    Join Beginner Table\r\n                                </Button>\r\n                                <Button className=\"w-100 mb-3\" onClick={() => playPoker(\"intermediate\")}>\r\n                                    Join Intermediate Table\r\n                                </Button>\r\n                                <Button className=\"w-100 mb-3\" onClick={() => playPoker(\"expert\")}>\r\n                                    Join Expert Table\r\n                                </Button>\r\n                                <Button className=\"w-100 mb-3\" onClick={() => playPoker(\"ultimate\")}>\r\n                                    Join Ultimate Poker Pro Table\r\n                                </Button>\r\n                                <Button variant=\"warning\" className=\"w-100\" onClick={viewStatistics}>\r\n                                    View Personal Statistics\r\n                                </Button>\r\n                            </div>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <div className=\"w-100 text-center mt-2\">\r\n                        <Button variant=\"link\" onClick={handleLogout}>\r\n                            Log Out\r\n                </Button>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n","import React, { useRef, useState } from \"react\"\r\nimport { Form, Button, Card, Container, Alert } from \"react-bootstrap\"\r\nimport { useAuth } from \"../../contexts/AuthContext\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n/**\r\n * ForgotPassword component to allow users \r\n * to reset their account password (needed to login).\r\n */\r\nexport default function ForgotPassword() {\r\n  const emailRef = useRef()\r\n  const { resetPassword } = useAuth()\r\n  const [error, setError] = useState(\"\")\r\n  const [message, setMessage] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  /*\r\n    Handle user forgot password submission\r\n  */\r\n  async function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    try {\r\n      setMessage(\"\")\r\n      setError(\"\")\r\n      setLoading(true)\r\n      await resetPassword(emailRef.current.value)\r\n      setMessage(\"Check your inbox for further instructions\")\r\n    } catch {\r\n      setError(\"Failed to reset password\")\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container\r\n        className=\"d-flex align-items-center justify-content-center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n          <Card>\r\n            <Card.Body>\r\n              <h2 className=\"text-center mb-4\">Password Reset</h2>\r\n              {error && <Alert variant=\"danger\">{error}</Alert>}\r\n              {message && <Alert variant=\"success\">{message}</Alert>}\r\n              <Form onSubmit={handleSubmit}>\r\n                <Form.Group id=\"email\">\r\n                  <Form.Label>Email</Form.Label>\r\n                  <Form.Control type=\"email\" ref={emailRef} required />\r\n                </Form.Group>\r\n                <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n                  Reset Password\r\n            </Button>\r\n              </Form>\r\n              <div className=\"w-100 text-center mt-3\">\r\n                <Link to=\"/login\">Login</Link>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n          <div className=\"w-100 text-center mt-2\">\r\n            Need an account? <Link to=\"/signup\">Sign Up</Link>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  )\r\n}","import uuid from 'uuid/v1';\r\nimport { anteUpBlinds, calculateBlindIndices, managePhaseShift, remakePot } from './betService.js';\r\nimport { dealOtherCommunityCards, dealPlayerCards, makeDeckOfCards, playerShowDown, shuffleCards } from './cardsService.js';\r\n\r\n/** \r\n* The playerService provides services to handle\r\n* player information and the passing of information\r\n* to players.\r\n*/\r\n\r\n/* \r\nIntialise user and agents data\r\n*/\r\nconst axios = require('axios')\r\nconst makeTable = async (playerName = \"User\") => {\r\n\t// a list containing both the user and the agents data\r\n\tconst users = [{\r\n\t\tid: uuid(),\r\n\t\tname: playerName,\r\n\t\tavatarURL: '/assets/playerIcons/blackUser.svg',\r\n\t\tcards: [],\r\n\t\tshowDownHand: {\r\n\t\t\thand: [],\r\n\t\t\tdescendingSortHand: [],\r\n\t\t},\r\n\t\tchips: 20000,\r\n\t\troundStartChips: 20000,\r\n\t\troundEndChips: 20000,\r\n\t\tcurrentRoundChipsInvested: 0,\r\n\t\tbet: 0,\r\n\t\tbetReconciled: false,\r\n\t\tfolded: false,\r\n\t\tallIn: false,\r\n\t\tcanRaise: true,\r\n\t\tstackInvestment: 0,\r\n\t\trobot: false\r\n\t},\r\n\t{\r\n\t\tid: uuid(),\r\n\t\tname: 'Agent 1',\r\n\t\tavatarURL: '/assets/playerIcons/blueUser.svg',\r\n\t\tcards: [],\r\n\t\tshowDownHand: {\r\n\t\t\thand: [],\r\n\t\t\tdescendingSortHand: [],\r\n\t\t},\r\n\t\tchips: 20000,\r\n\t\troundStartChips: 20000,\r\n\t\troundEndChips: 20000,\r\n\t\tcurrentRoundChipsInvested: 0,\r\n\t\tbet: 0,\r\n\t\tbetReconciled: false,\r\n\t\tfolded: false,\r\n\t\tallIn: false,\r\n\t\tcanRaise: true,\r\n\t\tstackInvestment: 0,\r\n\t\trobot: true\r\n\t},\r\n\t{\r\n\t\tid: uuid(),\r\n\t\tname: 'Agent 2',\r\n\t\tavatarURL: '/assets/playerIcons/redUser.svg',\r\n\t\tcards: [],\r\n\t\tshowDownHand: {\r\n\t\t\thand: [],\r\n\t\t\tdescendingSortHand: [],\r\n\t\t},\r\n\t\tchips: 20000,\r\n\t\troundStartChips: 20000,\r\n\t\troundEndChips: 20000,\r\n\t\tcurrentRoundChipsInvested: 0,\r\n\t\tbet: 0,\r\n\t\tbetReconciled: false,\r\n\t\tfolded: false,\r\n\t\tallIn: false,\r\n\t\tcanRaise: true,\r\n\t\tstackInvestment: 0,\r\n\t\trobot: true\r\n\t},\r\n\t{\r\n\t\tid: uuid(),\r\n\t\tname: 'Agent 3',\r\n\t\tavatarURL: '/assets/playerIcons/purpleUser.svg',\r\n\t\tcards: [],\r\n\t\tshowDownHand: {\r\n\t\t\thand: [],\r\n\t\t\tdescendingSortHand: [],\r\n\t\t},\r\n\t\tchips: 20000,\r\n\t\troundStartChips: 20000,\r\n\t\troundEndChips: 20000,\r\n\t\tcurrentRoundChipsInvested: 0,\r\n\t\tbet: 0,\r\n\t\tbetReconciled: false,\r\n\t\tfolded: false,\r\n\t\tallIn: false,\r\n\t\tcanRaise: true,\r\n\t\tstackInvestment: 0,\r\n\t\trobot: true\r\n\t},\r\n\t{\r\n\t\tid: uuid(),\r\n\t\tname: 'Agent 4',\r\n\t\tavatarURL: '/assets/playerIcons/yellowUser.svg',\r\n\t\tcards: [],\r\n\t\tshowDownHand: {\r\n\t\t\thand: [],\r\n\t\t\tdescendingSortHand: [],\r\n\t\t},\r\n\t\tchips: 20000,\r\n\t\troundStartChips: 20000,\r\n\t\troundEndChips: 20000,\r\n\t\tcurrentRoundChipsInvested: 0,\r\n\t\tbet: 0,\r\n\t\tbetReconciled: false,\r\n\t\tfolded: false,\r\n\t\tallIn: false,\r\n\t\tcanRaise: true,\r\n\t\tstackInvestment: 0,\r\n\t\trobot: true\r\n\t},\r\n\t{\r\n\t\tid: uuid(),\r\n\t\tname: 'Agent 5',\r\n\t\tavatarURL: '/assets/playerIcons/yellowUser.svg',\r\n\t\tcards: [],\r\n\t\tshowDownHand: {\r\n\t\t\thand: [],\r\n\t\t\tdescendingSortHand: [],\r\n\t\t},\r\n\t\tchips: 20000,\r\n\t\troundStartChips: 20000,\r\n\t\troundEndChips: 20000,\r\n\t\tcurrentRoundChipsInvested: 0,\r\n\t\tbet: 0,\r\n\t\tbetReconciled: false,\r\n\t\tfolded: false,\r\n\t\tallIn: false,\r\n\t\tcanRaise: true,\r\n\t\tstackInvestment: 0,\r\n\t\trobot: true\r\n\t}];\r\n\r\n\treturn users\r\n}\r\n/* \r\n Used to create agents of different difficulties\r\n */\r\nconst makePersonality = (seed) => {\r\n\tswitch (seed) {\r\n\t\t// intermediate/advanced ai\r\n\t\tcase (seed > 0.5):\r\n\t\t\treturn 'standard'\r\n\t\t// beginner ai\r\n\t\tcase (seed > 0.35):\r\n\t\t\treturn 'aggressive'\r\n\t\tcase (seed > 0):\r\n\t\t// intermediate/advanced ai\r\n\t\tdefault:\r\n\t\t\treturn 'conservative'\r\n\t}\r\n}\r\n\r\nconst manageOverflowIndex = (currentIndex, incrementBy, arrayLength, direction) => {\r\n\tswitch (direction) {\r\n\t\tcase ('up'): {\r\n\t\t\treturn (\r\n\t\t\t\t(currentIndex + incrementBy) % arrayLength\r\n\t\t\t)\r\n\t\t}\r\n\t\tcase ('down'): {\r\n\t\t\treturn (\r\n\t\t\t\t((currentIndex - incrementBy) % arrayLength) + arrayLength\r\n\t\t\t)\r\n\t\t}\r\n\t\tdefault: throw Error(\"Attempted to overfow index on unfamiliar direction\");\r\n\t}\r\n}\r\n/* \r\n Determines which player starts the round\r\n */\r\nconst choosePhaseStartActivePlayer = (state, recursion = false) => {\r\n\tif (!recursion) {\r\n\t\tstate.activePlayerIndex = manageOverflowIndex(state.blindIndex.big, 1, state.players.length, 'up');\r\n\t} else if (recursion) {\r\n\t\tstate.activePlayerIndex = manageOverflowIndex(state.activePlayerIndex, 1, state.players.length, 'up');\r\n\t}\r\n\tif (state.players[state.activePlayerIndex].folded) {\r\n\t\treturn choosePhaseStartActivePlayer(state, true)\r\n\t}\r\n\tif (state.players[state.activePlayerIndex].chips === 0) {\r\n\t\treturn choosePhaseStartActivePlayer(state, true)\r\n\t}\r\n\treturn state\r\n}\r\n\r\n/* \r\n Determines which players turn is next\r\n */\r\nconst chooseNextActivePlayer = (state) => {\r\n\tstate.activePlayerIndex = manageOverflowIndex(state.activePlayerIndex, 1, state.players.length, 'up');\r\n\tconst activePlayer = state.players[state.activePlayerIndex];\r\n\r\n\tconst allButOnePlayersAreAllIn = (state.numPlayersActive - state.numPlayersAllIn === 1);\r\n\tif (state.numPlayersActive === 1) {\r\n\t\tconsole.log(\"Only one player active, skipping to showdown.\")\r\n\t\treturn (playerShowDown(remakePot(dealOtherCommunityCards(state))));\r\n\t}\r\n\tif (activePlayer.folded) {\r\n\t\tconsole.log(\"Current player index is folded, going to next active player.\")\r\n\t\treturn chooseNextActivePlayer(state);\r\n\t}\r\n\r\n\tif (\r\n\t\tallButOnePlayersAreAllIn &&\r\n\t\t!activePlayer.folded &&\r\n\t\tactivePlayer.betReconciled\r\n\t) {\r\n\t\treturn (playerShowDown(remakePot(dealOtherCommunityCards(state))));\r\n\t}\r\n\r\n\tif (activePlayer.chips === 0) {\r\n\t\tif (state.numPlayersAllIn === state.numPlayersActive) {\r\n\t\t\tconsole.log(\"All players are all in.\")\r\n\t\t\treturn (playerShowDown(remakePot(dealOtherCommunityCards(state))));\r\n\t\t} else if (allButOnePlayersAreAllIn && activePlayer.allIn) {\r\n\t\t\treturn (playerShowDown(remakePot(dealOtherCommunityCards(state))));\r\n\t\t} else {\r\n\t\t\treturn chooseNextActivePlayer(state);\r\n\t\t}\r\n\t}\r\n\r\n\tif (activePlayer.betReconciled) {\r\n\t\tconsole.log(\"Player is reconciled with pot, round betting cycle complete, proceed to next round.\")\r\n\t\treturn managePhaseShift(state);\r\n\t}\r\n\r\n\treturn state\r\n}\r\n\r\n/* \r\n The dealer chip is assigned to the \r\n player acting as the dealer in \r\n a given round.\r\n */\r\nconst moveDealerChip = (state) => {\r\n\tstate.dealerIndex = manageOverflowIndex(state.dealerIndex, 1, state.players.length, 'up');\r\n\tconst nextDealer = state.players[state.dealerIndex]\r\n\tif (nextDealer.chips === 0) {\r\n\t\treturn moveDealerChip(state)\r\n\t}\r\n\r\n\treturn findBrokePlayers(state, nextDealer.name);\r\n}\r\n\r\n\r\n/* \r\n Finds and remove players with no funds remaining,\r\n shifts dealer if necessary and prepares state for \r\n next game phase.\r\n */\r\nconst findBrokePlayers = (state, dealerID) => {\r\n\tstate.players = state.players.filter(player => player.chips > 0);\r\n\tconst newDealerIndex = state.players.findIndex(player => player.name === dealerID)\r\n\tstate.dealerIndex = newDealerIndex\r\n\tstate.activePlayerIndex = newDealerIndex\r\n\tif (state.players.length === 1) {\r\n\t\t// winner determined\r\n\t\treturn state\r\n\t} else if (state.players.length === 2) {\r\n\t\tstate.blindIndex.small = newDealerIndex;\r\n\t\tstate.blindIndex.big = manageOverflowIndex(newDealerIndex, 1, state.players.length, 'up');\r\n\t\tstate.players = anteUpBlinds(state.players, { bigBlindIndex: state.blindIndex.big, smallBlindIndex: state.blindIndex.small }, state.minBet).map(player => ({\r\n\t\t\t...player,\r\n\t\t\tcards: [],\r\n\t\t\tshowDownHand: {\r\n\t\t\t\thand: [],\r\n\t\t\t\tdescendingSortHand: [],\r\n\t\t\t},\r\n\t\t\troundStartChips: player.chips + player.bet,\r\n\t\t\tcurrentRoundChipsInvested: 0,\r\n\t\t\tbetReconciled: false,\r\n\t\t\tfolded: false,\r\n\t\t\tallIn: false,\r\n\t\t}))\r\n\t\tstate.numPlayersAllIn = 0;\r\n\t\tstate.numPlayersFolded = 0;\r\n\t\tstate.numPlayersActive = state.players.length;\r\n\t} else {\r\n\t\tconst blindIndicies = calculateBlindIndices(newDealerIndex, state.players.length);\r\n\t\tstate.blindIndex = {\r\n\t\t\tbig: blindIndicies.bigBlindIndex,\r\n\t\t\tsmall: blindIndicies.smallBlindIndex,\r\n\t\t}\r\n\t\tstate.players = anteUpBlinds(state.players, blindIndicies, state.minBet).map(player => ({\r\n\t\t\t...player,\r\n\t\t\tcards: [],\r\n\t\t\tshowDownHand: {\r\n\t\t\t\thand: [],\r\n\t\t\t\tdescendingSortHand: [],\r\n\t\t\t},\r\n\t\t\troundStartChips: player.chips + player.bet,\r\n\t\t\tcurrentRoundChipsInvested: 0,\r\n\t\t\tbetReconciled: false,\r\n\t\t\tfolded: false,\r\n\t\t\tallIn: false,\r\n\t\t}))\r\n\t\tstate.numPlayersAllIn = 0;\r\n\t\tstate.numPlayersFolded = 0;\r\n\t\tstate.numPlayersActive = state.players.length;\r\n\t}\r\n\treturn dealPlayerCards(state)\r\n}\r\n\r\n/* \r\n Increments state to next game phase and \r\n shifts dealer.\r\n */\r\nconst startNextRound = (state) => {\r\n\tstate.communityCards = [];\r\n\tstate.sidePots = [];\r\n\tstate.playerHierarchy = [];\r\n\tstate.showDownMessages = [];\r\n\tstate.deck = shuffleCards(makeDeckOfCards())\r\n\tstate.highBet = 20;\r\n\tstate.betInputValue = 20;\r\n\tstate.minBet = 20; // can export out to initialState\r\n\t// Unmount all cards so react can re-trigger animations\r\n\tconst { players } = state;\r\n\tconst clearPlayerCards = players.map(player => ({ ...player, cards: player.cards.map(card => { }) }))\r\n\tstate.players = clearPlayerCards;\r\n\treturn moveDealerChip(state)\r\n}\r\n\r\n/* \r\n Check if the game has a winner.\r\n */\r\nconst checkWin = players => {\r\n\treturn (players.filter(player => player.chips > 0).length === 1)\r\n}\r\n\r\nexport { makeTable, manageOverflowIndex, chooseNextActivePlayer, choosePhaseStartActivePlayer, startNextRound, checkWin };\r\n\r\n","import { cloneDeep } from 'lodash';\r\nimport { choosePhaseStartActivePlayer, manageOverflowIndex } from './playersService.js';\r\n\r\n/**\r\n * cardsService provides key services to the App that\r\n * regard the Poker game cards. Such services include \r\n * shuffling the cards, dealing the cards finding \r\n * the best hand, etc.\r\n */\r\n\r\nconst totalNumCards = 52;\r\nconst cards = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\r\nconst suits = ['Heart', 'Spade', 'Club', 'Diamond'];\r\n\r\n// start from 2 as A (or 1) is the higest ranking card\r\nconst VALUE_MAP = {\r\n\t2: 1,\r\n\t3: 2,\r\n\t4: 3,\r\n\t5: 4,\r\n\t6: 5,\r\n\t7: 6,\r\n\t8: 7,\r\n\t9: 8,\r\n\t10: 9,\r\n\tJ: 10,\r\n\tQ: 11,\r\n\tK: 12,\r\n\tA: 13,\r\n};\r\n\r\n\r\n\r\n/*\r\n  Generate the deck of 52 cards \r\n */\r\nconst makeDeckOfCards = () => {\r\n\tconst deck = [];\r\n\r\n\t// get every combination of suit and value\r\n\tfor (let suit of suits) {\r\n\t\tfor (let card of cards) {\r\n\t\t\tdeck.push({\r\n\t\t\t\tcardFace: card,\r\n\t\t\t\tsuit: suit,\r\n\t\t\t\tvalue: VALUE_MAP[card]\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\treturn deck\r\n}\r\n\r\n\r\n/*\r\n  Shuffle cards to randomize their order\r\n */\r\nconst shuffleCards = (deck) => {\r\n\tlet shuffledDeck = new Array(totalNumCards);\r\n\tlet filledSlots = [];\r\n\tfor (let i = 0; i < totalNumCards; i++) {\r\n\t\t// if all cards except 1 are given \r\n\t\tif (i === 51) {\r\n\t\t\t// assign the last slot to the remaining card\r\n\t\t\tconst lastSlot = shuffledDeck.findIndex((el) => typeof el == 'undefined');\r\n\t\t\tshuffledDeck[lastSlot] = deck[i];\r\n\t\t\tfilledSlots.push(lastSlot);\r\n\t\t} else {\r\n\t\t\t// randomize order of all cards one by one\r\n\t\t\tlet shuffleToPosition = randomStartPosition(0, totalNumCards - 1);\r\n\t\t\twhile (filledSlots.includes(shuffleToPosition)) {\r\n\t\t\t\tshuffleToPosition = randomStartPosition(0, totalNumCards - 1);\r\n\t\t\t}\r\n\t\t\tshuffledDeck[shuffleToPosition] = deck[i];\r\n\t\t\tfilledSlots.push(shuffleToPosition);\r\n\t\t}\r\n\t}\r\n\treturn shuffledDeck\r\n}\r\n\r\n\r\n/*\r\n  Deal players cards at start of each hand\r\n */\r\nconst dealPlayerCards = (state) => {\r\n\tstate.clearCards = false;\r\n\tlet animationDelay = 0;\r\n\t// deal cards until every player at table has 2\r\n\twhile (state.players[state.activePlayerIndex].cards.length < 2) {\r\n\t\tconst { mutableDeckCopy, chosenCards } = getCards(state.deck, 1);\r\n\r\n\t\t// add animation delay \r\n\t\tchosenCards.animationDelay = animationDelay;\r\n\t\tanimationDelay = animationDelay + 250;\r\n\r\n\t\tconst newDeck = [...mutableDeckCopy];\r\n\t\tstate.players[state.activePlayerIndex].cards.push(chosenCards);\r\n\r\n\t\tstate.deck = newDeck;\r\n\t\tstate.activePlayerIndex = manageOverflowIndex(state.activePlayerIndex, 1, state.players.length, 'up');\r\n\t}\r\n\tif (state.players[state.activePlayerIndex].cards.length === 2) {\r\n\t\tstate.activePlayerIndex = manageOverflowIndex(state.blindIndex.big, 1, state.players.length, 'up');\r\n\t\t// set first phase of betting\r\n\t\tstate.phase = 'betting1';\r\n\t\treturn state;\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n  Find random start position for giving cards (assigns dealer chip)\r\n */\r\nconst randomStartPosition = (min, max) => {\r\n\tmin = Math.ceil(min);\r\n\tmax = Math.floor(max);\r\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n\r\n/*\r\n  Get cards dealt to a player\r\n */\r\nconst getCards = (deck, numToGet) => {\r\n\t// make shallow copy of deck to not alter original deck attributes\r\n\tconst mutableDeckCopy = [...deck];\r\n\tlet chosenCards;\r\n\tif (numToGet === 1) {\r\n\t\t// get last card \r\n\t\tchosenCards = mutableDeckCopy.pop();\r\n\t} else {\r\n\t\t// get chosen cards from mutable deck copy one by one\r\n\t\tchosenCards = [];\r\n\t\tfor (let i = 0; i < numToGet; i++) {\r\n\t\t\tchosenCards.push(mutableDeckCopy.pop());\r\n\t\t}\r\n\t}\r\n\treturn { mutableDeckCopy, chosenCards }\r\n}\r\n\r\n\r\n/*\r\n  Deal flop cards\r\n */\r\nconst dealFlopCards = (state) => {\r\n\tlet animationDelay = 0;\r\n\tconst { mutableDeckCopy, chosenCards } = getCards(state.deck, 3);\r\n\r\n\t// deal first 3 chosen flop cards\r\n\tfor (let card of chosenCards) {\r\n\t\t// add animation delay \r\n\t\tcard.animationDelay = animationDelay;\r\n\t\tanimationDelay = animationDelay + 250;\r\n\t\tstate.communityCards.push(card);\r\n\t}\r\n\r\n\tstate.deck = mutableDeckCopy;\r\n\tstate = choosePhaseStartActivePlayer(state)\r\n\t// set second phase of betting\r\n\tstate.phase = 'betting2';\r\n\r\n\treturn state;\r\n}\r\n\r\n/*\r\n  Deal turn cards\r\n */\r\nconst dealTurnCards = (state) => {\r\n\tconst { mutableDeckCopy, chosenCards } = getCards(state.deck, 1);\r\n\tchosenCards.animationDelay = 0;\r\n\r\n\tstate.communityCards.push(chosenCards);\r\n\tstate.deck = mutableDeckCopy;\r\n\tstate = choosePhaseStartActivePlayer(state)\r\n\t// set third phase of betting\r\n\tstate.phase = 'betting3'\r\n\r\n\treturn state\r\n}\r\n\r\n\r\n/*\r\n  Deal river cards\r\n */\r\nconst dealRiverCards = (state) => {\r\n\tconst { mutableDeckCopy, chosenCards } = getCards(state.deck, 1);\r\n\tchosenCards.animationDelay = 0;\r\n\r\n\tstate.communityCards.push(chosenCards);\r\n\tstate.deck = mutableDeckCopy;\r\n\tstate = choosePhaseStartActivePlayer(state)\r\n\t// set fourth phase of betting\r\n\tstate.phase = 'betting4'\r\n\r\n\treturn state\r\n}\r\n\r\n/*\r\n  Deal table Community cards \r\n */\r\nconst dealOtherCommunityCards = (state) => {\r\n\t// check number of cards left to deal\r\n\tconst cardsToPop = 5 - state.communityCards.length\r\n\tif (cardsToPop >= 1) {\r\n\t\tlet animationDelay = 0;\r\n\t\tconst { mutableDeckCopy, chosenCards } = getShowdownCards(state.deck, cardsToPop);\r\n\r\n\t\tfor (let card of chosenCards) {\r\n\t\t\tcard.animationDelay = animationDelay;\r\n\t\t\tanimationDelay = animationDelay + 250;\r\n\t\t\tstate.communityCards.push(card);\r\n\t\t}\r\n\r\n\t\tstate.deck = mutableDeckCopy;\r\n\t}\r\n\t// when completed move to showdown phase (phase to check winners of hand)\r\n\tstate.phase = 'showdown'\r\n\treturn state\r\n}\r\n\r\n/*\r\n  Perform player showdown at end of hand\r\n */\r\nconst playerShowDown = (state) => {\r\n\t// find players that are still in the hand\r\n\tfor (let player of state.players) {\r\n\t\tconst frequencyHistogram = {};\r\n\t\tconst suitHistogram = {};\r\n\r\n\t\t// build each player's best hand\r\n\t\tplayer.showDownHand.hand = player.cards.concat(state.communityCards);\r\n\t\tplayer.showDownHand.descendingSortHand = player.showDownHand.hand.map(el => el).sort((a, b) => b.value - a.value); // This mutates showDownHand.hand in place(!!)\r\n\r\n\t\tplayer.showDownHand.descendingSortHand.forEach(card => {\r\n\t\t\tfrequencyHistogram[card.cardFace] = (frequencyHistogram[card.cardFace] + 1 || 1);\r\n\t\t\tsuitHistogram[card.suit] = (suitHistogram[card.suit] + 1 || 1);\r\n\t\t})\r\n\r\n\t\tplayer.frequencyHistogram = frequencyHistogram;\r\n\t\tplayer.suitHistogram = suitHistogram;\r\n\r\n\t\tconst valueSet = generateValueSet(player.showDownHand.descendingSortHand);\r\n\r\n\t\t// check value of each player's hand\r\n\t\tconst { isFlush, flushedSuit } = checkIfFlush(suitHistogram);\r\n\t\tconst flushCards = (isFlush) && player.showDownHand.descendingSortHand.filter(card => card.suit === flushedSuit);\r\n\t\tconst isRoyalFlush = (isFlush) && checkIfRoyalFlush(flushCards);\r\n\t\tconst { isStraightFlush, isLowStraightFlush, concurrentSFCardValues, concurrentSFCardValuesLow } = (isFlush) && checkIfStraightFlush(flushCards)\r\n\t\tconst { isStraight, isLowStraight, concurrentCardValues, concurrentCardValuesLow } = checkIfStraight(valueSet);\r\n\t\tconst { isFourOfAKind, isFullHouse, isThreeOfAKind, isTwoPair, isPair, frequencyHistogramMetaData } = checkFrequencyHistogram(player.showDownHand.descendingSortHand, frequencyHistogram);\r\n\t\tconst isNoPair = ((!isRoyalFlush) && (!isStraightFlush) && (!isFourOfAKind) && (!isFullHouse) && (!isFlush) && (!isStraight) && (!isThreeOfAKind) && (!isTwoPair) && (!isPair))\r\n\r\n\t\t// set value of each player's hand\r\n\t\tplayer.showDownHand.bools = {\r\n\t\t\tisRoyalFlush,\r\n\t\t\tisStraightFlush,\r\n\t\t\tisFourOfAKind,\r\n\t\t\tisFullHouse,\r\n\t\t\tisFlush,\r\n\t\t\tisStraight,\r\n\t\t\tisThreeOfAKind,\r\n\t\t\tisTwoPair,\r\n\t\t\tisPair,\r\n\t\t\tisNoPair,\r\n\t\t}\r\n\r\n\t\tplayer.showDownHand.heldRankHierarchy = [{\r\n\t\t\tname: 'Royal Flush',\r\n\t\t\tmatch: isRoyalFlush,\r\n\t\t}, {\r\n\t\t\tname: 'Straight Flush',\r\n\t\t\tmatch: isStraightFlush\r\n\t\t}, {\r\n\t\t\tname: 'Four Of A Kind',\r\n\t\t\tmatch: isFourOfAKind,\r\n\t\t}, {\r\n\t\t\tname: 'Full House',\r\n\t\t\tmatch: isFullHouse,\r\n\t\t}, {\r\n\t\t\tname: 'Flush',\r\n\t\t\tmatch: isFlush,\r\n\t\t}, {\r\n\t\t\tname: 'Straight',\r\n\t\t\tmatch: isStraight,\r\n\t\t}, {\r\n\t\t\tname: 'Three Of A Kind',\r\n\t\t\tmatch: isThreeOfAKind,\r\n\t\t}, {\r\n\t\t\tname: 'Two Pair',\r\n\t\t\tmatch: isTwoPair,\r\n\t\t}, {\r\n\t\t\tname: 'Pair',\r\n\t\t\tmatch: isPair,\r\n\t\t}, {\r\n\t\t\tname: 'No Pair',\r\n\t\t\tmatch: isNoPair\r\n\t\t}];\r\n\r\n\t\tplayer.metaData = frequencyHistogramMetaData\r\n\r\n\t\t// get best hand between players in showdown\r\n\t\tconst highRankPosition = player.showDownHand.heldRankHierarchy.findIndex(el => el.match === true);\r\n\t\tplayer.showDownHand.bestHandRank = player.showDownHand.heldRankHierarchy[highRankPosition].name;\r\n\t\tplayer.showDownHand.bestHand = findBestHand(player.showDownHand.descendingSortHand, player.showDownHand.bestHandRank, flushedSuit, flushCards, concurrentCardValues, concurrentCardValuesLow, isLowStraight, isLowStraightFlush, concurrentSFCardValues, concurrentSFCardValuesLow, frequencyHistogramMetaData)\r\n\r\n\t}\r\n\r\n\treturn assignSidePots(state)\r\n\r\n}\r\n\r\n/*\r\n  Get cards of players that are part of showdown\r\n */\r\nconst getShowdownCards = (deck, numToPop) => {\r\n\t// make shallow copy of deck to not alter original deck attributes\r\n\tconst mutableDeckCopy = [...deck];\r\n\tlet chosenCards;\r\n\t// get last card \r\n\tif (numToPop === 1) {\r\n\t\tchosenCards = [mutableDeckCopy.pop()];\r\n\t} else {\r\n\t\t// get chosen cards from mutable deck copy one by one\r\n\t\tchosenCards = [];\r\n\t\tfor (let i = 0; i < numToPop; i++) {\r\n\t\t\tchosenCards.push(mutableDeckCopy.pop());\r\n\t\t}\r\n\t}\r\n\treturn { mutableDeckCopy, chosenCards }\r\n}\r\n\r\n/*\r\n  Find best hand amongst players still in a hand\r\n */\r\nconst findBestHand = (hand, bestRank, flushedSuit, flushCards, concurrentCardValues, concurrentCardValuesLow, isLowStraight, isLowStraightFlush, concurrentSFCardValues, concurrentSFCardValuesLow, frequencyHistogramMetaData) => {\r\n\t// check if hand matches any value from best to worst (Royal Flush to High Card)\r\n\tswitch (bestRank) {\r\n\t\t// check if hand is Ten, Jack, Queen, King and Ace (all of same suit)\r\n\t\tcase ('Royal Flush'): {\r\n\t\t\treturn flushCards.slice(0, 5)\r\n\t\t}\r\n\t\t// check if hand is five cards in sequence (all of same suit)\r\n\t\tcase ('Straight Flush'): {\r\n\t\t\tif (isLowStraightFlush && concurrentSFCardValues.length < 5) {\r\n\t\t\t\tconcurrentSFCardValuesLow[0] = 13\r\n\t\t\t\treturn concurrentSFCardValuesLow.reduce((acc, cur, index) => {\r\n\t\t\t\t\tif (index < 5) {\r\n\t\t\t\t\t\tacc.push(flushCards[flushCards.findIndex(match => match.value === cur)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn acc;\r\n\t\t\t\t}, []).reverse();\r\n\t\t\t} else {\r\n\t\t\t\treturn concurrentSFCardValues.reduce((acc, cur, index) => {\r\n\t\t\t\t\tif (index < 5) {\r\n\t\t\t\t\t\tacc.push(flushCards[flushCards.findIndex(match => match.value === cur)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn acc;\r\n\t\t\t\t}, []);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// check if hand is four cards all of the same denomination\r\n\t\tcase ('Four Of A Kind'): {\r\n\t\t\tconst bestHand = [];\r\n\t\t\tlet mutableHand = cloneDeep(hand);\r\n\r\n\t\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\t\tconst indexOfQuad = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.quads[0].face);\r\n\t\t\t\tbestHand.push(mutableHand[indexOfQuad])\r\n\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfQuad)\r\n\t\t\t}\r\n\r\n\t\t\treturn bestHand.concat(mutableHand.slice(0, 1))\r\n\t\t}\r\n\t\t// check if hand is three cards of one denomination and two cards of another denomination\r\n\t\tcase ('Full House'): {\r\n\t\t\tconst bestHand = [];\r\n\t\t\tlet mutableHand = cloneDeep(hand);\r\n\t\t\tif (frequencyHistogramMetaData.tripples.length > 1) {\r\n\t\t\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\t\t\tconst indexOfTripple = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.tripples[0].face);\r\n\t\t\t\t\tbestHand.push(mutableHand[indexOfTripple])\r\n\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfTripple)\r\n\t\t\t\t}\r\n\t\t\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\t\t\tconst indexOfPair = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.tripples[1].face);\r\n\t\t\t\t\tbestHand.push(mutableHand[indexOfPair])\r\n\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfPair)\r\n\t\t\t\t}\r\n\t\t\t\treturn bestHand\r\n\t\t\t} else {\r\n\t\t\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\t\t\tconst indexOfTripple = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.tripples[0].face);\r\n\t\t\t\t\tbestHand.push(mutableHand[indexOfTripple])\r\n\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfTripple)\r\n\t\t\t\t}\r\n\t\t\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\t\t\tconst indexOfPair = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.pairs[0].face);\r\n\t\t\t\t\tbestHand.push(mutableHand[indexOfPair])\r\n\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfPair)\r\n\t\t\t\t}\r\n\t\t\t\treturn bestHand\r\n\t\t\t}\r\n\t\t}\r\n\t\t// check if hand is five cards all of the same suit\r\n\t\tcase ('Flush'): {\r\n\t\t\treturn flushCards.slice(0, 5)\r\n\t\t}\r\n\t\t// check if hand is five cards of any suit in sequence\r\n\t\tcase ('Straight'): {\r\n\t\t\tif (isLowStraight && concurrentCardValues.length < 5) {\r\n\t\t\t\tconcurrentCardValuesLow[0] = 13\r\n\t\t\t\treturn concurrentCardValuesLow.reduce((acc, cur, index) => {\r\n\t\t\t\t\tif (index < 5) {\r\n\t\t\t\t\t\tacc.push(hand[hand.findIndex(match => match.value === cur)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn acc;\r\n\t\t\t\t}, []).reverse();\r\n\t\t\t} else {\r\n\t\t\t\treturn concurrentCardValues.reduce((acc, cur, index) => {\r\n\t\t\t\t\tif (index < 5) {\r\n\t\t\t\t\t\tacc.push(hand[hand.findIndex(match => match.value === cur)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn acc;\r\n\t\t\t\t}, []);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// check if hand is three cards of the same denomination and two unmatched cards\r\n\t\tcase ('Three Of A Kind'): {\r\n\t\t\tconst bestHand = [];\r\n\t\t\tlet mutableHand = cloneDeep(hand);\r\n\r\n\t\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\t\tconst indexOfTripple = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.tripples[0].face);\r\n\t\t\t\tbestHand.push(mutableHand[indexOfTripple])\r\n\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfTripple)\r\n\t\t\t}\r\n\r\n\t\t\treturn bestHand.concat(mutableHand.slice(0, 2))\r\n\t\t}\r\n\t\t// check if hand is two sets of two cards of the same denomination and any fifth card\r\n\t\tcase ('Two Pair'): {\r\n\t\t\tconst bestHand = [];\r\n\t\t\tlet mutableHand = cloneDeep(hand);\r\n\t\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\t\tconst indexOfPair = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.pairs[0].face);\r\n\t\t\t\tbestHand.push(mutableHand[indexOfPair])\r\n\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfPair)\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = 0; i < 2; i++) {\r\n\r\n\t\t\t\tconst indexOfPair = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.pairs[1].face);\r\n\t\t\t\tbestHand.push(mutableHand[indexOfPair])\r\n\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfPair)\r\n\t\t\t}\r\n\t\t\treturn bestHand.concat(mutableHand.slice(0, 1))\r\n\r\n\t\t}\r\n\t\t// check if hand is two cards of the same denomination and three unmatched cards\r\n\t\tcase ('Pair'): {\r\n\t\t\tconst bestHand = [];\r\n\t\t\tlet mutableHand = cloneDeep(hand);\r\n\t\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\t\tconst indexOfPair = mutableHand.findIndex(card => card.cardFace === frequencyHistogramMetaData.pairs[0].face);\r\n\t\t\t\t// CONSIDER : \r\n\t\t\t\tbestHand.push(mutableHand[indexOfPair])\r\n\t\t\t\tmutableHand = mutableHand.filter((card, index) => index !== indexOfPair)\r\n\t\t\t}\r\n\t\t\treturn bestHand.concat(mutableHand.slice(0, 3))\r\n\r\n\r\n\t\t}\r\n\t\t// check if hand is all five cards are unmatched\r\n\t\tcase ('No Pair'): {\r\n\t\t\treturn hand.slice(0, 5)\r\n\t\t}\r\n\t\tdefault: throw Error('Recieved unfamiliar rank argument in findBestHand()');\r\n\t}\r\n}\r\n\r\n/*\r\n  Determine ranking order of players' hands\r\n */\r\nconst determinePlayerHandsHierarchy = (sortedComparator, handRank) => {\r\n\tlet winnerHierarchy = [];\r\n\tlet loserHierarchy = [];\r\n\tconst processComparator = (comparator, round = 0) => {\r\n\t\tif (comparator[0].length === 1) {\r\n\t\t\tconst { name, bestHand } = comparator[0][0]\r\n\t\t\twinnerHierarchy = winnerHierarchy.concat([{ name, bestHand, handRank }])\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet filterableComparator = sortedComparator.map(el => el);\r\n\t\tconst frame = comparator[round];\r\n\t\tconst { winningFrame, losingFrame } = handleSnapshotFrame(frame);\r\n\t\t// find order of players who did not win hand\r\n\t\tif (losingFrame.length > 0) {\r\n\t\t\tconst lowerTierComparator = filterableComparator.map(frame => {\r\n\t\t\t\treturn frame.filter(snapshot => {\r\n\t\t\t\t\treturn losingFrame.some(snapshotToMatchName => {\r\n\t\t\t\t\t\treturn snapshotToMatchName.name === snapshot.name;\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t// Push the filtered comparator to the start of the losers queue. \r\n\t\t\tloserHierarchy = [lowerTierComparator].concat(loserHierarchy);\r\n\t\t}\r\n\t\t// if only one winner they are best hand\r\n\t\tif (winningFrame.length === 1) {\r\n\t\t\tconst { name, bestHand } = winningFrame[0];\r\n\t\t\twinnerHierarchy = winnerHierarchy.concat([{\r\n\t\t\t\tname,\r\n\t\t\t\tbestHand,\r\n\t\t\t\thandRank\r\n\t\t\t}])\r\n\t\t\t// find order of players who won hand if more than one\r\n\t\t} else if (round === (sortedComparator.length - 1)) {\r\n\t\t\tconst filteredWinnerSnapshots = winningFrame.map(snapshot => ({\r\n\t\t\t\tname: snapshot.name,\r\n\t\t\t\tbestHand: snapshot.bestHand,\r\n\t\t\t\thandRank\r\n\t\t\t}))\r\n\t\t\twinnerHierarchy = winnerHierarchy.concat([filteredWinnerSnapshots]);\r\n\t\t} else {\r\n\t\t\tconst higherTierComparator = filterableComparator.map(frame => {\r\n\t\t\t\treturn frame.filter(snapshot => {\r\n\t\t\t\t\treturn winningFrame.some(snapshotToMatchName => {\r\n\t\t\t\t\t\treturn snapshotToMatchName.name === snapshot.name;\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\tprocessComparator(higherTierComparator, (round + 1));\r\n\t\t}\r\n\t}\r\n\r\n\tconst processLowTierComparators = (loserHierarchyFrame) => {\r\n\t\tif (loserHierarchy.length > 0) {\r\n\t\t\tconst loserComparatorToProcess = loserHierarchyFrame[0];\r\n\t\t\tloserHierarchy = loserHierarchyFrame.slice(1);\r\n\t\t\tprocessComparator(loserComparatorToProcess);\r\n\t\t\tprocessLowTierComparators(loserHierarchy);\r\n\t\t}\r\n\t}\r\n\tprocessComparator(sortedComparator);\r\n\tprocessLowTierComparators(loserHierarchy);\r\n\treturn winnerHierarchy;\r\n}\r\n\r\n/*\r\n  Build ranking of hands of each player still in hand\r\n */\r\nconst buildPlayerRankings = (state) => {\r\n\r\n\t// only consider players still active in hand\r\n\tconst activePlayers = state.players.filter(player => !player.folded);\r\n\tlet hierarchy = [];\r\n\t// map of possible hand rankings\r\n\tconst rankMap = new Map([\r\n\t\t['Royal Flush', []],\r\n\t\t['Straight Flush', []],\r\n\t\t['Four Of A Kind', []],\r\n\t\t['Full House', []],\r\n\t\t['Flush', []],\r\n\t\t['Straight', []],\r\n\t\t['Three Of A Kind', []],\r\n\t\t['Two Pair', []],\r\n\t\t['Pair', []],\r\n\t\t['No Pair', []]\r\n\t]);\r\n\r\n\t// for each player find rank and add to ranking map\r\n\tactivePlayers.forEach((player, playerIndex) => {\r\n\t\tconst {\r\n\t\t\tname,\r\n\t\t\tshowDownHand: { bestHandRank, bestHand }\r\n\t\t} = player;\r\n\t\trankMap.get(bestHandRank).push({\r\n\t\t\tname,\r\n\t\t\tbestHand,\r\n\t\t\tplayerIndex\r\n\t\t})\r\n\t})\r\n\r\n\tfor (const [handRank, playersWhoHoldThisRank] of rankMap) {\r\n\t\tif (playersWhoHoldThisRank.length > 0) {\r\n\t\t\t// only one player can have Royal Flush so they would win regardless of the rest\r\n\t\t\tif (handRank === 'Royal Flush') {\r\n\t\t\t\tconst formattedPlayersWhoHoldThisRank = playersWhoHoldThisRank.map(player => ({\r\n\t\t\t\t\tname: player.name,\r\n\t\t\t\t\tbestHand: player.bestHand,\r\n\t\t\t\t\thandRank\r\n\t\t\t\t}))\r\n\t\t\t\thierarchy = hierarchy.concat(formattedPlayersWhoHoldThisRank);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// if only one player has a ranking that player is the best for that ranking\r\n\t\t\tif (playersWhoHoldThisRank.length === 1) {\r\n\t\t\t\tconst { name, bestHand } = playersWhoHoldThisRank[0];\r\n\t\t\t\thierarchy = hierarchy.concat([{\r\n\t\t\t\t\tname,\r\n\t\t\t\t\tbestHand,\r\n\t\t\t\t\thandRank\r\n\t\t\t\t}]);\r\n\t\t\t\t// if more than one player has same ranking must find which one has higher value\r\n\t\t\t} else if (playersWhoHoldThisRank.length > 1) {\r\n\t\t\t\tconst sortedComparator = createRankingsComparator(handRank, playersWhoHoldThisRank)\r\n\t\t\t\t\t.map((snapshot) => {\r\n\t\t\t\t\t\treturn snapshot.sort((a, b) => b.card.value - a.card.value)\r\n\t\t\t\t\t});\r\n\t\t\t\tconst winnerHierarchy = determinePlayerHandsHierarchy(sortedComparator, handRank);\r\n\t\t\t\thierarchy = hierarchy.concat(winnerHierarchy);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn hierarchy;\r\n}\r\n\r\n/*\r\n  Rank hands of players still active in hand\r\n */\r\nconst rankPlayersHands = (state, contestants) => {\r\n\r\n\t// map of possible hand rankings\r\n\tconst rankMap = new Map([\r\n\t\t['Royal Flush', []],\r\n\t\t['Straight Flush', []],\r\n\t\t['Four Of A Kind', []],\r\n\t\t['Full House', []],\r\n\t\t['Flush', []],\r\n\t\t['Straight', []],\r\n\t\t['Three Of A Kind', []],\r\n\t\t['Two Pair', []],\r\n\t\t['Pair', []],\r\n\t\t['No Pair', []]\r\n\t]);\r\n\r\n\tfor (let contestant of contestants) {\r\n\t\tconst playerIndex = state.players.findIndex(player => player.name === contestant);\r\n\t\tconst player = state.players[playerIndex];\r\n\t\t// if player is active in hand\r\n\t\tif (!player.folded) {\r\n\t\t\t// rank player hand\r\n\t\t\trankMap.get(player.showDownHand.bestHandRank).push({\r\n\t\t\t\tname: player.name,\r\n\t\t\t\tplayerIndex,\r\n\t\t\t\tbestHand: player.showDownHand.bestHand,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\treturn rankMap;\r\n}\r\n\r\n/*\r\n  Handle and get snapshot with winners and losers of hand\r\n */\r\nconst handleSnapshotFrame = (frame) => {\r\n\tconst highValue = frame[0].card.value;\r\n\tconst winningFrame = frame.filter(snapshot => snapshot.card.value === highValue);\r\n\tconst losingFrame = frame.filter(snapshot => snapshot.card.value < highValue);\r\n\treturn { winningFrame, losingFrame }\r\n}\r\n\r\n/*\r\n  Assign winnings to hand winners (handles pot splits too)\r\n */\r\nconst assignWinnings = (state, rankMap, prize) => {\r\n\tlet winnerFound = false;\r\n\r\n\t// find hand winners\r\n\trankMap.forEach((contestants, rank, map) => {\r\n\t\tif (!winnerFound) {\r\n\t\t\t// if only one player active in hand they win\r\n\t\t\tif (contestants.length === 1) {\r\n\t\t\t\twinnerFound = true\r\n\t\t\t\tconsole.log(\"Winner, \", contestants[0].name, \" , beating out the competition with a \", rank)\r\n\t\t\t\tstate = payWinnings(state, contestants, prize, rank)\r\n\t\t\t\t// if more than one player active in hand find winner\r\n\t\t\t} else if (contestants.length > 1) {\r\n\t\t\t\tconsole.log(contestants)\r\n\t\t\t\twinnerFound = true\r\n\t\t\t\t// get active players hand rankings\r\n\t\t\t\tconst winners = findHandWinner(createRankingsComparator(rank, contestants), rank)\r\n\t\t\t\t// if only one player wins they get all the pot\r\n\t\t\t\tif (winners.length === 1) {\r\n\t\t\t\t\tconsole.log(\"Winner, \", winners[0].name, \" , beating out the competition with a \", rank)\r\n\t\t\t\t\tstate = payWinnings(state, winners, prize, rank)\r\n\t\t\t\t\t// if multilple players win the pot is split amongst them\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"We have a tie! Split the pot amongst \", winners, \" Who will take the pot with their \", rank)\r\n\t\t\t\t\tstate = payWinnings(state, winners, prize, rank)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\treturn state\r\n}\r\n\r\n/*\r\n  Assign side pots when there are multiple winners for the same hand\r\n */\r\nconst assignSidePots = (state) => {\r\n\t// find winners of hand\r\n\tstate.playerHierarchy = buildPlayerRankings(state);\r\n\tconsole.log(\"Ultimate Player Hierarchy Determined:\")\r\n\tconsole.log(state.playerHierarchy);\r\n\r\n\t// assign each side pot to the corresponding winner\r\n\tfor (let sidePot of state.sidePots) {\r\n\t\tconst rankMap = rankPlayersHands(state, sidePot.contestants);\r\n\t\tstate = assignWinnings(state, rankMap, sidePot.potValue)\r\n\t}\r\n\r\n\tstate.players = state.players.map(player => ({\r\n\t\t...player,\r\n\t\troundEndChips: player.chips\r\n\t}));\r\n\r\n\treturn state\r\n}\r\n\r\n/*\r\n  Pay winnings to hand winners\r\n */\r\nconst payWinnings = (state, winners, prize, rank) => {\r\n\t// if only one winner they win all the pot\r\n\tif (winners.length === 1) {\r\n\t\tstate.showDownMessages = state.showDownMessages.concat([{\r\n\t\t\tusers: [winners[0].name],\r\n\t\t\tprize,\r\n\t\t\trank\r\n\t\t}]);\r\n\t\tconsole.log(\"Transferring \", prize, \" chips to \", winners[0].name)\r\n\t\tstate.players[winners[0].playerIndex].chips += prize\r\n\t\tstate.pot -= prize\r\n\t\t// if more than one winner split pot accordingly between them\r\n\t} else if (winners.length > 1) {\r\n\t\tconst overflow = prize % winners.length;\r\n\t\tconst splitPot = Math.floor(prize / winners.length)\r\n\t\tconsole.log(\"Mediating Tie. Total Prize \", prize, \" split into \", winners.length, \" portions with an overflow of \", overflow)\r\n\t\tstate.showDownMessages = state.showDownMessages.concat([{\r\n\t\t\tusers: winners.map(winner => winner.name),\r\n\t\t\tprize: splitPot,\r\n\t\t\trank\r\n\t\t}])\r\n\t\twinners.forEach(winner => {\r\n\t\t\tstate.players[winner.playerIndex].chips += splitPot\r\n\t\t\tstate.pot -= splitPot\r\n\t\t})\r\n\t}\r\n\treturn state\r\n}\r\n\r\n/*\r\n  Create hand rankings comparator to compare hand rankings\r\n */\r\nconst createRankingsComparator = (rank, playerData) => {\r\n\tlet comparator;\r\n\tswitch (rank) {\r\n\t\t// check if hand is Ten, Jack, Queen, King and Ace (all of same suit)\r\n\t\tcase ('Royal Flush'): {\r\n\t\t\tcomparator = Array.from({ length: 1 });\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator.push({\r\n\t\t\t\t\t// there can only be one royal flush which will be the winner regardless of other hand rankings\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is four cards all of the same denomination\r\n\t\tcase ('Four Of A Kind'): {\r\n\t\t\tcomparator = Array.from({ length: 2 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator[0].push({\r\n\t\t\t\t\t// four cards all of the same denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[0],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t\tcomparator[1].push({\r\n\t\t\t\t\t// last card is unmatched\r\n\t\t\t\t\tcard: playerData[index].bestHand[4],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is three cards of one denomination and two cards of another denomination\r\n\t\tcase ('Full House'): {\r\n\t\t\tcomparator = Array.from({ length: 2 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator[0].push({\r\n\t\t\t\t\t// three cards of one denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[0],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t\tcomparator[1].push({\r\n\t\t\t\t\t// two cards of another denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[3],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is three cards of one denomination and two cards of another denomination\r\n\t\t// or if all five cards are unmatched\r\n\t\tcase ('Flush'):\r\n\t\tcase ('No Pair'): {\r\n\t\t\tcomparator = Array.from({ length: 5 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tfor (let i = 0; i < 5; i++) {\r\n\t\t\t\t\tcomparator[i].push({\r\n\t\t\t\t\t\t// check all 5 cards of a flush or no-pair\r\n\t\t\t\t\t\tcard: playerData[index].bestHand[i],\r\n\t\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is three cards of the same denomination and two unmatched cards\r\n\t\tcase ('Three Of A Kind'): {\r\n\t\t\tcomparator = Array.from({ length: 3 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator[0].push({\r\n\t\t\t\t\t// three cards of the same denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[0],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t\tcomparator[1].push({\r\n\t\t\t\t\t// fourth card is unmatched\r\n\t\t\t\t\tcard: playerData[index].bestHand[3],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t\tcomparator[2].push({\r\n\t\t\t\t\t// fifth card is unmatched\r\n\t\t\t\t\tcard: playerData[index].bestHand[4],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is five cards of any suit in sequence\r\n\t\t// or if hand is five cards in sequence (all of same suit)\r\n\t\tcase ('Straight'):\r\n\t\tcase ('Straight Flush'): {\r\n\t\t\tcomparator = Array.from({ length: 1 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator[0].push({\r\n\t\t\t\t\t// check highest card of a straight as it will determine the straight value\r\n\t\t\t\t\tcard: playerData[index].bestHand[0],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is two sets of two cards of the same denomination and any fifth card\r\n\t\tcase ('Two Pair'): {\r\n\t\t\tcomparator = Array.from({ length: 3 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator[0].push({\r\n\t\t\t\t\t// two cards of the same denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[0],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t\tcomparator[1].push({\r\n\t\t\t\t\t// another two cards of the same denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[2],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t\tcomparator[2].push({\r\n\t\t\t\t\t// fifth unmatched card\r\n\t\t\t\t\tcard: playerData[index].bestHand[4],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is two cards of the same denomination and three unmatched cards\r\n\t\tcase ('Pair'): {\r\n\t\t\tcomparator = Array.from({ length: 4 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator[0].push({\r\n\t\t\t\t\t// two cards of the same denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[0],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t\tcomparator[1].push({\r\n\t\t\t\t\t// third unmtached card\r\n\t\t\t\t\tcard: playerData[index].bestHand[2],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t\tcomparator[2].push({\r\n\t\t\t\t\t// fourth unmtached card\r\n\t\t\t\t\tcard: playerData[index].bestHand[3],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t\tcomparator[3].push({\r\n\t\t\t\t\t// fifth unmtached card\r\n\t\t\t\t\tcard: playerData[index].bestHand[4],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tdefault: throw Error('Recieved unfamiliar rank argument in createRankingsComparator()');\r\n\t}\r\n\treturn comparator\r\n}\r\n\r\n/*\r\n  Find current hand winner\r\n */\r\nconst findHandWinner = (comparator, rank) => {\r\n\tlet winners;\r\n\tif (rank === 'Royal Flush') return comparator\r\n\tfor (let i = 0; i < comparator.length; i++) {\r\n\t\tlet highValue = 0;\r\n\t\tlet losers = [];\r\n\t\t// sort player rankings comparator \r\n\t\twinners = comparator[i].sort((a, b) => b.card.value - a.card.value).reduce((acc, cur, index) => {\r\n\t\t\t// add player with higher ranking hands first\r\n\t\t\tif (cur.card.value > highValue) {\r\n\r\n\t\t\t\thighValue = cur.card.value;\r\n\t\t\t\tacc.push({\r\n\t\t\t\t\tname: cur.name,\r\n\t\t\t\t\tplayerIndex: cur.playerIndex,\r\n\t\t\t\t});\r\n\t\t\t\treturn acc;\r\n\t\t\t} else if (cur.card.value === highValue) {\r\n\t\t\t\tacc.push({\r\n\t\t\t\t\tname: cur.name,\r\n\t\t\t\t\tplayerIndex: cur.playerIndex,\r\n\t\t\t\t});\r\n\t\t\t\treturn acc;\r\n\t\t\t\t// then add non active players (back of list)\r\n\t\t\t} else if (cur.card.value < highValue) {\r\n\t\t\t\tlosers.push(cur.name);\r\n\t\t\t\treturn acc;\r\n\t\t\t}\r\n\t\t}, [])\r\n\r\n\t\tif (winners.length === 1 || i === comparator.length) {\r\n\t\t\treturn winners\r\n\t\t} else {\r\n\t\t\tif (losers.length >= 1) {\r\n\t\t\t\tlosers.forEach((nameToExtract) => {\r\n\t\t\t\t\tcomparator = comparator.map(snapshot => snapshot.filter((el) => el.name !== nameToExtract));\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn winners\r\n\r\n}\r\n\r\n/*\r\n  Check if hand is a Flush\r\n */\r\nconst checkIfFlush = (suitHistogram) => {\r\n\tlet isFlush;\r\n\tlet flushedSuit;\r\n\t// check if all five cards have the same suit\r\n\tfor (let suit in suitHistogram) {\r\n\t\tif (suitHistogram[suit] >= 5) {\r\n\t\t\treturn {\r\n\t\t\t\tisFlush: true,\r\n\t\t\t\tflushedSuit: suit,\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\tisFlush: false,\r\n\t\tflushedSuit: null,\r\n\t}\r\n}\r\n\r\n/*\r\n  Check if hand is a Royal Flush\r\n */\r\nconst checkIfRoyalFlush = (flushMatchCards) => {\r\n\t// check if hand is Ten, Jack, Queen, King and Ace (all of same suit)\r\n\tif ((flushMatchCards[0].value === 13) &&\r\n\t\t(flushMatchCards[1].value === 12) &&\r\n\t\t(flushMatchCards[2].value === 11) &&\r\n\t\t(flushMatchCards[3].value === 10) &&\r\n\t\t(flushMatchCards[4].value === 10)) {\r\n\t\treturn true\r\n\t} else { return false }\r\n}\r\n\r\n/*\r\n  Check if hand is a Straight\r\n */\r\nconst checkIfStraight = (valueSet) => {\r\n\t// if less than five cards are valuable to the hand it is not a straight\r\n\tif (valueSet.length < 5) return false\r\n\tlet numConcurrentCards = 0;\r\n\tlet concurrentCardValues = [];\r\n\t// check if hand is five cards of any suit in sequence\r\n\tfor (let i = 1; i < valueSet.length; i++) {\r\n\t\tif (numConcurrentCards === 5) {\r\n\t\t\treturn {\r\n\t\t\t\tisStraight: true,\r\n\t\t\t\tconcurrentCardValues\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((valueSet[i] - valueSet[i - 1]) === -1) {\r\n\t\t\tif (numConcurrentCards === 0) {\r\n\t\t\t\tnumConcurrentCards = 2;\r\n\t\t\t\tconcurrentCardValues.push(valueSet[i - 1]);\r\n\t\t\t\tconcurrentCardValues.push(valueSet[i]);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tnumConcurrentCards++;\r\n\t\t\t\tconcurrentCardValues.push(valueSet[i]);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tnumConcurrentCards = 0;\r\n\t\t\tconcurrentCardValues = [];\r\n\t\t}\r\n\t}\r\n\tif (numConcurrentCards >= 5) {\r\n\t\treturn {\r\n\t\t\tisStraight: true,\r\n\t\t\tconcurrentCardValues\r\n\t\t}\r\n\t} else {\r\n\t\t// check if is straight with Ace, two, three, four, five\r\n\t\tif (valueSet[0] === 13) {\r\n\t\t\tlet { isLowStraight, concurrentCardValuesLow } = checkIfLowerStraight(cloneDeep(valueSet));\r\n\r\n\t\t\tif (isLowStraight) return {\r\n\t\t\t\tisStraight: true,\r\n\t\t\t\tisLowStraight,\r\n\t\t\t\tconcurrentCardValues,\r\n\t\t\t\tconcurrentCardValuesLow,\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tisStraight: false,\r\n\t\t\tisLowStraight: false,\r\n\t\t\tconcurrentCardValues,\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/*\r\n  Check if hand is a Straight Flush\r\n */\r\nconst checkIfStraightFlush = (flushMatchCards) => {\r\n\t// check if hand is five cards in sequence (all of same suit)\r\n\tconst valueSet = generateValueSet(flushMatchCards);\r\n\tconst { isStraight, isLowStraight, concurrentCardValues, concurrentCardValuesLow } = checkIfStraight(valueSet);\r\n\treturn {\r\n\t\tisStraightFlush: isStraight,\r\n\t\tisLowStraightFlush: isLowStraight,\r\n\t\tconcurrentSFCardValues: concurrentCardValues,\r\n\t\tconcurrentSFCardValuesLow: concurrentCardValuesLow,\r\n\t}\r\n}\r\n\r\n/*\r\n  Check how many hand rankings have occured and with what frequence \r\n  and order\r\n */\r\nconst checkFrequencyHistogram = (hand, frequencyHistogram) => {\r\n\r\n\t// set hand rankings to not seen \r\n\tlet isFourOfAKind = false;\r\n\tlet isFullHouse = false\r\n\tlet isThreeOfAKind = false;\r\n\tlet isTwoPair = false;\r\n\tlet isPair = false;\r\n\tlet numTripples = 0;\r\n\tlet numPairs = 0;\r\n\tlet frequencyHistogramMetaData = {\r\n\t\tpairs: [],\r\n\t\ttripples: [],\r\n\t\tquads: [],\r\n\t}\r\n\t// check if hand is four cards all of the same denomination\r\n\tfor (let cardFace in frequencyHistogram) {\r\n\t\tif (frequencyHistogram[cardFace] === 4) {\r\n\t\t\tisFourOfAKind = true\r\n\t\t\tfrequencyHistogramMetaData.quads.push({\r\n\t\t\t\tface: cardFace,\r\n\t\t\t\tvalue: VALUE_MAP[cardFace]\r\n\t\t\t})\r\n\t\t}\r\n\t\t// check if hand is three cards of the same denomination and two unmatched cards\r\n\t\tif (frequencyHistogram[cardFace] === 3) {\r\n\t\t\tisThreeOfAKind = true\r\n\t\t\tnumTripples++\r\n\t\t\tfrequencyHistogramMetaData.tripples.push({\r\n\t\t\t\tface: cardFace,\r\n\t\t\t\tvalue: VALUE_MAP[cardFace]\r\n\t\t\t})\r\n\t\t}\r\n\t\t// check if hand is two cards of the same denomination and three unmatched cards\r\n\t\tif (frequencyHistogram[cardFace] === 2) {\r\n\t\t\tisPair = true\r\n\t\t\tnumPairs++\r\n\t\t\tfrequencyHistogramMetaData.pairs.push({\r\n\t\t\t\tface: cardFace,\r\n\t\t\t\tvalue: VALUE_MAP[cardFace]\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t// sort histogram from best hand to worst hand\r\n\tfrequencyHistogramMetaData.pairs = frequencyHistogramMetaData.pairs.map(el => el).sort((a, b) => b.value - a.value)\r\n\tfrequencyHistogramMetaData.tripples = frequencyHistogramMetaData.tripples.map(el => el).sort((a, b) => b.value - a.value)\r\n\tfrequencyHistogramMetaData.quads = frequencyHistogramMetaData.quads.map(el => el).sort((a, b) => b.value - a.value)\r\n\r\n\t// check if hand is three cards of one denomination and two cards of another denomination (full house)\r\n\tif ((numTripples >= 2) || (numPairs >= 1 && numTripples >= 1)) {\r\n\t\tisFullHouse = true\r\n\t}\r\n\t// check if hand is two sets of two cards of the same denomination and any fifth card (Two Pairs)\r\n\tif (numPairs >= 2) {\r\n\t\tisTwoPair = true\r\n\t}\r\n\r\n\treturn {\r\n\t\tisFourOfAKind,\r\n\t\tisFullHouse,\r\n\t\tisThreeOfAKind,\r\n\t\tisTwoPair,\r\n\t\tisPair,\r\n\t\tfrequencyHistogramMetaData\r\n\t}\r\n\r\n}\r\n\r\n/*\r\n  Check if hand is straight with Ace, two, three, four, five\r\n */\r\nconst checkIfLowerStraight = (valueSetCopy) => {\r\n\tlet numConcurrentCards = 0;\r\n\tlet concurrentCardValuesLow = [];\r\n\t// Convert Ace which has highest value of 13 to lowest value 0 from which straight would start\r\n\tvalueSetCopy[0] = 0;\r\n\t// sort card values\r\n\tconst sortedValueSetCopy = valueSetCopy.map(el => el).sort((a, b) => a - b);\r\n\t// check if Ace, two, three, four, five are found\r\n\tfor (let i = 1; i < 5; i++) {\r\n\t\tif (numConcurrentCards >= 5) {\r\n\t\t\treturn {\r\n\t\t\t\tisLowStraight: true,\r\n\t\t\t\tconcurrentCardValuesLow,\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((sortedValueSetCopy[i] - sortedValueSetCopy[i - 1]) === 1) {\r\n\t\t\tif (numConcurrentCards === 0) {\r\n\t\t\t\tnumConcurrentCards = 2;\r\n\t\t\t\tconcurrentCardValuesLow.push(sortedValueSetCopy[i - 1]);\r\n\t\t\t\tconcurrentCardValuesLow.push(sortedValueSetCopy[i]);\r\n\t\t\t} else {\r\n\t\t\t\tnumConcurrentCards++;\r\n\t\t\t\tconcurrentCardValuesLow.push(sortedValueSetCopy[i]);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tnumConcurrentCards = 0;\r\n\t\t\tconcurrentCardValuesLow = [];\r\n\t\t}\r\n\t}\r\n\tif (numConcurrentCards >= 5) {\r\n\t\treturn {\r\n\t\t\tisLowStraight: true,\r\n\t\t\tconcurrentCardValuesLow,\r\n\t\t}\r\n\t} else {\r\n\t\treturn {\r\n\t\t\tisLowStraight: false,\r\n\t\t\tconcurrentCardValuesLow,\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/*\r\n  Generate set of five cards that add value to hand\r\n */\r\nconst generateValueSet = (hand) => {\r\n\treturn Array.from(new Set(hand.map(cardInfo => cardInfo.value)))\r\n}\r\n\r\nexport { makeDeckOfCards, shuffleCards, dealPlayerCards, getCards, dealFlopCards, dealTurnCards, dealRiverCards, dealOtherCommunityCards, playerShowDown, checkIfFlush, checkIfRoyalFlush, checkIfStraightFlush, checkIfStraight, checkFrequencyHistogram, generateValueSet };\r\n\r\n","import { dealFlopCards, dealRiverCards, dealTurnCards, playerShowDown } from './cardsService.js';\r\nimport { chooseNextActivePlayer } from './playersService.js';\r\n\r\n/**\r\n* The betService provides all services players\r\n* need to make bets. It also handles calculations\r\n* relating to bets and the betting pot.\r\n*/\r\n\r\nconst calculateBlindIndices = (dealerIndex, numPlayers) => {\r\n\treturn ({\r\n\t\tbigBlindIndex: (dealerIndex + 2) % numPlayers,\r\n\t\tsmallBlindIndex: (dealerIndex + 1) % numPlayers,\r\n\t});\r\n}\r\n\r\nconst anteUpBlinds = (players, blindIndices, minBet) => {\r\n\tconst { bigBlindIndex, smallBlindIndex } = blindIndices;\r\n\tplayers[bigBlindIndex].bet = minBet;\r\n\tplayers[bigBlindIndex].chips = players[bigBlindIndex].chips - minBet;\r\n\tplayers[smallBlindIndex].bet = minBet / 2;\r\n\tplayers[smallBlindIndex].chips = players[smallBlindIndex].chips - (minBet / 2);\r\n\treturn players\r\n}\r\n\r\nconst calculateMinBet = (highBet, playerChipsStack, playerBet) => {\r\n\tconst playerTotalChips = playerChipsStack + playerBet\r\n\tif (playerTotalChips < highBet) {\r\n\t\treturn playerTotalChips;\r\n\t} else {\r\n\t\treturn highBet;\r\n\t}\r\n}\r\n\r\n/* \r\nDetermines the integrity of all bets.\r\n*/\r\nconst manageBet = (state, bet, min, max) => {\r\n\tif (bet < min) {\r\n\t\tstate.betInputValue = min;\r\n\t\treturn console.log(\"Invalid Bet\")\r\n\t}\r\n\tif (bet > max) {\r\n\t\tstate.betInputValue = max;\r\n\t\treturn console.log(\"Invalid Bet\")\r\n\t}\r\n\r\n\tif (bet > state.highBet) {\r\n\t\t// minbet and highbet may be condensed to a single property\r\n\t\tstate.highBet = bet;\r\n\t\tstate.minBet = state.highBet;\r\n\t\tfor (let player of state.players) {\r\n\t\t\tif (!player.folded || !player.chips === 0) {\r\n\t\t\t\tplayer.betReconciled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst activePlayer = state.players[state.activePlayerIndex];\r\n\tconst subtractableChips = bet - activePlayer.bet;\r\n\tactivePlayer.bet = bet;\r\n\r\n\tactivePlayer.chips = activePlayer.chips - subtractableChips;\r\n\tif (activePlayer.chips === 0) {\r\n\t\tactivePlayer.allIn = true;\r\n\t\tstate.numPlayersAllIn++\r\n\t}\r\n\tactivePlayer.betReconciled = true;\r\n\treturn chooseNextActivePlayer(state)\r\n}\r\n\r\nconst managePlayerFold = (state) => {\r\n\tconst activePlayer = state.players[state.activePlayerIndex];\r\n\tactivePlayer.folded = true;\r\n\tactivePlayer.betReconciled = true;\r\n\tstate.numPlayersFolded++\r\n\tstate.numPlayersActive--\r\n\r\n\tconst nextState = chooseNextActivePlayer(state)\r\n\treturn nextState\r\n}\r\n\r\nconst managePhaseShift = (state) => {\r\n\tswitch (state.phase) {\r\n\t\tcase ('betting1'): {\r\n\t\t\tstate.phase = 'flop';\r\n\t\t\treturn dealFlopCards(remakePot(state));\r\n\t\t}\r\n\t\tcase ('betting2'): {\r\n\t\t\tstate.phase = 'turn';\r\n\t\t\treturn dealTurnCards(remakePot(state));\r\n\t\t}\r\n\t\tcase ('betting3'): {\r\n\t\t\tstate.phase = 'river'\r\n\t\t\treturn dealRiverCards(remakePot(state));\r\n\t\t}\r\n\t\tcase ('betting4'): {\r\n\t\t\tstate.phase = 'showdown'\r\n\t\t\treturn playerShowDown(remakePot(state));\r\n\t\t}\r\n\t\tdefault: throw Error(\"managePhaseShift() called from non-betting phase\")\r\n\t}\r\n}\r\n\r\n/* \r\nCombine sidepots into a single pot to save resources.\r\n*/\r\nconst remakePot = (state) => {\r\n\tfor (let player of state.players) {\r\n\r\n\t\tstate.pot = state.pot + player.bet;\r\n\r\n\t\tplayer.sidePotStack = player.bet;\r\n\t\tplayer.betReconciled = false;\r\n\t}\r\n\r\n\t// condense pots as processing each one requires expensive card comparator functions\r\n\tstate = condensePots(calculatePots(state, state.players));\r\n\r\n\tfor (let player of state.players) {\r\n\t\tplayer.currentRoundChipsInvested += player.bet;\r\n\t\tplayer.bet = 0 // reset all player bets to 0 for the start of the next round\r\n\t}\r\n\r\n\tstate.minBet = 0; // reset markers which control min/max bet validation\r\n\tstate.highBet = 0;\r\n\tstate.betInputValue = 0;\r\n\treturn state\r\n}\r\n\r\n/* \r\n Determine which players are included in the current pot.\r\n*/\r\nconst calculatePots = (state, playerStacks) => {\r\n\t// remove players who did not bet from pot\r\n\tconst investedPlayers = playerStacks.filter(player => player.sidePotStack > 0)\r\n\tif (investedPlayers.length === 0) {\r\n\t\treturn state\r\n\t}\r\n\tif (investedPlayers.length === 1) {\r\n\t\t// refund players who bet in excess of pot\r\n\t\tconst playerToRefund = state.players[state.players.findIndex(player => player.name === investedPlayers[0].name)];\r\n\t\tplayerToRefund.chips = playerToRefund.chips + investedPlayers[0].sidePotStack;\r\n\t\tstate.pot -= investedPlayers[0].sidePotStack\r\n\t\treturn state\r\n\t}\r\n\t// sort players\r\n\tconst ascBetPlayers = investedPlayers.sort((a, b) => a.sidePotStack - b.sidePotStack);\r\n\tconst smallStackValue = ascBetPlayers[0].sidePotStack;\r\n\r\n\tconst builtSidePot = ascBetPlayers.reduce((acc, cur) => {\r\n\t\tif (!cur.folded) {\r\n\t\t\tacc.contestants.push(cur.name);\r\n\t\t}\r\n\t\tacc.potValue = acc.potValue + smallStackValue;\r\n\t\tcur.sidePotStack = cur.sidePotStack - smallStackValue;\r\n\t\treturn acc\r\n\t}, {\r\n\t\tcontestants: [],\r\n\t\tpotValue: 0,\r\n\t});\r\n\tstate.sidePots.push(builtSidePot);\r\n\treturn calculatePots(state, ascBetPlayers)\r\n\r\n}\r\n\r\n/* \r\n Condenses mutiple pots into a single pot. \r\n*/\r\nconst condensePots = (state) => {\r\n\tif (state.sidePots.length > 1) {\r\n\t\tfor (let i = 0; i < state.sidePots.length; i++) {\r\n\t\t\tfor (let n = i + 1; n < state.sidePots.length; n++) {\r\n\t\t\t\tif (arrayIdentical(state.sidePots[i].contestants, state.sidePots[n].contestants)) {\r\n\t\t\t\t\tstate.sidePots[i].potValue = state.sidePots[i].potValue + state.sidePots[n].potValue;\r\n\t\t\t\t\tstate.sidePots = state.sidePots.filter((el, index) => index !== n);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn state\r\n}\r\n\r\nconst arrayIdentical = (arr1, arr2) => {\r\n\r\n\tif (arr1.length !== arr2.length) {\r\n\t\treturn false\r\n\t}\r\n\treturn arr1.map(el => arr2.includes(el)).filter(bool => bool !== true).length !== 0 ? false : true;\r\n}\r\nexport {\r\n\tcalculateBlindIndices,\r\n\tanteUpBlinds,\r\n\tcalculateMinBet,\r\n\tmanageBet,\r\n\tmanagePlayerFold,\r\n\tmanagePhaseShift,\r\n\tremakePot\r\n};\r\n\r\n","import React from 'react';\r\n\r\n/**\r\n * Controller functional component which represents the base \r\n * of the raise bar users can perform  call, fold or raise\r\n * actions through.\r\n */\r\nfunction Controller({\r\n  handle: { id, value, percent },\r\n  getHandleProps\r\n}) {\r\n  return (\r\n    <div\r\n      style={{\r\n        left: `${percent}%`,\r\n        position: 'absolute',\r\n        marginLeft: -15,\r\n        marginTop: 25,\r\n        zIndex: 2,\r\n        width: 50,\r\n        height: 25,\r\n        border: \"3px solid #7177A3\",\r\n        textAlign: 'center',\r\n        cursor: 'pointer',\r\n        borderRadius: \"15px\",\r\n        backgroundColor: '#FFEB49',\r\n        color: '#aaa',\r\n      }}\r\n      {...getHandleProps(id)}\r\n    >\r\n      <div style={{ display: 'flex', textShadow: '2px 2px 8px rgba(0,0,0,0.95)', justifyContent: 'center', fontFamily: 'Roboto', fontSize: 11, marginTop: 30 }} >\r\n        {value}\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Controller;","/**\r\n * Slider and Raise Rail  \r\n*/\r\n\r\nconst sliderStyle = {\r\n  position: 'relative',\r\n  width: '100%',\r\n  height: 80,\r\n}\r\n\r\nconst railStyle = {\r\n  position: 'absolute',\r\n  width: '100%',\r\n  height: 10,\r\n  marginTop: 35,\r\n  borderRadius: 5,\r\n  backgroundColor: '#7177A3',\r\n}\r\n\r\nexport { sliderStyle, railStyle }\r\n\r\n","import React from 'react';\r\n\r\n/**\r\n * Tracker functional component which tracks the raise \r\n * slider bar users can perform bets/raises through.\r\n */\r\nfunction Tracker({ source, target, getTrackProps }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        height: 10,\r\n        zIndex: 1,\r\n        marginTop: 35,\r\n        backgroundColor: '#FFEB49',\r\n        borderRadius: 5,\r\n        cursor: 'pointer',\r\n        left: `${source.percent}%`,\r\n        width: `${target.percent - source.percent}%`,\r\n      }}\r\n      {...getTrackProps()}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Tracker;","import React from 'react';\r\nimport { Handles, Rail, Slider, Tracks } from 'react-compound-slider';\r\nimport Handle from \"../components/raiseBar/Controller\";\r\nimport { railStyle, sliderStyle } from \"../components/raiseBar/styles\";\r\nimport Track from \"../components/raiseBar/Tracker\";\r\nimport {\r\n\tcalculateMinBet\r\n} from './betService.js';\r\n\r\n/** \r\n* The uiService provides services to handle\r\n* UI animations assignments and renderings.\r\n*/\r\n\r\n\r\n/* \r\n Set next game phase\r\n*/\r\nconst makePhaseStatement = (phase) => {\r\n\tswitch (phase) {\r\n\t\tcase ('loading'): return 'Finding a Table, Please Wait';\r\n\t\tcase ('initialDeal'): return 'Dealing out the cards';\r\n\t\tcase ('betting1'): return 'Betting 1';\r\n\t\tcase ('flop'): return 'Flop';\r\n\t\tcase ('betting2'): return 'Flop';\r\n\t\tcase ('turn'): return 'Turn';\r\n\t\tcase ('betting3'): return 'Turn';\r\n\t\tcase ('river'): return 'River';\r\n\t\tcase ('betting4'): return 'River';\r\n\t\tcase ('showdown'): return 'Show Your Cards!';\r\n\t\tdefault: throw Error('Unfamiliar phase returned from makePhaseStatement()');\r\n\t}\r\n}\r\n\r\n/* \r\n Render Action Button text (Fold, Call, Raise, All in, etc.)\r\n*/\r\nconst makeActionButtonText = (highBet, betInputValue, activePlayer) => {\r\n\tif ((highBet === 0) && (betInputValue === 0)) {\r\n\t\treturn 'Check'\r\n\t} else if ((highBet === betInputValue)) {\r\n\t\treturn 'Call'\r\n\t} else if ((betInputValue < highBet) || (betInputValue === activePlayer.chips + activePlayer.bet)) {\r\n\t\treturn 'All-in!'\r\n\t} else if ((betInputValue > highBet)) {\r\n\t\treturn 'Raise'\r\n\t}\r\n}\r\n\r\n/* \r\n Show player winning after each hand\r\n*/\r\nconst makeNetPlayerEarnings = (endChips, startChips) => {\r\n\tconst netChipEarnings = (endChips - startChips);\r\n\tconst win = (netChipEarnings > 0);\r\n\tconst none = (netChipEarnings === 0);\r\n\treturn (\r\n\t\t<div class={`showdown-player-earnings ${(win) ? ('positive') : (none) ? ('') : ('negative')}`}>\r\n\t\t\t{`${(win) ? ('+') : ('')}${netChipEarnings}`}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n/* \r\n Show Showdown messages\r\n*/\r\nconst makeShowdownMessages = (showDownMessages) => {\r\n\treturn showDownMessages.map((message, index) => {\r\n\t\tconst { users, prize, rank } = message;\r\n\t\tif (users.length > 1) {\r\n\t\t\treturn (\r\n\t\t\t\t<React.Fragment key={index}>\r\n\t\t\t\t\t<div className=\"message-div\">\r\n\t\t\t\t\t\t<span className=\"message-user\">\r\n\t\t\t\t\t\t\t{`${users.length} players `}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span className=\"message-content\">\r\n\t\t\t\t\t\t\t{`split the pot with a `}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span className=\"message-rank\">\r\n\t\t\t\t\t\t\t{`${rank}!`}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tusers.map(user => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index + user} class=\"message-div\">\r\n\t\t\t\t\t\t\t\t\t<span className=\"message-player\">\r\n\t\t\t\t\t\t\t\t\t\t{`${user} `}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"message-content\">\r\n\t\t\t\t\t\t\t\t\t\t{`takes `}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"message-earnings\">\r\n\t\t\t\t\t\t\t\t\t\t{`${prize} chips `}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"message-content\">\r\n\t\t\t\t\t\t\t\t\t\t{`from the pot.`}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t)\r\n\t\t} else if (users.length === 1) {\r\n\t\t\treturn (\r\n\t\t\t\t<div key={index} className=\"message-div\">\r\n\t\t\t\t\t<span className=\"message-player\">\r\n\t\t\t\t\t\t{`${users[0]} `}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span className=\"message-content\">\r\n\t\t\t\t\t\t{`wins `}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span className=\"message-earnings\">\r\n\t\t\t\t\t\t{`${prize} chips `}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span className=\"message-content\">\r\n\t\t\t\t\t\t{`from the pot with a `}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span className=\"message-rank\">\r\n\t\t\t\t\t\t{`${rank}!`}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t})\r\n}\r\n\r\n/* \r\n Render User Action menu for actions and slider (for raising)\r\n*/\r\nconst makeActionMenu = (highBet, players, activePlayerIndex, phase, changeSliderInputFn) => {\r\n\tconst min = calculateMinBet(highBet, players[activePlayerIndex].chips, players[activePlayerIndex].bet)\r\n\tconst max = players[activePlayerIndex].chips + players[activePlayerIndex].bet\r\n\treturn (\r\n\t\t(phase === 'betting1' || phase === 'betting2' || phase === 'betting3' || phase === 'betting4') ? (players[activePlayerIndex].robot) ? (<h4 className=\"current-move-head\"> {`Current Move: ${players[activePlayerIndex].name}`}</h4>) : (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Slider\r\n\t\t\t\t\trootStyle={sliderStyle}\r\n\t\t\t\t\tdomain={[min, max]}\r\n\t\t\t\t\tvalues={[min]}\r\n\t\t\t\t\tstep={1}\r\n\r\n\t\t\t\t\tonChange={changeSliderInputFn}\r\n\t\t\t\t\tmode={2}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Rail>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t({ getRailProps }) => (\r\n\t\t\t\t\t\t\t\t<div style={railStyle} {...getRailProps()} />\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Rail>\r\n\t\t\t\t\t<Handles>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t({ handles, getHandleProps }) => (\r\n\t\t\t\t\t\t\t\t<div className='slider-handles'>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\thandles.map(handle => (\r\n\t\t\t\t\t\t\t\t\t\t\t<Handle\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={handle.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\thandle={handle}\r\n\t\t\t\t\t\t\t\t\t\t\t\tgetHandleProps={getHandleProps}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Handles>\r\n\t\t\t\t\t<Tracks right={false}>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t({ tracks, getTrackProps }) => (\r\n\t\t\t\t\t\t\t\t<div className='slider-tracks'>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttracks.map(\r\n\t\t\t\t\t\t\t\t\t\t\t({ id, source, target }) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Track\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsource={source}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget={target}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tgetTrackProps={getTrackProps}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Tracks>\r\n\t\t\t\t</Slider>\r\n\t\t\t</React.Fragment>\r\n\t\t) : null\r\n\t)\r\n}\r\n\r\nexport {\r\n\tmakePhaseStatement,\r\n\tmakeShowdownMessages,\r\n\tmakeNetPlayerEarnings,\r\n\tmakeActionMenu,\r\n\tmakeActionButtonText\r\n};\r\n\r\n","import {\r\n\tcalculateMinBet, manageBet,\r\n\tmanagePlayerFold\r\n} from './betService.js';\r\nimport {\r\n\tcheckFrequencyHistogram,\r\n\tcheckIfFlush,\r\n\tcheckIfRoyalFlush,\r\n\tcheckIfStraight,\r\n\tcheckIfStraightFlush,\r\n\tgenerateValueSet\r\n} from './cardsService.js';\r\nimport {\r\n\tmakeActionButtonText\r\n} from './uiService.js';\r\n\r\n/**\r\n* The aiService provides key services for the \r\n* functinality of Ai players. It handles \r\n* how the Ai determines what move to make.\r\n*/\r\n\r\n/* \r\nThe main function to handle the behavior of an Ai player in a given situation \r\n*/\r\nconst aiHandler = (state, moveAnimationState) => {\r\n\tconst { highBet } = state\r\n\tconst activePlayer = state.players[state.activePlayerIndex];\r\n\tconst min = calculateMinBet(highBet, activePlayer.chips, activePlayer.bet)\r\n\tconst max = activePlayer.chips + activePlayer.bet\r\n\tconst totalInvestment = activePlayer.chips + activePlayer.bet + activePlayer.stackInvestment;\r\n\tconst investmentRequiredToRemain = (highBet / totalInvestment) * 100;\r\n\tconst descendingSortHand = activePlayer.cards.concat(state.communityCards).sort((a, b) => b.value - a.value)\r\n\tconst { frequencyHistogram, suitHistogram } = makeHistogram(descendingSortHand)\r\n\tconst stakes = groupStakes(investmentRequiredToRemain);\r\n\tconst preFlopValues = activePlayer.cards.map(el => el.value)\r\n\tconst highCard = Math.max(...preFlopValues)\r\n\tconst lowCard = Math.min(...preFlopValues)\r\n\tswitch (state.phase) {\r\n\r\n\t\t// determine Ai action for round 1 of betting\r\n\t\tcase ('betting1'): {\r\n\t\t\t// use specific factors to determine fold, call/check or bet\r\n\t\t\tconst suited = Object.entries(suitHistogram).find(keyValuePair => keyValuePair[1] === 2)\r\n\t\t\tconst straightGap = (highCard - lowCard <= 4)\r\n\t\t\tconst { callLimit, raiseChance, raiseRange } = createPreFlopDeterminant(highCard, lowCard, suited, straightGap)\r\n\t\t\tconst willCall = (betting_hierarchy[stakes] <= betting_hierarchy[callLimit])\r\n\t\t\tconst callValue = (activePlayer.chips + activePlayer.bet >= highBet) ? highBet : activePlayer.chips + activePlayer.bet\r\n\t\t\tif (willCall) {\r\n\t\t\t\tif (willRaise(raiseChance)) {\r\n\t\t\t\t\tconst determinedRaiseRange = raiseRange[Math.floor(Math.random() * (raiseRange.length - 0)) + 0];\r\n\t\t\t\t\tconst wantRaise = (betting_hierarchy[stakes] <= betting_hierarchy[determinedRaiseRange])\r\n\t\t\t\t\tif (wantRaise) {\r\n\t\t\t\t\t\tlet betValue = Math.floor(chooseBetProportion(determinedRaiseRange) * activePlayer.chips)\r\n\t\t\t\t\t\tif (betValue < highBet) {\r\n\t\t\t\t\t\t\tif (highBet < max) {\r\n\t\t\t\t\t\t\t\tbetValue = highBet;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (betValue > max)\r\n\t\t\t\t\t\t\tactivePlayer.canRaise = false\r\n\t\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, betValue, activePlayer)} ${betValue}`);\r\n\t\t\t\t\t\treturn manageBet(state, betValue, min, max);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// will not render the bet value if it's a \"check\"\r\n\t\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\r\n\t\t\t\t\t\treturn manageBet(state, callValue, min, max);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\r\n\t\t\t\t\treturn manageBet(state, callValue, min, max);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tmoveAnimationState(state.activePlayerIndex, `FOLD`);\r\n\t\t\t\treturn managePlayerFold(state)\r\n\t\t\t}\r\n\t\t}\r\n\t\t// determine Ai action for subsequent betting rounds\r\n\t\tcase ('betting2'):\r\n\t\tcase ('betting3'):\r\n\t\tcase ('betting4'):\r\n\t\t\t// update freq histogram used to track hands\r\n\t\t\tconst {\r\n\r\n\t\t\t\tisPair,\r\n\t\t\t\tisTwoPair,\r\n\t\t\t\tisThreeOfAKind,\r\n\t\t\t\tisFourOfAKind,\r\n\t\t\t\tisFullHouse,\r\n\t\t\t\tfrequencyHistogramMetaData,\r\n\r\n\t\t\t} = checkFrequencyHistogram(descendingSortHand, frequencyHistogram);\r\n\t\t\tconst valueSet = generateValueSet(descendingSortHand);\r\n\t\t\tconst {\r\n\r\n\t\t\t\tisStraight,\r\n\t\t\t\tisLowStraight,\r\n\t\t\t\tconcurrentCardValues,\r\n\t\t\t\tconcurrentCardValuesLow,\r\n\r\n\t\t\t} = checkIfStraight(valueSet);\r\n\t\t\tconst {\r\n\r\n\t\t\t\tisFlush,\r\n\t\t\t\tflushedSuit,\r\n\r\n\t\t\t} = checkIfFlush(suitHistogram);\r\n\r\n\t\t\tconst flushCards = (isFlush) &&\r\n\t\t\t\tdescendingSortHand\r\n\t\t\t\t\t.filter(card => card.suit === flushedSuit);\r\n\r\n\t\t\tconst {\r\n\r\n\t\t\t\tisStraightFlush,\r\n\t\t\t\tisLowStraightFlush,\r\n\t\t\t\tconcurrentSFCardValues,\r\n\t\t\t\tconcurrentSFCardValuesLow,\r\n\r\n\t\t\t} = (isFlush) && checkIfStraightFlush(flushCards);\r\n\t\t\tconst isRoyalFlush = (isFlush) &&\r\n\t\t\t\tcheckIfRoyalFlush(flushCards);\r\n\t\t\tconst isNoPair = (\r\n\t\t\t\t(!isRoyalFlush) &&\r\n\t\t\t\t(!isStraightFlush) &&\r\n\t\t\t\t(!isFourOfAKind) &&\r\n\t\t\t\t(!isFullHouse) &&\r\n\t\t\t\t(!isFlush) &&\r\n\t\t\t\t(!isStraight) &&\r\n\t\t\t\t(!isThreeOfAKind) &&\r\n\t\t\t\t(!isTwoPair) &&\r\n\t\t\t\t(!isPair));\r\n\r\n\t\t\t// create a hierarchy to rank hand strength\r\n\t\t\tconst handHierarchy = [{\r\n\t\t\t\tname: 'Royal Flush',\r\n\t\t\t\tmatch: isRoyalFlush,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Straight Flush',\r\n\t\t\t\tmatch: isStraightFlush\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Four Of A Kind',\r\n\t\t\t\tmatch: isFourOfAKind,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Full House',\r\n\t\t\t\tmatch: isFullHouse,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Flush',\r\n\t\t\t\tmatch: isFlush,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Straight',\r\n\t\t\t\tmatch: isStraight,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Three Of A Kind',\r\n\t\t\t\tmatch: isThreeOfAKind,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Two Pair',\r\n\t\t\t\tmatch: isTwoPair,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Pair',\r\n\t\t\t\tmatch: isPair,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'No Pair',\r\n\t\t\t\tmatch: isNoPair\r\n\t\t\t}];\r\n\r\n\t\t\t// use hand hierarchy to determine Ai action\r\n\t\t\tconst highRank = handHierarchy[handHierarchy.findIndex(el => el.match === true)].name\r\n\t\t\tconst { callLimit, raiseChance, raiseRange } = createGeneralizedDeterminant(descendingSortHand, highRank, frequencyHistogramMetaData)\r\n\t\t\tconst willCall = (betting_hierarchy[stakes] <= betting_hierarchy[callLimit])\r\n\t\t\tconst callValue = (activePlayer.chips + activePlayer.bet >= highBet) ? highBet : activePlayer.chips + activePlayer.bet\r\n\t\t\tif (willCall) {\r\n\t\t\t\tif (willRaise(raiseChance)) {\r\n\t\t\t\t\tconst determinedRaiseRange = raiseRange[Math.floor(Math.random() * (raiseRange.length - 0)) + 0];\r\n\t\t\t\t\tconst wantRaise = (betting_hierarchy[stakes] <= betting_hierarchy[determinedRaiseRange])\r\n\t\t\t\t\tif (wantRaise) {\r\n\t\t\t\t\t\tlet betValue = Math.floor(chooseBetProportion(determinedRaiseRange) * activePlayer.chips)\r\n\t\t\t\t\t\tif (betValue < highBet) {\r\n\t\t\t\t\t\t\tbetValue = highBet;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tactivePlayer.canRaise = false\r\n\t\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, betValue, activePlayer)} ${betValue}`);\r\n\t\t\t\t\t\treturn manageBet(state, betValue, min, max);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\r\n\t\t\t\t\t\treturn manageBet(state, callValue, min, max);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\r\n\t\t\t\t\treturn manageBet(state, callValue, min, max);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tmoveAnimationState(state.activePlayerIndex, `FOLD`);\r\n\t\t\t\treturn managePlayerFold(state)\r\n\t\t\t}\r\n\t\tdefault: throw Error(\"Handle AI Running during incorrect phase\");\r\n\t}\r\n}\r\n\r\n/* \r\nThis function determines Ai behavior based \r\non the rank of its card hand.\r\n*/\r\nconst createGeneralizedDeterminant = (hand, highRank, frequencyHistogramMetaData) => {\r\n\tif (highRank === 'Royal Flush') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChance: 1,\r\n\t\t\traiseRange: ['beware']\r\n\t\t}\r\n\t} else if (highRank === 'Straight Flush') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChance: 1,\r\n\t\t\traiseRange: ['strong', 'aggro', 'beware']\r\n\t\t}\r\n\t} else if (highRank === 'Four Of A Kind') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChance: 1,\r\n\t\t\traiseRange: ['strong', 'aggro', 'beware']\r\n\t\t}\r\n\t} else if (highRank === 'Full House') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChance: 1,\r\n\t\t\traiseRange: ['hidraw', 'strong', 'aggro', 'beware']\r\n\t\t}\r\n\t} else if (highRank === 'Flush') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChange: 1,\r\n\t\t\traiseRange: ['strong', 'aggro', 'beware'],\r\n\t\t}\r\n\t} else if (highRank === 'Straight') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChange: 1,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t} else if (highRank === 'Three Of A Kind') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChange: 1,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t} else if (highRank === 'Two Pair') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChange: 0.7,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t} else if (highRank === 'Pair') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'hidraw',\r\n\t\t\traiseChange: 0.5,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t} else if (highRank === 'No Pair') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'meddraw',\r\n\t\t\traiseChange: 0.2,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/* \r\nA function to determine Ai behavior based on the flop\r\nand its results. \r\n*/\r\nconst createPreFlopDeterminant = (highCard, lowCard, suited, straightGap) => {\r\n\tif (highCard === lowCard) {\r\n\t\tswitch (highCard) {\r\n\t\t\tcase (highCard > 8): {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\t\traiseChance: 0.9,\r\n\t\t\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw', 'strong'], // randomly determine bet based on this\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcase (highCard > 5): {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcallLimit: 'aggro',\r\n\t\t\t\t\traiseChance: 0.75, // if Math.random() is < than this, select a random raiseTarget \r\n\t\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw'],\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcase (highCard < 5):\r\n\t\t\tdefault: {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcallLimit: 'aggro',\r\n\t\t\t\t\traiseChance: 0.5,\r\n\t\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw'],\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (highCard > 9 && lowCard > 9) {\r\n\t\t// two high cards\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\traiseChance: 1,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\traiseChance: 0.75,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (highCard > 8 && lowCard > 6) {\r\n\t\t// one high card\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\traiseChance: 0.65,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\traiseChance: 0.45,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (highCard > 8 && lowCard < 6) {\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'major',\r\n\t\t\t\traiseChance: 0.45,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw'],\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'aggro',\r\n\t\t\t\traiseChance: 0.35,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw'],\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (highCard > 5 && lowCard > 3) {\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'strong',\r\n\t\t\t\traiseChance: 0.1,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw'],\r\n\t\t\t}\r\n\t\t} else if (straightGap) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'aggro',\r\n\t\t\t\traiseChance: 0,\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'strong',\r\n\t\t\t\traiseChance: 0,\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'strong',\r\n\t\t\t\traiseChance: 0.1,\r\n\t\t\t\traiseRange: ['insignificant'],\r\n\t\t\t}\r\n\t\t} else if (straightGap) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'strong',\r\n\t\t\t\traiseChance: 0,\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'insignificant',\r\n\t\t\t\traiseChance: 0,\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/* \r\nA function to group stakes into terms for betting.\r\n*/\r\nconst groupStakes = (percentage) => {\r\n\tswitch (true) {\r\n\t\tcase (percentage > 75):\r\n\t\t\treturn 'beware'\r\n\t\tcase (percentage > 40):\r\n\t\t\treturn 'aggro'\r\n\t\tcase (percentage > 35):\r\n\t\t\treturn 'major'\r\n\t\tcase (percentage > 25):\r\n\t\t\treturn 'strong'\r\n\t\tcase (percentage > 15):\r\n\t\t\treturn 'hidraw'\r\n\t\tcase (percentage > 10):\r\n\t\t\treturn 'meddraw'\r\n\t\tcase (percentage > 3):\r\n\t\t\treturn 'lowdraw'\r\n\t\tcase (percentage >= 1):\r\n\t\t\treturn 'insignificant'\r\n\t\tcase (percentage < 1):\r\n\t\tdefault:\r\n\t\t\treturn 'blind'\r\n\t}\r\n}\r\n\r\n/* \r\nThis function determines the amount an Ai\r\nwill bet based on the betting hierarchy value.\r\n*/\r\nconst chooseBetProportion = (stakes) => {\r\n\tif (stakes === 'blind') {\r\n\t\treturn Math.random() * (0.1 - 0) + 0\r\n\t} else if (stakes === 'insignificant') {\r\n\t\treturn Math.random() * (0.03 - 0.01) + 0.01\r\n\t} else if (stakes === 'lowdraw') {\r\n\t\treturn Math.random() * (0.10 - 0.03) + 0.03\r\n\t} else if (stakes === 'meddraw') {\r\n\t\treturn Math.random() * (0.15 - 0.10) + 0.10\r\n\t} else if (stakes === 'hidraw') {\r\n\t\treturn Math.random() * (0.25 - 0.15) + 0.15\r\n\t} else if (stakes === 'strong') {\r\n\t\treturn Math.random() * (0.35 - 0.25) + 0.25\r\n\t} else if (stakes === 'major') {\r\n\t\treturn Math.random() * (0.40 - 0.35) + 0.35\r\n\t} else if (stakes === 'aggro') {\r\n\t\treturn Math.random() * (0.75 - 0.40) + 0.40\r\n\t} else if (stakes === 'beware') {\r\n\t\treturn Math.random() * (1 - 0.75) + 0.75\r\n\t}\r\n}\r\n\r\n/* \r\nA list to set the degree of an Ai bet.\r\n*/\r\nconst betting_hierarchy = {\r\n\tblind: 0,\r\n\tinsignificant: 1,\r\n\tlowdraw: 2,\r\n\tmeddraw: 3,\r\n\thidraw: 4,\r\n\tstrong: 5,\r\n\tmajor: 6,\r\n\taggro: 7,\r\n\tbeware: 8,\r\n}\r\n\r\nconst willRaise = (chance) => {\r\n\treturn Math.random() < chance\r\n}\r\n\r\nconst makeHistogram = (hand) => {\r\n\tconst histogram = hand.reduce((acc, cur) => {\r\n\t\tacc.frequencyHistogram[cur.cardFace] = (acc.frequencyHistogram[cur.cardFace] || 0) + 1;\r\n\t\tacc.suitHistogram[cur.suit] = (acc.suitHistogram[cur.suit] || 0) + 1;\r\n\t\treturn acc\r\n\t}, { frequencyHistogram: {}, suitHistogram: {} })\r\n\treturn histogram\r\n}\r\n\r\nexport { aiHandler };\r\n\r\n","import React from 'react';\r\n\r\n/**\r\n * Card component which represents the private Poker game cards \r\n * dealt to the User and the Community cards dealt on the table.\r\n */\r\nconst Card = (props) => {\r\n  const {\r\n    cardData: {\r\n      suit,\r\n      cardFace,\r\n      animationDelay\r\n    },\r\n    applyFoldedClassname\r\n  } = props;\r\n\r\n  // get suit of card\r\n  var cardSuit = suit.substring(0, 1).toUpperCase();\r\n\r\n  // display card according to value and suit given\r\n  return (\r\n    <div className=\"poker-card\"><img src={`${process.env.PUBLIC_URL}/assets/cardFaces/${cardFace}${cardSuit}.svg`}></img></div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\n\r\n/**\r\n * SpinnerLoading component which represents the App logo\r\n * spinning when a a page is loading.\r\n */\r\nconst SpinnerLoading = props => {\r\n\treturn (\r\n\t\t<div className=\"loading-div\">\r\n\t\t\t<div className='spinner-div' >\r\n\t\t\t\t<img src={'/assets/logo.svg'} alt=\"Loading game...\" />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SpinnerLoading","import React from 'react';\r\n\r\n/**\r\n * Back of Card component which represents the private Poker game cards \r\n * dealt to AI players which remain hidden from the user.\r\n */\r\nconst BackOfCard = (props) => {\r\n  const {\r\n    cardData: {\r\n      suit,\r\n      cardFace,\r\n      animationDelay\r\n    },\r\n    applyFoldedClassname\r\n  } = props;\r\n\r\n  // display back of card (values hidden from user)\r\n  return (\r\n    <div\r\n      key={`${suit} ${cardFace}`}\r\n      className={`poker-card cardIn agent-card${(applyFoldedClassname ? ' folded' : '')}`}\r\n      style={{ animationDelay: `${(applyFoldedClassname) ? 0 : animationDelay}ms` }}>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BackOfCard;","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\n/**\r\n * This component controls the animations \r\n * and transitional effects of player actions.\r\n */\r\nfunction PlayerStatus({ index, isActive, content, endTransition }) {\r\n    return (\r\n        <CSSTransition\r\n            in={isActive}\r\n            timeout={{\r\n                appear: 0,\r\n                enter: 0,\r\n                exit: 1250,\r\n            }}\r\n            classNames=\"trans-notification\"\r\n            onEntered={() => endTransition(index)}\r\n        >\r\n            <div className=\"notification\">\r\n                {`${content}`}\r\n            </div>\r\n        </CSSTransition>\r\n    )\r\n}\r\n\r\nexport default PlayerStatus;","import React from 'react';\r\nimport BackOfCard from '../cards/BackOfCard';\r\nimport Card from '../cards/Card';\r\nimport PlayerStatus from \"./PlayerStatus\";\r\n\r\n\r\n\r\nconst dealerChipImageURL = \"/assets/logo.svg\";\r\nconst chipCountImageURL = \"./assets/chips.svg\";\r\nconst playerBetImageURL = \"./assets/bet.svg\";\r\n\r\n\r\n/**\r\n * Player component that creates the base player entity \r\n * for both the user and AI agents.\r\n */\r\nconst Player = (props) => {\r\n  const {\r\n    arrayIndex,\r\n    playerAnimationSwitchboard,\r\n    endTransition,\r\n    hasDealerChip,\r\n    isActive,\r\n    phase,\r\n    clearCards,\r\n    player: {\r\n      robot,\r\n      folded,\r\n      cards,\r\n      avatarURL,\r\n      name,\r\n      chips,\r\n      bet\r\n    }\r\n  } = props;\r\n\r\n  /*\r\n     Assigns the correct format of card to players\r\n  */\r\n  const makePlayerCards = () => {\r\n    let applyFoldedClassname;\r\n\r\n    if (folded || clearCards) {\r\n      applyFoldedClassname = true\r\n    }\r\n\r\n    // Hidden back of card for agents\r\n    if (robot) {\r\n      return cards.map((card, index) => {\r\n        if (phase !== 'showdown') {\r\n          return (\r\n            <BackOfCard key={index} cardData={card} applyFoldedClassname={applyFoldedClassname} />\r\n          );\r\n        } else {\r\n          // Reset Animation Delay\r\n          const cardData = { ...card, animationDelay: 0 }\r\n          return (\r\n            <Card key={index} cardData={cardData} applyFoldedClassname={applyFoldedClassname} />\r\n          );\r\n        }\r\n      });\r\n    }\r\n    // Visible front of card for user\r\n    else {\r\n      return cards.map((card, index) => {\r\n        return (\r\n          <Card key={index} cardData={card} applyFoldedClassname={applyFoldedClassname} />\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n     Assign dealer chip to current round dealer\r\n  */\r\n  const makeDealerChip = () => {\r\n    if (hasDealerChip) {\r\n      return (\r\n        <div className=\"dealer-chips-div\">\r\n          <img src={dealerChipImageURL} alt=\"Dealer Chip\" />\r\n        </div>\r\n      )\r\n    } else return null;\r\n  }\r\n\r\n  /*\r\n     Check if player should have animation\r\n  */\r\n  const Animating = (playerBoxIndex) => {\r\n    if (playerAnimationSwitchboard[playerBoxIndex].Animating) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={`player-wrapper p${arrayIndex}`}>\r\n      <PlayerStatus\r\n        index={arrayIndex}\r\n        isActive={Animating(arrayIndex)}\r\n        content={playerAnimationSwitchboard[arrayIndex].content}\r\n        endTransition={endTransition}\r\n      />\r\n      <div className='flex-row abscard'>\r\n        {makePlayerCards()}\r\n      </div>\r\n      <div className=\"player-div\">\r\n        <div className=\"player-icon-div\">\r\n          <img\r\n            className={`player-icon-image${(isActive ? ' activePlayer' : '')}`}\r\n            src={avatarURL}\r\n            alt=\"Player Avatar\"\r\n          />\r\n          <h5 className=\"player-data-name\" style={{ 'fontSize': (name.length < 14) ? 12 : 10 }}>\r\n            {`${name}`}\r\n          </h5>\r\n          <div className=\"player-data-stash-div\">\r\n            <img className=\"player-data-stash-image\" src={chipCountImageURL} alt=\"Player Stash\" />\r\n            <h5 className=\"player-data-stash-head\">{`${chips}`}</h5>\r\n          </div>\r\n          <div className=\"player-data-bet-div\">\r\n            <img className=\"player-data-bet-image\" src=\"./assets/pot.svg\" alt=\"Player Bet\" />\r\n            <h5 className=\"player-data-bet-head\">{`${bet}`}</h5>\r\n          </div>\r\n          {makeDealerChip()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Player;","import React, { useEffect } from \"react\"\r\nimport { Button, Card, Container } from \"react-bootstrap\"\r\nimport { useHistory, useLocation } from \"react-router-dom\"\r\nimport { useAuth } from \"../../contexts/AuthContext\"\r\nimport firebaseDb from \"../../firebase\"\r\nimport Dashboard from './Dashboard'\r\n\r\n/**\r\n * PlayerWin component to display Winning player\r\n * name and record user statistics.\r\n */\r\nexport default function PlayerWin(props) {\r\n    const { currentUser } = useAuth()\r\n    const history = useHistory()\r\n\r\n    const search = useLocation().search;\r\n    const difficulty = new URLSearchParams(search).get('difficulty');\r\n\r\n\r\n    useEffect(() => {\r\n        recordUserStatistics()\r\n    });\r\n\r\n    // Increase games played and/or wins for difficulty played\r\n    async function recordUserStatistics(e) {\r\n        var userStatistics = new Object();\r\n        firebaseDb.database().ref().child(currentUser.uid).once(\"value\").then(function (snapshot) {\r\n            var countValues = 0;\r\n            snapshot.forEach(function (childSnapshot) {\r\n                var key = childSnapshot.key;\r\n                var childData = childSnapshot.val();\r\n                userStatistics[key] = childData;\r\n                countValues += 1;\r\n            });\r\n            if (countValues == 0) {\r\n                firebaseDb.database().ref().child(currentUser.uid).set({\r\n                    \"num_beginner_games\": 0, \"num_beginner_wins\": 0,\r\n                    \"num_intermediate_games\": 0, \"num_intermediate_wins\": 0,\r\n                    \"num_expert_games\": 0, \"num_expert_wins\": 0,\r\n                    \"num_ultimate_games\": 0, \"num_ultimate_wins\": 0,\r\n                })\r\n                userStatistics = {\r\n                    \"num_beginner_games\": 0, \"num_beginner_wins\": 0,\r\n                    \"num_intermediate_games\": 0, \"num_intermediate_wins\": 0,\r\n                    \"num_expert_games\": 0, \"num_expert_wins\": 0,\r\n                    \"num_ultimate_games\": 0, \"num_ultimate_wins\": 0,\r\n                }\r\n            }\r\n\r\n            // Add results to DB\r\n            if (difficulty == \"beginner\") {\r\n                userStatistics[\"num_beginner_games\"] = userStatistics[\"num_beginner_games\"] + 1\r\n                if (props.winner.name == Dashboard.username)\r\n                    userStatistics[\"num_beginner_wins\"] = userStatistics[\"num_beginner_wins\"] + 1\r\n            }\r\n            else if (difficulty == \"intermediate\") {\r\n                userStatistics[\"num_intermediate_games\"] = userStatistics[\"num_intermediate_games\"] + 1\r\n                if (props.winner.name == Dashboard.username)\r\n                    userStatistics[\"num_intermediate_wins\"] = userStatistics[\"num_intermediate_wins\"] + 1\r\n            }\r\n            else if (difficulty == \"expert\") {\r\n                userStatistics[\"num_expert_games\"] = userStatistics[\"num_expert_games\"] + 1\r\n                if (props.winner.name == Dashboard.username)\r\n                    userStatistics[\"num_expert_wins\"] = userStatistics[\"num_expert_wins\"] + 1\r\n            }\r\n            else if (difficulty == \"ultimate\") {\r\n                userStatistics[\"num_ultimate_games\"] = userStatistics[\"num_ultimate_games\"] + 1\r\n                if (props.winner.name == Dashboard.username)\r\n                    userStatistics[\"num_ultimate_wins\"] = userStatistics[\"num_ultimate_wins\"] + 1\r\n            }\r\n\r\n            firebaseDb.database().ref().child(currentUser.uid).set({\r\n                \"num_beginner_games\": userStatistics[\"num_beginner_games\"], \"num_beginner_wins\": userStatistics[\"num_beginner_wins\"],\r\n                \"num_intermediate_games\": userStatistics[\"num_intermediate_games\"], \"num_intermediate_wins\": userStatistics[\"num_intermediate_wins\"],\r\n                \"num_expert_games\": userStatistics[\"num_expert_games\"], \"num_expert_wins\": userStatistics[\"num_expert_wins\"],\r\n                \"num_ultimate_games\": userStatistics[\"num_ultimate_games\"], \"num_ultimate_wins\": userStatistics[\"num_ultimate_wins\"],\r\n            })\r\n\r\n        }, function (error) {\r\n            console.log(\"Error reading player statistics from DB\")\r\n        });\r\n    }\r\n\r\n    /*\r\n     Return user to dashboard menu\r\n    */\r\n    async function handleReturnToDashboard(e) {\r\n        e.preventDefault()\r\n        console.log(\"Returning to dashboard...\")\r\n        try {\r\n            history.push(\"/dashboard\")\r\n        } catch {\r\n            console.log(\"Error returning to dashboard. Please try again.\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container\r\n            className=\"d-flex flex-column align-items-center justify-content-center\"\r\n            style={{ minHeight: \"100vh\" }}\r\n        >\r\n            <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <div className=\"w-200 text-center\">\r\n                            <img className=\"logo mr-2\" src=\"/assets/win-trophy.png\" />\r\n                        </div>\r\n                        <div className=\"w-100 m-100\">\r\n                            <h2>\r\n                                {props.winner.name} Wins!\r\n                            </h2>\r\n                        </div>\r\n                        <Button className=\"w-100 mt-3\" onClick={handleReturnToDashboard}>\r\n                            Return to Dashboard\r\n                    </Button>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        </Container>\r\n    )\r\n}","import 'core-js/es/array';\r\nimport 'core-js/es/map';\r\nimport 'core-js/es/set';\r\nimport \"core-js/stable\";\r\nimport { cloneDeep } from 'lodash';\r\nimport 'raf/polyfill';\r\nimport React, { Component } from 'react';\r\nimport { Dropdown, DropdownButton } from 'react-bootstrap';\r\nimport { Link } from \"react-router-dom\";\r\nimport \"regenerator-runtime/runtime\";\r\nimport '../../App.css';\r\nimport '../../Game.css';\r\nimport {\r\n  aiHandler as aiHandlerUtil\r\n} from '../../services/aiService.js';\r\nimport {\r\n  anteUpBlinds, calculateBlindIndices,\r\n\r\n  calculateMinBet,\r\n  manageBet,\r\n  managePlayerFold\r\n} from '../../services/betService.js';\r\nimport {\r\n  dealPlayerCards, makeDeckOfCards,\r\n  shuffleCards\r\n} from '../../services/cardsService.js';\r\nimport {\r\n  checkWin, makeTable, startNextRound\r\n} from '../../services/playersService.js';\r\nimport {\r\n  makeActionButtonText,\r\n\r\n  makeActionMenu, makeNetPlayerEarnings, makeShowdownMessages\r\n} from '../../services/uiService.js';\r\nimport Card from \"../cards/Card\";\r\nimport SpinnerLoading from '../helpers/SpinnerLoading';\r\nimport Player from \"../players/Player\";\r\nimport Dashboard from './Dashboard';\r\nimport PlayerWin from './PlayerWin';\r\n\r\n/**\r\n * Game component that manages all aspects of the Poker Game\r\n * and allows user to compete with AI Agents.\r\n */\r\nclass Game extends Component {\r\n  state = {\r\n    loading: true,\r\n    winnerFound: null,\r\n    winner: null,\r\n    players: null,\r\n    numPlayersActive: null,\r\n    numPlayersFolded: null,\r\n    numPlayersAllIn: null,\r\n    activePlayerIndex: null,\r\n    dealerIndex: null,\r\n    blindIndex: null,\r\n    deck: null,\r\n    communityCards: [],\r\n    pot: null,\r\n    highBet: null,\r\n    betInputValue: null,\r\n    sidePots: [],\r\n    minBet: 20,\r\n    phase: 'loading',\r\n    playerHierarchy: [],\r\n    showDownMessages: [],\r\n    playActionMessages: [],\r\n    playerAnimationSwitchboard: {\r\n      0: { isAnimating: false, content: null },\r\n      1: { isAnimating: false, content: null },\r\n      2: { isAnimating: false, content: null },\r\n      3: { isAnimating: false, content: null },\r\n      4: { isAnimating: false, content: null },\r\n      5: { isAnimating: false, content: null }\r\n    }\r\n  }\r\n\r\n  // animation delay for cards which gives real dealer effect\r\n  cardAnimationDelay = 0;\r\n\r\n  /*\r\n   On component load create game with table, players, etc.\r\n  */\r\n  async componentDidMount() {\r\n    const players = await makeTable(Dashboard.username);\r\n    // randomly assign dealer chip\r\n    const dealerIndex = Math.floor(Math.random() * Math.floor(players.length));\r\n\r\n    // assign blinds to respective players\r\n    const blindIndicies = calculateBlindIndices(dealerIndex, players.length);\r\n    const playersBoughtIn = anteUpBlinds(players, blindIndicies, this.state.minBet);\r\n\r\n    const imageLoaderRequest = new XMLHttpRequest();\r\n\r\n    // wait for table to load\r\n    imageLoaderRequest.addEventListener(\"load\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n      console.log(\"Table Loaded!\");\r\n      this.setState({\r\n        loading: false,\r\n      })\r\n    });\r\n\r\n\r\n    imageLoaderRequest.addEventListener(\"loadstart\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.addEventListener(\"loadend\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.addEventListener(\"progress\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.addEventListener(\"abort\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.addEventListener(\"error\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.open(\"GET\", \"./assets/table.svg\");\r\n    imageLoaderRequest.send();\r\n\r\n    // set initial game state\r\n    this.setState(prevState => ({\r\n      players: playersBoughtIn,\r\n      numPlayersActive: players.length,\r\n      numPlayersFolded: 0,\r\n      numPlayersAllIn: 0,\r\n      activePlayerIndex: dealerIndex,\r\n      dealerIndex,\r\n      blindIndex: {\r\n        big: blindIndicies.bigBlindIndex,\r\n        small: blindIndicies.smallBlindIndex,\r\n      },\r\n      deck: shuffleCards(makeDeckOfCards()),\r\n      pot: 0,\r\n      highBet: prevState.minBet,\r\n      betInputValue: prevState.minBet,\r\n      phase: 'initialDeal',\r\n    }))\r\n    // game executes until there is a winner\r\n    this.executeGame();\r\n  }\r\n\r\n  /*\r\n   Game execution which iterates through each phase of the \r\n   Poker game repeatedly until there is a winner at the table\r\n  */\r\n  executeGame = () => {\r\n    // deal player cards\r\n    const newState = dealPlayerCards(cloneDeep(this.state))\r\n    // update state after each action\r\n    this.setState(newState, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n          this.aiHandler()\r\n        }, 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handler for Artificial Intelligence Agents performs action\r\n   according to their in game decisions\r\n  */\r\n  aiHandler = () => {\r\n    const { playerAnimationSwitchboard, ...appState } = this.state;\r\n    // change state according to AI decision/action\r\n    const newState = aiHandlerUtil(cloneDeep(appState), this.changePlayerAnimationState)\r\n\r\n    // update state after action\r\n    this.setState({\r\n      ...newState,\r\n      betInputValue: newState.minBet\r\n    }, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n\r\n          this.aiHandler()\r\n        }, 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handle player bet change action\r\n  */\r\n  manageBetChange = (val, min, max) => {\r\n    if (val === '') val = min\r\n    if (val > max) val = max\r\n    // handle player bet change\r\n    this.setState({\r\n      betInputValue: parseInt(val, 10),\r\n    });\r\n  }\r\n\r\n  /*\r\n   Handle player bet submit action\r\n  */\r\n  manageBetSubmit = (bet, min, max) => {\r\n    const { playerAnimationSwitchboard, ...appState } = this.state;\r\n    // get active player\r\n    const { activePlayerIndex } = appState;\r\n    // execute player action \r\n    this.changePlayerAnimationState(activePlayerIndex, `${makeActionButtonText(this.state.highBet, this.state.betInputValue, this.state.players[this.state.activePlayerIndex])} ${(bet > this.state.players[this.state.activePlayerIndex].bet) ? (bet) : \"\"}`);;\r\n    const newState = manageBet(cloneDeep(appState), parseInt(bet, 10), parseInt(min, 10), parseInt(max, 10));\r\n\r\n    // continue to next player if hand is not over\r\n    this.setState(newState, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n\r\n          this.aiHandler()\r\n        }, 1200)\r\n      }\r\n    });\r\n  }\r\n\r\n  /*\r\n   Handle Raise Slider bar value change (by user)\r\n  */\r\n  manageSliderInputChange = (val) => {\r\n    this.setState({\r\n      betInputValue: val[0]\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handle Player fold action\r\n  */\r\n  managePlayerFold = () => {\r\n    const { playerAnimationSwitchboard, ...appState } = this.state\r\n    // player fold action\r\n    const newState = managePlayerFold(cloneDeep(appState));\r\n\r\n    // continue to next player if hand is not over\r\n    this.setState(newState, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n\r\n          this.aiHandler()\r\n        }, 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handle next game hand\r\n  */\r\n  manageNextRound = () => {\r\n    // remove cards from table\r\n    this.setState({ clearCards: true })\r\n    // start fresh round\r\n    const newState = startNextRound(cloneDeep(this.state))\r\n    var winner;\r\n    // if there is a winner the game is over\r\n    if (checkWin(newState.players)) {\r\n      const players = newState.players\r\n      players.forEach(element => {\r\n        if (element.chips > 0)\r\n          winner = element\r\n      });\r\n      this.setState({ winner: winner });\r\n      this.setState({ winnerFound: true })\r\n\r\n      return;\r\n    }\r\n    // continue to next round if hand is over\r\n    this.setState(newState, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => this.aiHandler(), 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handle player animation according to state of game\r\n  */\r\n  changePlayerAnimationState = (index, content) => {\r\n    const newAnimationSwitchboard = Object.assign(\r\n      {},\r\n      this.state.playerAnimationSwitchboard,\r\n      { [index]: { isAnimating: true, content } }\r\n    )\r\n    this.setState({ playerAnimationSwitchboard: newAnimationSwitchboard });\r\n  }\r\n\r\n  /*\r\n   Stop latest player animation \r\n  */\r\n  popPlayerAnimationState = (index) => {\r\n    const persistContent = this.state.playerAnimationSwitchboard[index].content;\r\n    const newAnimationSwitchboard = Object.assign(\r\n      {},\r\n      this.state.playerAnimationSwitchboard,\r\n      { [index]: { isAnimating: false, content: persistContent } }\r\n    )\r\n    this.setState({ playerAnimationSwitchboard: newAnimationSwitchboard });\r\n  }\r\n\r\n  /*\r\n   Render Poker Table with Players, cards, etc.\r\n  */\r\n  renderTable = () => {\r\n    // update table features according to current game state\r\n    const {\r\n      players,\r\n      activePlayerIndex,\r\n      dealerIndex,\r\n      clearCards,\r\n      phase,\r\n      playerAnimationSwitchboard\r\n    } = this.state;\r\n\r\n    // changes turn of player each hand\r\n    const reversedPlayers = players.reduce((result, player, index) => {\r\n\r\n      const isActive = (index === activePlayerIndex);\r\n      const hasDealerChip = (index === dealerIndex);\r\n\r\n\r\n      // shift player in array to allow move dealer chip to each player counter clock-wise\r\n      result.unshift(\r\n        <Player\r\n          key={index}\r\n          arrayIndex={index}\r\n          isActive={isActive}\r\n          hasDealerChip={hasDealerChip}\r\n          player={player}\r\n          clearCards={clearCards}\r\n          phase={phase}\r\n          playerAnimationSwitchboard={playerAnimationSwitchboard}\r\n          endTransition={this.popPlayerAnimationState}\r\n        />\r\n      )\r\n      return result\r\n    }, []);\r\n    return reversedPlayers.map(component => component);\r\n  }\r\n\r\n  /*\r\n   Render action buttons for user such as check/call/raise/allin and fold\r\n  */\r\n  renderPlayerActionButtons = () => {\r\n    const { highBet, players, activePlayerIndex, phase, betInputValue } = this.state\r\n    // calculate min bet user has to place\r\n    const min = calculateMinBet(highBet, players[activePlayerIndex].chips, players[activePlayerIndex].bet)\r\n    // calculate max bet user can place\r\n    const max = players[activePlayerIndex].chips + players[activePlayerIndex].bet\r\n\r\n    // render different buttons/text according to user input \r\n    return ((players[activePlayerIndex].robot) || (phase === 'showdown')) ? null : (\r\n      <React.Fragment>\r\n        <button className='fold-button' onClick={() => this.managePlayerFold()}>\r\n          Fold\r\n        </button>\r\n        <button className='bet-button' onClick={() => this.manageBetSubmit(betInputValue, min, max)}>\r\n          {makeActionButtonText(highBet, betInputValue, players[activePlayerIndex])}\r\n        </button>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  /*\r\n   Render community cards that dealer deals on flop, turn and river\r\n  */\r\n  renderTableCommunityCards = (purgeAnimation) => {\r\n    return this.state.communityCards.map((card, index) => {\r\n      let cardData = { ...card };\r\n      if (purgeAnimation) {\r\n        cardData.animationDelay = 0;\r\n      }\r\n      // render card according to its value and suit\r\n      return (\r\n        <Card key={index} cardData={cardData} />\r\n      );\r\n    });\r\n  }\r\n\r\n  /*\r\n   Render player showdown at end of each hand.\r\n   Compares players' hands and indicates winnings \r\n   (win/losses of each active player)\r\n  */\r\n  renderPlayerShowdown = () => {\r\n    return (\r\n      <div className='showdown-div-wrapper'>\r\n        <h5 className=\"showdown-div-title\">\r\n          Hand Complete!\r\n        </h5>\r\n        <div className=\"showdown-div-messages\">\r\n          {makeShowdownMessages(this.state.showDownMessages)}\r\n        </div>\r\n        <h5 className=\"showdown-div-community-card-label\">\r\n          Community Cards\r\n        </h5>\r\n        <div className='showdown-div-community-cards'>\r\n          {this.renderTableCommunityCards(true)}\r\n        </div>\r\n        <button className=\"showdown-nextRound-button\" onClick={() => this.manageNextRound()}> Next Hand </button>\r\n        { this.renderBestHands()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  /*\r\n   Render each active player's best hand\r\n   (considering player's private cards and \r\n   available community cards). Handles ties.\r\n  */\r\n  renderBestHands = () => {\r\n    // get best hands from current state of game\r\n    const { playerHierarchy } = this.state;\r\n\r\n    return playerHierarchy.map(rankSnapshot => {\r\n      const tie = Array.isArray(rankSnapshot);\r\n      return tie ? this.renderHandSplit(rankSnapshot) : this.renderHandWinner(rankSnapshot);\r\n    })\r\n  }\r\n\r\n  /*\r\n   Render pot split amongst winning players\r\n   when there is more than a single best hand.\r\n  */\r\n  renderHandSplit = (rankSnapshot) => {\r\n    return rankSnapshot.map(player => {\r\n      return this.renderHandWinner(player);\r\n    })\r\n  }\r\n\r\n  makeCards = (cards) => {\r\n    return cards.map((card, index) => {\r\n      const cardData = { ...card, animationDelay: 0 }\r\n      return <Card key={index} cardData={cardData} />\r\n    })\r\n  }\r\n\r\n  /*\r\n   Render player winning showdown. Displays best hand, \r\n   hand rankings and amount of chips won by player.\r\n  */\r\n  renderHandWinner = (player) => {\r\n    // get best hand and hand ranking from winning player\r\n    const { name, bestHand, handRank } = player;\r\n    // get info of winning player\r\n    const playerStateData = this.state.players.find(statePlayer => statePlayer.name === name);\r\n    // display winning player information\r\n    return (\r\n      <table class=\"showdown-table content-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Player</th>\r\n            <th>Private Cards</th>\r\n            <th>Best Hand</th>\r\n            <th>Hand Ranking</th>\r\n            <th>Win/Loss</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              {name}</td>\r\n            <td>\r\n              <div class=\"showdown-player-privateCards\">\r\n                <div class=\"showdown-player-cards\">\r\n                  {this.makeCards(playerStateData.cards)}\r\n                </div>\r\n              </div>\r\n            </td>\r\n            <td><div className=\"showdown-player-besthand-div\">\r\n              <div className='showdown-player-besthand-cards' style={{ alignItems: 'center' }}>\r\n                {\r\n                  bestHand.map((card, index) => {\r\n                    // reset animation delay for next round\r\n                    const cardData = { ...card, animationDelay: 0 }\r\n                    return <Card key={index} cardData={cardData} />\r\n                  })\r\n                }\r\n              </div>\r\n            </div>\r\n            </td>\r\n            <td>{handRank}</td>\r\n            <td>{makeNetPlayerEarnings(playerStateData.roundEndChips, playerStateData.roundStartChips)}</td>\r\n          </tr>\r\n\r\n        </tbody>\r\n      </table>\r\n\r\n\r\n\r\n    )\r\n  }\r\n\r\n  /*\r\n   Render Poker Game and all its entities. Table, Players, chips\r\n   action buttons, title, logo, etc. This renders the game in its\r\n   entirety.\r\n  */\r\n  renderGame = () => {\r\n    const { highBet, players, activePlayerIndex, phase } = this.state;\r\n    return (\r\n      <div className='app-background'>\r\n        <div className=\"title-text\" style={{ maxWidth: \"400px\" }}></div>\r\n        <div className=\"poker-table-div\">\r\n          <div className=\"title-logo\">\r\n            <img src={\"./assets/logo.svg\"}></img>\r\n            <h3>No-Limit Texas Hold'em Poker</h3>\r\n            <DropdownButton id=\"dropdown-basic-button\" title=\"\">\r\n              <Dropdown.Item href=\"#\"> <Link to=\"/dashboard\">Return to Dashboard</Link></Dropdown.Item>\r\n              <Dropdown.Item href=\"#\"> <Link to=\"/login\">Logout</Link></Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n          <img className=\"poker-table-image\" src={\"./assets/table.svg\"} alt=\"Poker Table\" />\r\n          {this.renderTable()}\r\n          <div className='community-hand-div' >\r\n            {this.renderTableCommunityCards()}\r\n          </div>\r\n          <div className='pot-div'>\r\n            <img src={'./assets/pot.svg'} alt=\"Pot Value\" />\r\n            <h5> {`${this.state.pot}`} </h5>\r\n          </div>\r\n        </div>\r\n        { (this.state.phase === 'showdown') && this.renderPlayerShowdown()}\r\n        <div className='game-bar' >\r\n          <div className='game-buttons'>\r\n            {this.renderPlayerActionButtons()}\r\n          </div>\r\n          <div className='slider'>\r\n            {(!this.state.loading) && makeActionMenu(highBet, players, activePlayerIndex, phase, this.manageBetChange)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  /*\r\n   Render Poker Game until there is a winner. When that occurs \r\n   render \"Player wins\" page.\r\n  */\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className='poker-table-wrapper'>\r\n          {\r\n\r\n\r\n            (this.state.loading) ? <SpinnerLoading /> :\r\n              (this.state.winnerFound) ? <PlayerWin winner={this.state.winner} /> :\r\n                this.renderGame()\r\n\r\n            // to test Player Wins page\r\n            // <PlayerWin winner={this.state.winner} difficulty=\"\"/>\r\n          }\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Alert, Button, Card, Container, Form } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport '../../Game.css';\r\nimport Logo from '../helpers/Logo';\r\n\r\n/**\r\n * Login component to allow users to \r\n * login to their accounts and play.\r\n */\r\nexport default function Login() {\r\n  const emailRef = useRef()\r\n  const passwordRef = useRef()\r\n  const { login } = useAuth()\r\n  const [error, setError] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n  const history = useHistory()\r\n\r\n  /*\r\n     Login user submission\r\n  */\r\n  async function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    try {\r\n      setError(\"\")\r\n      setLoading(true)\r\n      await login(emailRef.current.value, passwordRef.current.value)\r\n      history.push(\"/dashboard\")\r\n    } catch {\r\n      setError(\"Invalid email or password\")\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n  /*\r\n    Login guest submission\r\n  */\r\n  async function handleSubmitGuest(e) {\r\n    e.preventDefault()\r\n    console.log(\"Guest log in\")\r\n    try {\r\n      setError(\"\")\r\n      setLoading(true)\r\n      await login(\"guest@guest.com\", \"password\")\r\n      console.log(login)\r\n      history.push(\"/dashboard\")\r\n    } catch {\r\n      setError(\"Error. Cannot play as guest\")\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container\r\n        className=\"d-flex flex-column align-items-center justify-content-center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <div className=\"w-200 text-center\">\r\n          <Logo />\r\n        </div>\r\n        <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n          <Card>\r\n            <Card.Body>\r\n              <h2 className=\"text-center mb-4\">Log In</h2>\r\n              {error && <Alert variant=\"danger\">{error}</Alert>}\r\n              <Form onSubmit={handleSubmit}>\r\n                <Form.Group id=\"email\">\r\n                  <Form.Label>Email</Form.Label>\r\n                  <Form.Control type=\"email\" ref={emailRef} required />\r\n                </Form.Group>\r\n                <Form.Group id=\"password\">\r\n                  <Form.Label>Password</Form.Label>\r\n                  <Form.Control type=\"password\" ref={passwordRef} required />\r\n                </Form.Group>\r\n                <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n                  Log In\r\n            </Button>\r\n              </Form>\r\n              <Button disabled={loading} variant=\"warning\" className=\"w-100 mt-3\" onClick={handleSubmitGuest}>\r\n                Play as Guest\r\n            </Button>\r\n              <div className=\"w-100 text-center mt-3\">\r\n                <Link to=\"/forgot-password\">Forgot Password?</Link>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n          <div className=\"help-text text-center mt-2\">\r\n            Don't have an account? <Link to=\"/signup\">Sign Up</Link>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  )\r\n}","import React, { useRef, useState } from \"react\";\r\nimport { Alert, Button, Card, Container, Form } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport '../../Game.css';\r\nimport Logo from '../helpers/Logo';\r\n\r\n/**\r\n * Signup component to allow users to sign up\r\n * to the Poker App and create an account\r\n * for storing their game statistics.\r\n */\r\nexport default function Signup() {\r\n  const emailRef = useRef()\r\n  const passwordRef = useRef()\r\n  const passwordConfirmRef = useRef()\r\n  const { signup } = useAuth()\r\n  const [error, setError] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n  const history = useHistory()\r\n\r\n  /*\r\n     Signup user submission\r\n  */\r\n  async function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n      return setError(\"Passwords do not match\")\r\n    }\r\n\r\n    try {\r\n      setError(\"\")\r\n      setLoading(true)\r\n      await signup(emailRef.current.value, passwordRef.current.value)\r\n      history.push(\"/dashboard\")\r\n    } catch {\r\n      setError(\"Failed to create an account\")\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container\r\n        className=\"d-flex flex-column align-items-center justify-content-center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <div className=\"w-200 text-center\">\r\n          <Logo />\r\n        </div>\r\n        <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n          <Card>\r\n            <Card.Body>\r\n              <h2 className=\"text-center mb-4\">Sign Up</h2>\r\n              {error && <Alert variant=\"danger\">{error}</Alert>}\r\n              <Form onSubmit={handleSubmit}>\r\n                <Form.Group id=\"email\">\r\n                  <Form.Label>Email</Form.Label>\r\n                  <Form.Control type=\"email\" ref={emailRef} required />\r\n                </Form.Group>\r\n                <Form.Group id=\"password\">\r\n                  <Form.Label>Password</Form.Label>\r\n                  <Form.Control type=\"password\" ref={passwordRef} required />\r\n                </Form.Group>\r\n                <Form.Group id=\"password-confirm\">\r\n                  <Form.Label>Password Confirmation</Form.Label>\r\n                  <Form.Control type=\"password\" ref={passwordConfirmRef} required />\r\n                </Form.Group>\r\n                <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n                  Sign Up\r\n            </Button>\r\n              </Form>\r\n            </Card.Body>\r\n          </Card>\r\n          <div className=\"help-text w-100 text-center mt-2\">\r\n            Already have an account? <Link to=\"/login\">Log In</Link>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\"\r\nimport { Button, Card, Container, Alert } from \"react-bootstrap\"\r\nimport { useAuth } from \"../../contexts/AuthContext\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport firebaseDb from \"../../firebase\"\r\nimport Logo from '../helpers/Logo';\r\nimport '../../Game.css';\r\n\r\n/**\r\n * UserStatistics component to allow users view\r\n * their individual game statistics.\r\n */\r\nfunction UserStatistics({ userStatistics }) {\r\n\r\n    const history = useHistory()\r\n\r\n    async function handleReturnToDashboard(e) {\r\n        e.preventDefault()\r\n        console.log(\"Returning to dashboard...\")\r\n        try {\r\n            history.push(\"/dashboard\")\r\n        } catch {\r\n            console.log(\"Error returning to dashboard. Please try again.\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <table class=\"content-table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Played</th>\r\n                        <th>Difficulty</th>\r\n                        <th>Won</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td> {userStatistics.num_beginner_games}</td>\r\n                        <td>Beginner</td>\r\n                        <td>{userStatistics.num_beginner_wins}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{userStatistics.num_intermediate_games}</td>\r\n                        <td>Intermediate</td>\r\n                        <td>{userStatistics.num_intermediate_wins}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{userStatistics.num_expert_games}</td>\r\n                        <td>Expert</td>\r\n                        <td>{userStatistics.num_expert_wins}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{userStatistics.num_ultimate_games}</td>\r\n                        <td>Ultimate Poker Pro</td>\r\n                        <td>{userStatistics.num_ultimate_wins}</td>\r\n                    </tr>\r\n                    <tr class=\"active-row\">\r\n                        <td>{userStatistics.num_beginner_games + userStatistics.num_intermediate_games + userStatistics.num_expert_games + userStatistics.num_ultimate_games}</td>\r\n                        <td>Total</td>\r\n                        <td>{userStatistics.num_beginner_wins + userStatistics.num_intermediate_wins + userStatistics.num_expert_wins + userStatistics.num_ultimate_wins}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            <Button className=\"w-100 mt-3\" onClick={handleReturnToDashboard}>\r\n                Return to Dashboard\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction GuestUserStatistics({ userStatistics }) {\r\n    const history = useHistory()\r\n\r\n    async function handleReturnToDashboard(e) {\r\n        e.preventDefault()\r\n        console.log(\"Returning to dashboard...\")\r\n        try {\r\n            history.push(\"/dashboard\")\r\n        } catch {\r\n            console.log(\"Error returning to dashboard. Please try again.\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <div>No Statistics Recorded for Guest Users</div>\r\n            </div>\r\n            <Button className=\"w-100 mt-3\" onClick={handleReturnToDashboard}>\r\n                Return to Dashboard\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default function Statistics(props) {\r\n    const { currentUser } = useAuth()\r\n    const [loading, setLoading] = useState(true);\r\n    const [userStats, setUserStats] = useState(new Object());\r\n    var userStatistics = new Object();\r\n\r\n    useEffect(() => {\r\n        setUserStatistics()\r\n    });\r\n\r\n    async function setUserStatistics() {\r\n\r\n        var countValues = 0;\r\n        // If email is guest email show message saying that as a guest player nos stats are recorded\r\n        firebaseDb.database().ref().child(currentUser.uid).once(\"value\").then(function (snapshot) {\r\n            console.log(\"snapshot\");\r\n            console.log(snapshot);\r\n            snapshot.forEach(function (childSnapshot) {\r\n                var key = childSnapshot.key;\r\n                var childData = childSnapshot.val();\r\n                userStatistics[key] = childData;\r\n                countValues += 1;\r\n\r\n            });\r\n\r\n            if (countValues == 0) {\r\n                userStatistics = {\r\n                    \"num_beginner_games\": 0, \"num_beginner_wins\": 0,\r\n                    \"num_intermediate_games\": 0, \"num_intermediate_wins\": 0,\r\n                    \"num_expert_games\": 0, \"num_expert_wins\": 0,\r\n                    \"num_ultimate_games\": 0, \"num_ultimate_wins\": 0,\r\n                }\r\n            }\r\n            setUserStats(userStatistics)\r\n\r\n            if (countValues == 8) {\r\n                setLoading(false);\r\n            }\r\n        }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Container\r\n                className=\"d-flex flex-column align-items-center justify-content-center\"\r\n                style={{ minHeight: \"100vh\" }}\r\n            >\r\n                <div className=\"w-200 text-center\">\r\n                    <Logo />\r\n                </div>\r\n                <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <h2 className=\"text-center mb-4\">Personal Statistics</h2>\r\n\r\n                            {\r\n                                (currentUser.email == \"guest@guest.com\") ? <GuestUserStatistics /> :\r\n                                    (loading) ? \"Loading...\" : <UserStatistics userStatistics={userStats} />\r\n                            }\r\n\r\n                        </Card.Body>\r\n\r\n                    </Card>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import 'core-js/es/array';\r\nimport 'core-js/es/map';\r\nimport 'core-js/es/set';\r\nimport \"core-js/stable\";\r\nimport 'raf/polyfill';\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport \"regenerator-runtime/runtime\";\r\nimport PrivateRoute from \"./components/helpers/PrivateRoute\";\r\nimport Dashboard from \"./components/interfaces/Dashboard\";\r\nimport ForgotPassword from \"./components/interfaces/ForgotPassword\";\r\nimport Game from \"./components/interfaces/Game\";\r\nimport Login from \"./components/interfaces/Login\";\r\nimport Signup from \"./components/interfaces/Signup\";\r\nimport Statistics from \"./components/interfaces/Statistics\";\r\nimport { AuthProvider } from \"./contexts/AuthContext\";\r\nimport './Game.css';\r\n\r\n/**\r\n * Main Application Component\r\n */\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <AuthProvider>\r\n          <Switch>\r\n            <PrivateRoute exact path=\"/\" component={Game} />\r\n            <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\r\n            <PrivateRoute exact path=\"/statistics\" component={Statistics} />\r\n            <Route path=\"/signup\" component={Signup} />\r\n            <Route path=\"/login\" component={Login} />\r\n            <Route path=\"/forgot-password\" component={ForgotPassword} />\r\n          </Switch>\r\n        </AuthProvider>\r\n      </Router>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default App\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}