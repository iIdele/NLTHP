{"ast":null,"code":"import _objectSpread from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import BackOfCard from'../cards/BackOfCard';import Card from'../cards/Card';import PlayerStatus from\"./PlayerStatus\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var dealerChipImageURL=\"/assets/logo.svg\";var chipCountImageURL=\"./assets/chips.svg\";var playerBetImageURL=\"./assets/bet.svg\";/**\r\n * Player component that creates the base player entity \r\n * for both the user and AI agents.\r\n */var Player=function Player(props){var arrayIndex=props.arrayIndex,playerAnimationSwitchboard=props.playerAnimationSwitchboard,endTransition=props.endTransition,hasDealerChip=props.hasDealerChip,isActive=props.isActive,phase=props.phase,clearCards=props.clearCards,_props$player=props.player,robot=_props$player.robot,folded=_props$player.folded,cards=_props$player.cards,avatarURL=_props$player.avatarURL,name=_props$player.name,chips=_props$player.chips,bet=_props$player.bet;/*\r\n     Assigns the correct format of card to players\r\n  */var makePlayerCards=function makePlayerCards(){var applyFoldedClassname;if(folded||clearCards){applyFoldedClassname=true;}// Hidden back of card for agents\nif(robot){return cards.map(function(card,index){if(phase!=='showdown'){return/*#__PURE__*/_jsx(BackOfCard,{cardData:card,applyFoldedClassname:applyFoldedClassname},index);}else{// Reset Animation Delay\nvar cardData=_objectSpread(_objectSpread({},card),{},{animationDelay:0});return/*#__PURE__*/_jsx(Card,{cardData:cardData,applyFoldedClassname:applyFoldedClassname},index);}});}// Visible front of card for user\nelse{return cards.map(function(card,index){return/*#__PURE__*/_jsx(Card,{cardData:card,applyFoldedClassname:applyFoldedClassname},index);});}};/*\r\n     Assign dealer chip to current round dealer\r\n  */var makeDealerChip=function makeDealerChip(){if(hasDealerChip){return/*#__PURE__*/_jsx(\"div\",{className:\"dealer-chips-div\",children:/*#__PURE__*/_jsx(\"img\",{src:dealerChipImageURL,alt:\"Dealer Chip\"})});}else return null;};/*\r\n     Check if player should have animation\r\n  */var Animating=function Animating(playerBoxIndex){if(playerAnimationSwitchboard[playerBoxIndex].Animating){return true;}else{return false;}};return/*#__PURE__*/_jsxs(\"div\",{className:\"player-wrapper p\".concat(arrayIndex),children:[/*#__PURE__*/_jsx(PlayerStatus,{index:arrayIndex,isActive:Animating(arrayIndex),content:playerAnimationSwitchboard[arrayIndex].content,endTransition:endTransition}),/*#__PURE__*/_jsx(\"div\",{className:\"flex-row abscard\",children:makePlayerCards()}),/*#__PURE__*/_jsx(\"div\",{className:\"player-div\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"player-icon-div\",children:[/*#__PURE__*/_jsx(\"img\",{className:\"player-icon-image\".concat(isActive?' activePlayer':''),src:avatarURL,alt:\"Player Avatar\"}),/*#__PURE__*/_jsx(\"h5\",{className:\"player-data-name\",style:{'fontSize':name.length<14?12:10},children:\"\".concat(name)}),/*#__PURE__*/_jsxs(\"div\",{className:\"player-data-stash-div\",children:[/*#__PURE__*/_jsx(\"img\",{className:\"player-data-stash-image\",src:chipCountImageURL,alt:\"Player Stash\"}),/*#__PURE__*/_jsx(\"h5\",{className:\"player-data-stash-head\",children:\"\".concat(chips)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"player-data-bet-div\",children:[/*#__PURE__*/_jsx(\"img\",{className:\"player-data-bet-image\",src:\"./assets/pot.svg\",alt:\"Player Bet\"}),/*#__PURE__*/_jsx(\"h5\",{className:\"player-data-bet-head\",children:\"\".concat(bet)})]}),makeDealerChip()]})})]});};export default Player;","map":{"version":3,"sources":["C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/src/components/players/Player.jsx"],"names":["React","BackOfCard","Card","PlayerStatus","dealerChipImageURL","chipCountImageURL","playerBetImageURL","Player","props","arrayIndex","playerAnimationSwitchboard","endTransition","hasDealerChip","isActive","phase","clearCards","player","robot","folded","cards","avatarURL","name","chips","bet","makePlayerCards","applyFoldedClassname","map","card","index","cardData","animationDelay","makeDealerChip","Animating","playerBoxIndex","content","length"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport BackOfCard from '../cards/BackOfCard';\r\nimport Card from '../cards/Card';\r\nimport PlayerStatus from \"./PlayerStatus\";\r\n\r\n\r\n\r\nconst dealerChipImageURL = \"/assets/logo.svg\";\r\nconst chipCountImageURL = \"./assets/chips.svg\";\r\nconst playerBetImageURL = \"./assets/bet.svg\";\r\n\r\n\r\n/**\r\n * Player component that creates the base player entity \r\n * for both the user and AI agents.\r\n */\r\nconst Player = (props) => {\r\n  const {\r\n    arrayIndex,\r\n    playerAnimationSwitchboard,\r\n    endTransition,\r\n    hasDealerChip,\r\n    isActive,\r\n    phase,\r\n    clearCards,\r\n    player: {\r\n      robot,\r\n      folded,\r\n      cards,\r\n      avatarURL,\r\n      name,\r\n      chips,\r\n      bet\r\n    }\r\n  } = props;\r\n\r\n  /*\r\n     Assigns the correct format of card to players\r\n  */\r\n  const makePlayerCards = () => {\r\n    let applyFoldedClassname;\r\n\r\n    if (folded || clearCards) {\r\n      applyFoldedClassname = true\r\n    }\r\n\r\n    // Hidden back of card for agents\r\n    if (robot) {\r\n      return cards.map((card, index) => {\r\n        if (phase !== 'showdown') {\r\n          return (\r\n            <BackOfCard key={index} cardData={card} applyFoldedClassname={applyFoldedClassname} />\r\n          );\r\n        } else {\r\n          // Reset Animation Delay\r\n          const cardData = { ...card, animationDelay: 0 }\r\n          return (\r\n            <Card key={index} cardData={cardData} applyFoldedClassname={applyFoldedClassname} />\r\n          );\r\n        }\r\n      });\r\n    }\r\n    // Visible front of card for user\r\n    else {\r\n      return cards.map((card, index) => {\r\n        return (\r\n          <Card key={index} cardData={card} applyFoldedClassname={applyFoldedClassname} />\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n     Assign dealer chip to current round dealer\r\n  */\r\n  const makeDealerChip = () => {\r\n    if (hasDealerChip) {\r\n      return (\r\n        <div className=\"dealer-chips-div\">\r\n          <img src={dealerChipImageURL} alt=\"Dealer Chip\" />\r\n        </div>\r\n      )\r\n    } else return null;\r\n  }\r\n\r\n  /*\r\n     Check if player should have animation\r\n  */\r\n  const Animating = (playerBoxIndex) => {\r\n    if (playerAnimationSwitchboard[playerBoxIndex].Animating) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={`player-wrapper p${arrayIndex}`}>\r\n      <PlayerStatus\r\n        index={arrayIndex}\r\n        isActive={Animating(arrayIndex)}\r\n        content={playerAnimationSwitchboard[arrayIndex].content}\r\n        endTransition={endTransition}\r\n      />\r\n      <div className='flex-row abscard'>\r\n        {makePlayerCards()}\r\n      </div>\r\n      <div className=\"player-div\">\r\n        <div className=\"player-icon-div\">\r\n          <img\r\n            className={`player-icon-image${(isActive ? ' activePlayer' : '')}`}\r\n            src={avatarURL}\r\n            alt=\"Player Avatar\"\r\n          />\r\n          <h5 className=\"player-data-name\" style={{ 'fontSize': (name.length < 14) ? 12 : 10 }}>\r\n            {`${name}`}\r\n          </h5>\r\n          <div className=\"player-data-stash-div\">\r\n            <img className=\"player-data-stash-image\" src={chipCountImageURL} alt=\"Player Stash\" />\r\n            <h5 className=\"player-data-stash-head\">{`${chips}`}</h5>\r\n          </div>\r\n          <div className=\"player-data-bet-div\">\r\n            <img className=\"player-data-bet-image\" src=\"./assets/pot.svg\" alt=\"Player Bet\" />\r\n            <h5 className=\"player-data-bet-head\">{`${bet}`}</h5>\r\n          </div>\r\n          {makeDealerChip()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Player;"]},"metadata":{},"sourceType":"module"}