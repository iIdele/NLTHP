{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manny\\\\2021-ca400-idelegi2-puzzuos2\\\\src\\\\ui\\\\src\\\\components\\\\players\\\\Player.jsx\";\nimport React from 'react';\nimport BackOfCard from '../cards/BackOfCard';\nimport Card from '../cards/Card';\n/**\r\n * Player component that creates the base player entity \r\n * for both the user and AI agents.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = props => {\n  const {\n    player: {\n      agent,\n      folded,\n      cards,\n      avatar,\n      name,\n      chips,\n      bet\n    },\n    arrayIndex,\n    playerAnimationCase,\n    hasDealerChip,\n    isActive,\n    phase,\n    clearCards\n  } = props;\n  const dealerChip = \"/assets/logo.svg\";\n  const chipCount = \"./assets/chips.svg\";\n  const playerBet = \"./assets/bet.svg\";\n  /*\r\n  Select class name depending on the value of the bool.\r\n  */\n\n  const determineName = bool => {\n    if (bool) {\n      return ' activePlayer';\n    } else {\n      return '';\n    }\n  };\n  /*\r\n  Assigns the correct format of card to players\r\n  */\n\n\n  const makePlayerCards = () => {\n    let setFoldedClassName;\n\n    if (folded || clearCards) {\n      setFoldedClassName = true;\n    } // Hidden back of card for agents\n\n\n    if (agent) {\n      return cards.map((card, index) => {\n        if (phase !== 'showdown') {\n          return /*#__PURE__*/_jsxDEV(BackOfCard, {\n            cardData: card,\n            setFoldedClassName: setFoldedClassName\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this);\n        } else {\n          // Reset Animation Delay\n          const cardData = { ...card,\n            animationDelay: 0\n          };\n          return /*#__PURE__*/_jsxDEV(Card, {\n            cardData: cardData,\n            setFoldedClassName: setFoldedClassName\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this);\n        }\n      });\n    } // Visible front of card for user\n    else {\n        return cards.map((card, index) => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            cardData: card,\n            setFoldedClassName: setFoldedClassName\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 11\n          }, this);\n        });\n      }\n  };\n  /*\r\n  Choose font size based on length of player name.\r\n  */\n\n\n  const fontSize = name => {\n    var len = name.length;\n\n    if (len < 14) {\n      return 12;\n    } else {\n      return 10;\n    }\n  };\n  /*\r\n  Assign dealer chip to current round dealer\r\n  */\n\n\n  const makeDealerChip = () => {\n    if (hasDealerChip) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dealer-chips-div\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: dealerChip,\n          alt: \"Dealer Chip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this);\n    } else return null;\n  };\n  /*\r\n  Check if player should have animation\r\n  */\n\n\n  const Animating = playerBoxIndex => {\n    if (playerAnimationCase[playerBoxIndex].Animating) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `player-wrapper p${arrayIndex}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-row abscard\",\n      children: makePlayerCards()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-icon-div\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: `player-icon-image${determineName(isActive)}`,\n          src: avatar,\n          alt: \"Player Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"player-data-name\",\n          style: {\n            'fontSize': fontSize(name)\n          },\n          children: `${name}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-data-stash-div\",\n          \"aria-label\": `Player Ante: ${bet}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"player-data-stash-image\",\n            src: chipCount,\n            alt: \"Player Stash\",\n            \"aria-label\": `Player Ante: ${bet}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"player-data-stash-head\",\n            children: [`${chips}`, \" aria-label=\", `Player Ante: ${bet}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-data-bet-div\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"player-data-bet-image\",\n            src: playerBet,\n            alt: \"Player Ante\",\n            \"aria-label\": `Player Ante: ${bet}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"player-data-bet-head\",\n            children: [`${bet}`, \" aria-label=\", `Player Ante: ${bet}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), makeDealerChip()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/src/components/players/Player.jsx"],"names":["React","BackOfCard","Card","Player","props","player","agent","folded","cards","avatar","name","chips","bet","arrayIndex","playerAnimationCase","hasDealerChip","isActive","phase","clearCards","dealerChip","chipCount","playerBet","determineName","bool","makePlayerCards","setFoldedClassName","map","card","index","cardData","animationDelay","fontSize","len","length","makeDealerChip","Animating","playerBoxIndex"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport BackOfCard from '../cards/BackOfCard';\r\nimport Card from '../cards/Card';\r\n\r\n/**\r\n * Player component that creates the base player entity \r\n * for both the user and AI agents.\r\n */\r\nconst Player = (props) => {\r\n  const {\r\n    player: {\r\n      agent,\r\n      folded,\r\n      cards,\r\n      avatar,\r\n      name,\r\n      chips,\r\n      bet\r\n    },\r\n    arrayIndex,\r\n    playerAnimationCase,\r\n    hasDealerChip,\r\n    isActive,\r\n    phase,\r\n    clearCards,\r\n  } = props;\r\n\r\n  const dealerChip = \"/assets/logo.svg\";\r\n  const chipCount = \"./assets/chips.svg\";\r\n  const playerBet = \"./assets/bet.svg\";\r\n\r\n  /*\r\n  Select class name depending on the value of the bool.\r\n  */\r\n  const determineName = (bool) => {\r\n    if (bool){\r\n      return ' activePlayer'\r\n    }\r\n    else {\r\n      return ''\r\n    }\r\n  }\r\n\r\n  /*\r\n  Assigns the correct format of card to players\r\n  */\r\n  const makePlayerCards = () => {\r\n    let setFoldedClassName;\r\n\r\n    if (folded || clearCards) {\r\n      setFoldedClassName = true\r\n    }\r\n\r\n    // Hidden back of card for agents\r\n    if (agent) {\r\n      return cards.map((card, index) => {\r\n        if (phase !== 'showdown') {\r\n          return (\r\n            <BackOfCard key={index} cardData={card} setFoldedClassName={setFoldedClassName} />\r\n          );\r\n        } else {\r\n          // Reset Animation Delay\r\n          const cardData = { ...card, animationDelay: 0 }\r\n          return (\r\n            <Card key={index} cardData={cardData} setFoldedClassName={setFoldedClassName} />\r\n          );\r\n        }\r\n      });\r\n    }\r\n    // Visible front of card for user\r\n    else {\r\n      return cards.map((card, index) => {\r\n        return (\r\n          <Card key={index} cardData={card} setFoldedClassName={setFoldedClassName} />\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  /*\r\n  Choose font size based on length of player name.\r\n  */\r\n  const fontSize = (name) => {\r\n    var len = name.length\r\n    if (len < 14) {\r\n      return 12\r\n    }\r\n    else {\r\n      return 10\r\n    }\r\n  }\r\n\r\n  /*\r\n  Assign dealer chip to current round dealer\r\n  */\r\n  const makeDealerChip = () => {\r\n    if (hasDealerChip) {\r\n      return (\r\n        <div className=\"dealer-chips-div\">\r\n          <img src={dealerChip} alt=\"Dealer Chip\" />\r\n        </div>\r\n      )\r\n    } else return null;\r\n  }\r\n\r\n  /*\r\n  Check if player should have animation\r\n  */\r\n  const Animating = (playerBoxIndex) => {\r\n    if (playerAnimationCase[playerBoxIndex].Animating) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`player-wrapper p${arrayIndex}`}>\r\n      <div className='flex-row abscard'>\r\n        {makePlayerCards()}\r\n      </div>\r\n      <div className=\"player-div\">\r\n        <div className=\"player-icon-div\">\r\n          <img\r\n            className={`player-icon-image${determineName(isActive)}`}\r\n            src={avatar}\r\n            alt=\"Player Avatar\"\r\n          />\r\n          <h4 className=\"player-data-name\" style={{ 'fontSize': fontSize(name)}}>\r\n            {`${name}`}\r\n          </h4>\r\n          <div className=\"player-data-stash-div\" aria-label={`Player Ante: ${bet}`}>\r\n            <img className=\"player-data-stash-image\" src={chipCount} alt=\"Player Stash\" aria-label={`Player Ante: ${bet}`} />\r\n            <h4 className=\"player-data-stash-head\">{`${chips}`} aria-label={`Player Ante: ${bet}`}</h4>\r\n          </div>\r\n          <div className=\"player-data-bet-div\">\r\n            <img className=\"player-data-bet-image\" src={playerBet} alt=\"Player Ante\" aria-label={`Player Ante: ${bet}`} />\r\n            <h4 className=\"player-data-bet-head\">{`${bet}`} aria-label={`Player Ante: ${bet}`}</h4>\r\n          </div>\r\n          {makeDealerChip()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Player;"]},"metadata":{},"sourceType":"module"}