{"ast":null,"code":"import _objectSpread from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _createForOfIteratorHelper from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{cloneDeep}from'lodash';import{choosePhaseStartActivePlayer,manageOverflowIndex}from'./playersService.js';/**\r\n * cardsService provides key services to the App that\r\n * regard the Poker game cards. Such services include \r\n * shuffling the cards, dealing the cards finding \r\n * the best hand, etc.\r\n */var totalNumCards=52;var cards=['2','3','4','5','6','7','8','9','10','J','Q','K','A'];var suits=['Heart','Spade','Club','Diamond'];// start from 2 as A (or 1) is the higest ranking card\nvar VALUE_MAP={2:1,3:2,4:3,5:4,6:5,7:6,8:7,9:8,10:9,J:10,Q:11,K:12,A:13};/*\r\n  Generate the deck of 52 cards \r\n */var makeDeckOfCards=function makeDeckOfCards(){var deck=[];// get every combination of suit and value\nvar _iterator=_createForOfIteratorHelper(suits),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var suit=_step.value;var _iterator2=_createForOfIteratorHelper(cards),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var card=_step2.value;deck.push({cardFace:card,suit:suit,value:VALUE_MAP[card]});}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return deck;};/*\r\n  Shuffle cards to randomize their order\r\n */var shuffleCards=function shuffleCards(deck){var shuffledDeck=new Array(totalNumCards);var filledSlots=[];for(var i=0;i<totalNumCards;i++){// if all cards except 1 are given \nif(i===51){// assign the last slot to the remaining card\nvar lastSlot=shuffledDeck.findIndex(function(el){return typeof el=='undefined';});shuffledDeck[lastSlot]=deck[i];filledSlots.push(lastSlot);}else{// randomize order of all cards one by one\nvar shuffleToPosition=randomStartPosition(0,totalNumCards-1);while(filledSlots.includes(shuffleToPosition)){shuffleToPosition=randomStartPosition(0,totalNumCards-1);}shuffledDeck[shuffleToPosition]=deck[i];filledSlots.push(shuffleToPosition);}}return shuffledDeck;};/*\r\n  Deal players cards at start of each hand\r\n */var dealPlayerCards=function dealPlayerCards(state){state.clearCards=false;var animationDelay=0;// deal cards until every player at table has 2\nwhile(state.players[state.activePlayerIndex].cards.length<2){var _getCards=getCards(state.deck,1),mutableDeckCopy=_getCards.mutableDeckCopy,chosenCards=_getCards.chosenCards;// add animation delay \nchosenCards.animationDelay=animationDelay;animationDelay=animationDelay+250;var newDeck=_toConsumableArray(mutableDeckCopy);state.players[state.activePlayerIndex].cards.push(chosenCards);state.deck=newDeck;state.activePlayerIndex=manageOverflowIndex(state.activePlayerIndex,1,state.players.length,'up');}if(state.players[state.activePlayerIndex].cards.length===2){state.activePlayerIndex=manageOverflowIndex(state.blindIndex.big,1,state.players.length,'up');// set first phase of betting\nstate.phase='betting1';return state;}};/*\r\n  Find random start position for giving cards (assigns dealer chip)\r\n */var randomStartPosition=function randomStartPosition(min,max){min=Math.ceil(min);max=Math.floor(max);return Math.floor(Math.random()*(max-min+1))+min;};/*\r\n  Get cards dealt to a player\r\n */var getCards=function getCards(deck,numToGet){// make shallow copy of deck to not alter original deck attributes\nvar mutableDeckCopy=_toConsumableArray(deck);var chosenCards;if(numToGet===1){// get last card \nchosenCards=mutableDeckCopy.pop();}else{// get chosen cards from mutable deck copy one by one\nchosenCards=[];for(var i=0;i<numToGet;i++){chosenCards.push(mutableDeckCopy.pop());}}return{mutableDeckCopy:mutableDeckCopy,chosenCards:chosenCards};};/*\r\n  Deal flop cards\r\n */var dealFlopCards=function dealFlopCards(state){var animationDelay=0;var _getCards2=getCards(state.deck,3),mutableDeckCopy=_getCards2.mutableDeckCopy,chosenCards=_getCards2.chosenCards;// deal first 3 chosen flop cards\nvar _iterator3=_createForOfIteratorHelper(chosenCards),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var card=_step3.value;// add animation delay \ncard.animationDelay=animationDelay;animationDelay=animationDelay+250;state.communityCards.push(card);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}state.deck=mutableDeckCopy;state=choosePhaseStartActivePlayer(state);// set second phase of betting\nstate.phase='betting2';return state;};/*\r\n  Deal turn cards\r\n */var dealTurnCards=function dealTurnCards(state){var _getCards3=getCards(state.deck,1),mutableDeckCopy=_getCards3.mutableDeckCopy,chosenCards=_getCards3.chosenCards;chosenCards.animationDelay=0;state.communityCards.push(chosenCards);state.deck=mutableDeckCopy;state=choosePhaseStartActivePlayer(state);// set third phase of betting\nstate.phase='betting3';return state;};/*\r\n  Deal river cards\r\n */var dealRiverCards=function dealRiverCards(state){var _getCards4=getCards(state.deck,1),mutableDeckCopy=_getCards4.mutableDeckCopy,chosenCards=_getCards4.chosenCards;chosenCards.animationDelay=0;state.communityCards.push(chosenCards);state.deck=mutableDeckCopy;state=choosePhaseStartActivePlayer(state);// set fourth phase of betting\nstate.phase='betting4';return state;};/*\r\n  Deal table Community cards \r\n */var dealOtherCommunityCards=function dealOtherCommunityCards(state){// check number of cards left to deal\nvar cardsToPop=5-state.communityCards.length;if(cardsToPop>=1){var animationDelay=0;var _getShowdownCards=getShowdownCards(state.deck,cardsToPop),mutableDeckCopy=_getShowdownCards.mutableDeckCopy,chosenCards=_getShowdownCards.chosenCards;var _iterator4=_createForOfIteratorHelper(chosenCards),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var card=_step4.value;card.animationDelay=animationDelay;animationDelay=animationDelay+250;state.communityCards.push(card);}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}state.deck=mutableDeckCopy;}// when completed move to showdown phase (phase to check winners of hand)\nstate.phase='showdown';return state;};/*\r\n  Perform player showdown at end of hand\r\n */var playerShowDown=function playerShowDown(state){// find players that are still in the hand\nvar _iterator5=_createForOfIteratorHelper(state.players),_step5;try{var _loop=function _loop(){var player=_step5.value;var frequencyHistogram={};var suitHistogram={};// build each player's best hand\nplayer.showDownHand.hand=player.cards.concat(state.communityCards);player.showDownHand.descendingSortHand=player.showDownHand.hand.map(function(el){return el;}).sort(function(a,b){return b.value-a.value;});// This mutates showDownHand.hand in place(!!)\nplayer.showDownHand.descendingSortHand.forEach(function(card){frequencyHistogram[card.cardFace]=frequencyHistogram[card.cardFace]+1||1;suitHistogram[card.suit]=suitHistogram[card.suit]+1||1;});player.frequencyHistogram=frequencyHistogram;player.suitHistogram=suitHistogram;var valueSet=generateValueSet(player.showDownHand.descendingSortHand);// check value of each player's hand\nvar _checkIfFlush=checkIfFlush(suitHistogram),isFlush=_checkIfFlush.isFlush,flushedSuit=_checkIfFlush.flushedSuit;var flushCards=isFlush&&player.showDownHand.descendingSortHand.filter(function(card){return card.suit===flushedSuit;});var isRoyalFlush=isFlush&&checkIfRoyalFlush(flushCards);var _ref=isFlush&&checkIfStraightFlush(flushCards),isStraightFlush=_ref.isStraightFlush,isLowStraightFlush=_ref.isLowStraightFlush,concurrentSFCardValues=_ref.concurrentSFCardValues,concurrentSFCardValuesLow=_ref.concurrentSFCardValuesLow;var _checkIfStraight=checkIfStraight(valueSet),isStraight=_checkIfStraight.isStraight,isLowStraight=_checkIfStraight.isLowStraight,concurrentCardValues=_checkIfStraight.concurrentCardValues,concurrentCardValuesLow=_checkIfStraight.concurrentCardValuesLow;var _checkFrequencyHistog=checkFrequencyHistogram(player.showDownHand.descendingSortHand,frequencyHistogram),isFourOfAKind=_checkFrequencyHistog.isFourOfAKind,isFullHouse=_checkFrequencyHistog.isFullHouse,isThreeOfAKind=_checkFrequencyHistog.isThreeOfAKind,isTwoPair=_checkFrequencyHistog.isTwoPair,isPair=_checkFrequencyHistog.isPair,frequencyHistogramMetaData=_checkFrequencyHistog.frequencyHistogramMetaData;var isNoPair=!isRoyalFlush&&!isStraightFlush&&!isFourOfAKind&&!isFullHouse&&!isFlush&&!isStraight&&!isThreeOfAKind&&!isTwoPair&&!isPair;// set value of each player's hand\nplayer.showDownHand.bools={isRoyalFlush:isRoyalFlush,isStraightFlush:isStraightFlush,isFourOfAKind:isFourOfAKind,isFullHouse:isFullHouse,isFlush:isFlush,isStraight:isStraight,isThreeOfAKind:isThreeOfAKind,isTwoPair:isTwoPair,isPair:isPair,isNoPair:isNoPair};player.showDownHand.heldRankHierarchy=[{name:'Royal Flush',match:isRoyalFlush},{name:'Straight Flush',match:isStraightFlush},{name:'Four Of A Kind',match:isFourOfAKind},{name:'Full House',match:isFullHouse},{name:'Flush',match:isFlush},{name:'Straight',match:isStraight},{name:'Three Of A Kind',match:isThreeOfAKind},{name:'Two Pair',match:isTwoPair},{name:'Pair',match:isPair},{name:'No Pair',match:isNoPair}];player.metaData=frequencyHistogramMetaData;// get best hand between players in showdown\nvar highRankPosition=player.showDownHand.heldRankHierarchy.findIndex(function(el){return el.match===true;});player.showDownHand.bestHandRank=player.showDownHand.heldRankHierarchy[highRankPosition].name;player.showDownHand.bestHand=findBestHand(player.showDownHand.descendingSortHand,player.showDownHand.bestHandRank,flushedSuit,flushCards,concurrentCardValues,concurrentCardValuesLow,isLowStraight,isLowStraightFlush,concurrentSFCardValues,concurrentSFCardValuesLow,frequencyHistogramMetaData);};for(_iterator5.s();!(_step5=_iterator5.n()).done;){_loop();}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}return assignSidePots(state);};/*\r\n  Get cards of players that are part of showdown\r\n */var getShowdownCards=function getShowdownCards(deck,numToPop){// make shallow copy of deck to not alter original deck attributes\nvar mutableDeckCopy=_toConsumableArray(deck);var chosenCards;// get last card \nif(numToPop===1){chosenCards=[mutableDeckCopy.pop()];}else{// get chosen cards from mutable deck copy one by one\nchosenCards=[];for(var i=0;i<numToPop;i++){chosenCards.push(mutableDeckCopy.pop());}}return{mutableDeckCopy:mutableDeckCopy,chosenCards:chosenCards};};/*\r\n  Find best hand amongst players still in a hand\r\n */var findBestHand=function findBestHand(hand,bestRank,flushedSuit,flushCards,concurrentCardValues,concurrentCardValuesLow,isLowStraight,isLowStraightFlush,concurrentSFCardValues,concurrentSFCardValuesLow,frequencyHistogramMetaData){// check if hand matches any value from best to worst (Royal Flush to High Card)\nswitch(bestRank){// check if hand is Ten, Jack, Queen, King and Ace (all of same suit)\ncase'Royal Flush':{return flushCards.slice(0,5);}// check if hand is five cards in sequence (all of same suit)\ncase'Straight Flush':{if(isLowStraightFlush&&concurrentSFCardValues.length<5){concurrentSFCardValuesLow[0]=13;return concurrentSFCardValuesLow.reduce(function(acc,cur,index){if(index<5){acc.push(flushCards[flushCards.findIndex(function(match){return match.value===cur;})]);}return acc;},[]).reverse();}else{return concurrentSFCardValues.reduce(function(acc,cur,index){if(index<5){acc.push(flushCards[flushCards.findIndex(function(match){return match.value===cur;})]);}return acc;},[]);}}// check if hand is four cards all of the same denomination\ncase'Four Of A Kind':{var bestHand=[];var mutableHand=cloneDeep(hand);var _loop2=function _loop2(i){var indexOfQuad=mutableHand.findIndex(function(match){return match.cardFace===frequencyHistogramMetaData.quads[0].face;});bestHand.push(mutableHand[indexOfQuad]);mutableHand=mutableHand.filter(function(match,index){return index!==indexOfQuad;});};for(var i=0;i<4;i++){_loop2(i);}return bestHand.concat(mutableHand.slice(0,1));}// check if hand is three cards of one denomination and two cards of another denomination\ncase'Full House':{var _bestHand=[];var _mutableHand=cloneDeep(hand);if(frequencyHistogramMetaData.tripples.length>1){var _loop3=function _loop3(_i){var indexOfTripple=_mutableHand.findIndex(function(match){return match.cardFace===frequencyHistogramMetaData.tripples[0].face;});_bestHand.push(_mutableHand[indexOfTripple]);_mutableHand=_mutableHand.filter(function(match,index){return index!==indexOfTripple;});};for(var _i=0;_i<3;_i++){_loop3(_i);}var _loop4=function _loop4(_i2){var indexOfPair=_mutableHand.findIndex(function(match){return match.cardFace===frequencyHistogramMetaData.tripples[1].face;});_bestHand.push(_mutableHand[indexOfPair]);_mutableHand=_mutableHand.filter(function(match,index){return index!==indexOfPair;});};for(var _i2=0;_i2<2;_i2++){_loop4(_i2);}return _bestHand;}else{var _loop5=function _loop5(_i3){var indexOfTripple=_mutableHand.findIndex(function(match){return match.cardFace===frequencyHistogramMetaData.tripples[0].face;});_bestHand.push(_mutableHand[indexOfTripple]);_mutableHand=_mutableHand.filter(function(match,index){return index!==indexOfTripple;});};for(var _i3=0;_i3<3;_i3++){_loop5(_i3);}var _loop6=function _loop6(_i4){var indexOfPair=_mutableHand.findIndex(function(match){return match.cardFace===frequencyHistogramMetaData.pairs[0].face;});_bestHand.push(_mutableHand[indexOfPair]);_mutableHand=_mutableHand.filter(function(match,index){return index!==indexOfPair;});};for(var _i4=0;_i4<2;_i4++){_loop6(_i4);}return _bestHand;}}// check if hand is five cards all of the same suit\ncase'Flush':{return flushCards.slice(0,5);}// check if hand is five cards of any suit in sequence\ncase'Straight':{if(isLowStraight&&concurrentCardValues.length<5){concurrentCardValuesLow[0]=13;return concurrentCardValuesLow.reduce(function(acc,cur,index){if(index<5){acc.push(hand[hand.findIndex(function(match){return match.value===cur;})]);}return acc;},[]).reverse();}else{return concurrentCardValues.reduce(function(acc,cur,index){if(index<5){acc.push(hand[hand.findIndex(function(match){return match.value===cur;})]);}return acc;},[]);}}// check if hand is three cards of the same denomination and two unmatched cards\ncase'Three Of A Kind':{var _bestHand2=[];var _mutableHand2=cloneDeep(hand);var _loop7=function _loop7(_i5){var indexOfTripple=_mutableHand2.findIndex(function(match){return match.cardFace===frequencyHistogramMetaData.tripples[0].face;});_bestHand2.push(_mutableHand2[indexOfTripple]);_mutableHand2=_mutableHand2.filter(function(match,index){return index!==indexOfTripple;});};for(var _i5=0;_i5<3;_i5++){_loop7(_i5);}return _bestHand2.concat(_mutableHand2.slice(0,2));}// check if hand is two sets of two cards of the same denomination and any fifth card\ncase'Two Pair':{var _bestHand3=[];var _mutableHand3=cloneDeep(hand);var _loop8=function _loop8(_i6){var indexOfPair=_mutableHand3.findIndex(function(match){return match.cardFace===frequencyHistogramMetaData.pairs[0].face;});_bestHand3.push(_mutableHand3[indexOfPair]);_mutableHand3=_mutableHand3.filter(function(match,index){return index!==indexOfPair;});};for(var _i6=0;_i6<2;_i6++){_loop8(_i6);}var _loop9=function _loop9(_i7){var indexOfPair=_mutableHand3.findIndex(function(match){return match.cardFace===frequencyHistogramMetaData.pairs[1].face;});_bestHand3.push(_mutableHand3[indexOfPair]);_mutableHand3=_mutableHand3.filter(function(match,index){return index!==indexOfPair;});};for(var _i7=0;_i7<2;_i7++){_loop9(_i7);}return _bestHand3.concat(_mutableHand3.slice(0,1));}// check if hand is two cards of the same denomination and three unmatched cards\ncase'Pair':{var _bestHand4=[];var _mutableHand4=cloneDeep(hand);var _loop10=function _loop10(_i8){var indexOfPair=_mutableHand4.findIndex(function(card){return card.cardFace===frequencyHistogramMetaData.pairs[0].face;});// CONSIDER : \n_bestHand4.push(_mutableHand4[indexOfPair]);_mutableHand4=_mutableHand4.filter(function(card,index){return index!==indexOfPair;});};for(var _i8=0;_i8<2;_i8++){_loop10(_i8);}return _bestHand4.concat(_mutableHand4.slice(0,3));}// check if hand is all five cards are unmatched\ncase'No Pair':{return hand.slice(0,5);}default:throw Error('Recieved unfamiliar rank argument in findBestHand()');}};/*\r\n  Determine ranking order of players' hands\r\n */var determinePlayerHandsHierarchy=function determinePlayerHandsHierarchy(sortedComparator,handRank){var winnerHierarchy=[];var loserHierarchy=[];var processComparator=function processComparator(comparator){var round=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(comparator[0].length===1){var _comparator$0$=comparator[0][0],name=_comparator$0$.name,bestHand=_comparator$0$.bestHand;winnerHierarchy=winnerHierarchy.concat([{name:name,bestHand:bestHand,handRank:handRank}]);return;}var filterableComparator=sortedComparator.map(function(el){return el;});var frame=comparator[round];var _handleSnapshotFrame=handleSnapshotFrame(frame),winningFrame=_handleSnapshotFrame.winningFrame,losingFrame=_handleSnapshotFrame.losingFrame;// find order of players who did not win hand\nif(losingFrame.length>0){var lowerTierComparator=filterableComparator.map(function(frame){return frame.filter(function(snapshot){return losingFrame.some(function(snapshotToMatchName){return snapshotToMatchName.name===snapshot.name;});});});// Push the filtered comparator to the start of the losers queue. \nloserHierarchy=[lowerTierComparator].concat(loserHierarchy);}// if only one winner they are best hand\nif(winningFrame.length===1){var _winningFrame$=winningFrame[0],_name=_winningFrame$.name,_bestHand5=_winningFrame$.bestHand;winnerHierarchy=winnerHierarchy.concat([{name:_name,bestHand:_bestHand5,handRank:handRank}]);// find order of players who won hand if more than one\n}else if(round===sortedComparator.length-1){var filteredWinnerSnapshots=winningFrame.map(function(snapshot){return{name:snapshot.name,bestHand:snapshot.bestHand,handRank:handRank};});winnerHierarchy=winnerHierarchy.concat([filteredWinnerSnapshots]);}else{var higherTierComparator=filterableComparator.map(function(frame){return frame.filter(function(snapshot){return winningFrame.some(function(snapshotToMatchName){return snapshotToMatchName.name===snapshot.name;});});});processComparator(higherTierComparator,round+1);}};var processLowTierComparators=function processLowTierComparators(loserHierarchyFrame){if(loserHierarchy.length>0){var loserComparatorToProcess=loserHierarchyFrame[0];loserHierarchy=loserHierarchyFrame.slice(1);processComparator(loserComparatorToProcess);processLowTierComparators(loserHierarchy);}};processComparator(sortedComparator);processLowTierComparators(loserHierarchy);return winnerHierarchy;};/*\r\n  Build ranking of hands of each player still in hand\r\n */var buildPlayerRankings=function buildPlayerRankings(state){// only consider players still active in hand\nvar activePlayers=state.players.filter(function(player){return!player.folded;});var hierarchy=[];// map of possible hand rankings\nvar rankMap=new Map([['Royal Flush',[]],['Straight Flush',[]],['Four Of A Kind',[]],['Full House',[]],['Flush',[]],['Straight',[]],['Three Of A Kind',[]],['Two Pair',[]],['Pair',[]],['No Pair',[]]]);// for each player find rank and add to ranking map\nactivePlayers.forEach(function(player,playerIndex){var name=player.name,_player$showDownHand=player.showDownHand,bestHandRank=_player$showDownHand.bestHandRank,bestHand=_player$showDownHand.bestHand;rankMap.get(bestHandRank).push({name:name,bestHand:bestHand,playerIndex:playerIndex});});var _iterator6=_createForOfIteratorHelper(rankMap),_step6;try{var _loop11=function _loop11(){var _step6$value=_slicedToArray(_step6.value,2),handRank=_step6$value[0],playersWhoHoldThisRank=_step6$value[1];if(playersWhoHoldThisRank.length>0){// only one player can have Royal Flush so they would win regardless of the rest\nif(handRank==='Royal Flush'){var formattedPlayersWhoHoldThisRank=playersWhoHoldThisRank.map(function(player){return{name:player.name,bestHand:player.bestHand,handRank:handRank};});hierarchy=hierarchy.concat(formattedPlayersWhoHoldThisRank);return\"continue\";}// if only one player has a ranking that player is the best for that ranking\nif(playersWhoHoldThisRank.length===1){var _playersWhoHoldThisRa=playersWhoHoldThisRank[0],name=_playersWhoHoldThisRa.name,bestHand=_playersWhoHoldThisRa.bestHand;hierarchy=hierarchy.concat([{name:name,bestHand:bestHand,handRank:handRank}]);// if more than one player has same ranking must find which one has higher value\n}else if(playersWhoHoldThisRank.length>1){var sortedComparator=createRankingsComparator(handRank,playersWhoHoldThisRank).map(function(snapshot){return snapshot.sort(function(a,b){return b.card.value-a.card.value;});});var winnerHierarchy=determinePlayerHandsHierarchy(sortedComparator,handRank);hierarchy=hierarchy.concat(winnerHierarchy);}}};for(_iterator6.s();!(_step6=_iterator6.n()).done;){var _ret=_loop11();if(_ret===\"continue\")continue;}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}return hierarchy;};/*\r\n  Rank hands of players still active in hand\r\n */var rankPlayersHands=function rankPlayersHands(state,contestants){// map of possible hand rankings\nvar rankMap=new Map([['Royal Flush',[]],['Straight Flush',[]],['Four Of A Kind',[]],['Full House',[]],['Flush',[]],['Straight',[]],['Three Of A Kind',[]],['Two Pair',[]],['Pair',[]],['No Pair',[]]]);var _iterator7=_createForOfIteratorHelper(contestants),_step7;try{var _loop12=function _loop12(){var contestant=_step7.value;var playerIndex=state.players.findIndex(function(player){return player.name===contestant;});var player=state.players[playerIndex];// if player is active in hand\nif(!player.folded){// rank player hand\nrankMap.get(player.showDownHand.bestHandRank).push({name:player.name,playerIndex:playerIndex,bestHand:player.showDownHand.bestHand});}};for(_iterator7.s();!(_step7=_iterator7.n()).done;){_loop12();}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}return rankMap;};/*\r\n  Handle and get snapshot with winners and losers of hand\r\n */var handleSnapshotFrame=function handleSnapshotFrame(frame){var highValue=frame[0].card.value;var winningFrame=frame.filter(function(snapshot){return snapshot.card.value===highValue;});var losingFrame=frame.filter(function(snapshot){return snapshot.card.value<highValue;});return{winningFrame:winningFrame,losingFrame:losingFrame};};/*\r\n  Assign winnings to hand winners (handles pot splits too)\r\n */var assignWinnings=function assignWinnings(state,rankMap,prize){var winnerFound=false;// find hand winners\nrankMap.forEach(function(contestants,rank,map){if(!winnerFound){// if only one player active in hand they win\nif(contestants.length===1){winnerFound=true;console.log(\"Winner, \",contestants[0].name,\" , beating out the competition with a \",rank);state=payWinnings(state,contestants,prize,rank);// if more than one player active in hand find winner\n}else if(contestants.length>1){console.log(contestants);winnerFound=true;// get active players hand rankings\nvar winners=findHandWinner(createRankingsComparator(rank,contestants),rank);// if only one player wins they get all the pot\nif(winners.length===1){console.log(\"Winner, \",winners[0].name,\" , beating out the competition with a \",rank);state=payWinnings(state,winners,prize,rank);// if multilple players win the pot is split amongst them\n}else{console.log(\"We have a tie! Split the pot amongst \",winners,\" Who will take the pot with their \",rank);state=payWinnings(state,winners,prize,rank);}}}});return state;};/*\r\n  Assign side pots when there are multiple winners for the same hand\r\n */var assignSidePots=function assignSidePots(state){// find winners of hand\nstate.playerHierarchy=buildPlayerRankings(state);console.log(\"Ultimate Player Hierarchy Determined:\");console.log(state.playerHierarchy);// assign each side pot to the corresponding winner\nvar _iterator8=_createForOfIteratorHelper(state.sidePots),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var sidePot=_step8.value;var rankMap=rankPlayersHands(state,sidePot.contestants);state=assignWinnings(state,rankMap,sidePot.potValue);}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}state.players=state.players.map(function(player){return _objectSpread(_objectSpread({},player),{},{roundEndChips:player.chips});});return state;};/*\r\n  Pay winnings to hand winners\r\n */var payWinnings=function payWinnings(state,winners,prize,rank){// if only one winner they win all the pot\nif(winners.length===1){state.showDownMessages=state.showDownMessages.concat([{users:[winners[0].name],prize:prize,rank:rank}]);console.log(\"Transferring \",prize,\" chips to \",winners[0].name);state.players[winners[0].playerIndex].chips+=prize;state.pot-=prize;// if more than one winner split pot accordingly between them\n}else if(winners.length>1){var overflow=prize%winners.length;var splitPot=Math.floor(prize/winners.length);console.log(\"Mediating Tie. Total Prize \",prize,\" split into \",winners.length,\" portions with an overflow of \",overflow);state.showDownMessages=state.showDownMessages.concat([{users:winners.map(function(winner){return winner.name;}),prize:splitPot,rank:rank}]);winners.forEach(function(winner){state.players[winner.playerIndex].chips+=splitPot;state.pot-=splitPot;});}return state;};/*\r\n  Create hand rankings comparator to compare hand rankings\r\n */var createRankingsComparator=function createRankingsComparator(rank,playerData){var comparator;switch(rank){// check if hand is Ten, Jack, Queen, King and Ace (all of same suit)\ncase'Royal Flush':{comparator=Array.from({length:1});playerData.forEach(function(playerShowdownData,index){comparator.push({// there can only be one royal flush which will be the winner regardless of other hand rankings\nname:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});});break;}// check if hand is four cards all of the same denomination\ncase'Four Of A Kind':{comparator=Array.from({length:2},function(){return Array.from({length:0});});playerData.forEach(function(playerShowdownData,index){comparator[0].push({// four cards all of the same denomination\ncard:playerData[index].bestHand[0],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});comparator[1].push({// last card is unmatched\ncard:playerData[index].bestHand[4],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});});break;}// check if hand is three cards of one denomination and two cards of another denomination\ncase'Full House':{comparator=Array.from({length:2},function(){return Array.from({length:0});});playerData.forEach(function(playerShowdownData,index){comparator[0].push({// three cards of one denomination\ncard:playerData[index].bestHand[0],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});comparator[1].push({// two cards of another denomination\ncard:playerData[index].bestHand[3],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});});break;}// check if hand is three cards of one denomination and two cards of another denomination\n// or if all five cards are unmatched\ncase'Flush':case'No Pair':{comparator=Array.from({length:5},function(){return Array.from({length:0});});playerData.forEach(function(playerShowdownData,index){for(var i=0;i<5;i++){comparator[i].push({// check all 5 cards of a flush or no-pair\ncard:playerData[index].bestHand[i],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});}});break;}// check if hand is three cards of the same denomination and two unmatched cards\ncase'Three Of A Kind':{comparator=Array.from({length:3},function(){return Array.from({length:0});});playerData.forEach(function(playerShowdownData,index){comparator[0].push({// three cards of the same denomination\ncard:playerData[index].bestHand[0],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});comparator[1].push({// fourth card is unmatched\ncard:playerData[index].bestHand[3],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});comparator[2].push({// fifth card is unmatched\ncard:playerData[index].bestHand[4],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});});break;}// check if hand is five cards of any suit in sequence\n// or if hand is five cards in sequence (all of same suit)\ncase'Straight':case'Straight Flush':{comparator=Array.from({length:1},function(){return Array.from({length:0});});playerData.forEach(function(playerShowdownData,index){comparator[0].push({// check highest card of a straight as it will determine the straight value\ncard:playerData[index].bestHand[0],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});});break;}// check if hand is two sets of two cards of the same denomination and any fifth card\ncase'Two Pair':{comparator=Array.from({length:3},function(){return Array.from({length:0});});playerData.forEach(function(playerShowdownData,index){comparator[0].push({// two cards of the same denomination\ncard:playerData[index].bestHand[0],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});comparator[1].push({// another two cards of the same denomination\ncard:playerData[index].bestHand[2],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});comparator[2].push({// fifth unmatched card\ncard:playerData[index].bestHand[4],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});});break;}// check if hand is two cards of the same denomination and three unmatched cards\ncase'Pair':{comparator=Array.from({length:4},function(){return Array.from({length:0});});playerData.forEach(function(playerShowdownData,index){comparator[0].push({// two cards of the same denomination\ncard:playerData[index].bestHand[0],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});comparator[1].push({// third unmtached card\ncard:playerData[index].bestHand[2],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});comparator[2].push({// fourth unmtached card\ncard:playerData[index].bestHand[3],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});comparator[3].push({// fifth unmtached card\ncard:playerData[index].bestHand[4],name:playerData[index].name,playerIndex:playerData[index].playerIndex,bestHand:playerData[index].bestHand});});break;}default:throw Error('Recieved unfamiliar rank argument in createRankingsComparator()');}return comparator;};/*\r\n  Find current hand winner\r\n */var findHandWinner=function findHandWinner(comparator,rank){var winners;if(rank==='Royal Flush')return comparator;var _loop13=function _loop13(i){var highValue=0;var losers=[];// sort player rankings comparator \nwinners=comparator[i].sort(function(a,b){return b.card.value-a.card.value;}).reduce(function(acc,cur,index){// add player with higher ranking hands first\nif(cur.card.value>highValue){highValue=cur.card.value;acc.push({name:cur.name,playerIndex:cur.playerIndex});return acc;}else if(cur.card.value===highValue){acc.push({name:cur.name,playerIndex:cur.playerIndex});return acc;// then add non active players (back of list)\n}else if(cur.card.value<highValue){losers.push(cur.name);return acc;}},[]);if(winners.length===1||i===comparator.length){return{v:winners};}else{if(losers.length>=1){losers.forEach(function(nameToExtract){comparator=comparator.map(function(snapshot){return snapshot.filter(function(el){return el.name!==nameToExtract;});});});}}};for(var i=0;i<comparator.length;i++){var _ret2=_loop13(i);if(typeof _ret2===\"object\")return _ret2.v;}return winners;};/*\r\n  Check if hand is a Flush\r\n */var checkIfFlush=function checkIfFlush(suitHistogram){var isFlush;var flushedSuit;// check if all five cards have the same suit\nfor(var suit in suitHistogram){if(suitHistogram[suit]>=5){return{isFlush:true,flushedSuit:suit};}}return{isFlush:false,flushedSuit:null};};/*\r\n  Check if hand is a Royal Flush\r\n */var checkIfRoyalFlush=function checkIfRoyalFlush(flushMatchCards){// check if hand is Ten, Jack, Queen, King and Ace (all of same suit)\nif(flushMatchCards[0].value===13&&flushMatchCards[1].value===12&&flushMatchCards[2].value===11&&flushMatchCards[3].value===10&&flushMatchCards[4].value===10){return true;}else{return false;}};/*\r\n  Check if hand is a Straight\r\n */var checkIfStraight=function checkIfStraight(valueSet){// if less than five cards are valuable to the hand it is not a straight\nif(valueSet.length<5)return false;var numConcurrentCards=0;var concurrentCardValues=[];// check if hand is five cards of any suit in sequence\nfor(var i=1;i<valueSet.length;i++){if(numConcurrentCards===5){return{isStraight:true,concurrentCardValues:concurrentCardValues};}if(valueSet[i]-valueSet[i-1]===-1){if(numConcurrentCards===0){numConcurrentCards=2;concurrentCardValues.push(valueSet[i-1]);concurrentCardValues.push(valueSet[i]);}else{numConcurrentCards++;concurrentCardValues.push(valueSet[i]);}}else{numConcurrentCards=0;concurrentCardValues=[];}}if(numConcurrentCards>=5){return{isStraight:true,concurrentCardValues:concurrentCardValues};}else{// check if is straight with Ace, two, three, four, five\nif(valueSet[0]===13){var _checkIfLowerStraight=checkIfLowerStraight(cloneDeep(valueSet)),isLowStraight=_checkIfLowerStraight.isLowStraight,concurrentCardValuesLow=_checkIfLowerStraight.concurrentCardValuesLow;if(isLowStraight)return{isStraight:true,isLowStraight:isLowStraight,concurrentCardValues:concurrentCardValues,concurrentCardValuesLow:concurrentCardValuesLow};}return{isStraight:false,isLowStraight:false,concurrentCardValues:concurrentCardValues};}};/*\r\n  Check if hand is a Straight Flush\r\n */var checkIfStraightFlush=function checkIfStraightFlush(flushMatchCards){// check if hand is five cards in sequence (all of same suit)\nvar valueSet=generateValueSet(flushMatchCards);var _checkIfStraight2=checkIfStraight(valueSet),isStraight=_checkIfStraight2.isStraight,isLowStraight=_checkIfStraight2.isLowStraight,concurrentCardValues=_checkIfStraight2.concurrentCardValues,concurrentCardValuesLow=_checkIfStraight2.concurrentCardValuesLow;return{isStraightFlush:isStraight,isLowStraightFlush:isLowStraight,concurrentSFCardValues:concurrentCardValues,concurrentSFCardValuesLow:concurrentCardValuesLow};};/*\r\n  Check how many hand rankings have occured and with what frequence \r\n  and order\r\n */var checkFrequencyHistogram=function checkFrequencyHistogram(hand,frequencyHistogram){// set hand rankings to not seen \nvar isFourOfAKind=false;var isFullHouse=false;var isThreeOfAKind=false;var isTwoPair=false;var isPair=false;var numTripples=0;var numPairs=0;var frequencyHistogramMetaData={pairs:[],tripples:[],quads:[]};// check if hand is four cards all of the same denomination\nfor(var cardFace in frequencyHistogram){if(frequencyHistogram[cardFace]===4){isFourOfAKind=true;frequencyHistogramMetaData.quads.push({face:cardFace,value:VALUE_MAP[cardFace]});}// check if hand is three cards of the same denomination and two unmatched cards\nif(frequencyHistogram[cardFace]===3){isThreeOfAKind=true;numTripples++;frequencyHistogramMetaData.tripples.push({face:cardFace,value:VALUE_MAP[cardFace]});}// check if hand is two cards of the same denomination and three unmatched cards\nif(frequencyHistogram[cardFace]===2){isPair=true;numPairs++;frequencyHistogramMetaData.pairs.push({face:cardFace,value:VALUE_MAP[cardFace]});}}// sort histogram from best hand to worst hand\nfrequencyHistogramMetaData.pairs=frequencyHistogramMetaData.pairs.map(function(el){return el;}).sort(function(a,b){return b.value-a.value;});frequencyHistogramMetaData.tripples=frequencyHistogramMetaData.tripples.map(function(el){return el;}).sort(function(a,b){return b.value-a.value;});frequencyHistogramMetaData.quads=frequencyHistogramMetaData.quads.map(function(el){return el;}).sort(function(a,b){return b.value-a.value;});// check if hand is three cards of one denomination and two cards of another denomination (full house)\nif(numTripples>=2||numPairs>=1&&numTripples>=1){isFullHouse=true;}// check if hand is two sets of two cards of the same denomination and any fifth card (Two Pairs)\nif(numPairs>=2){isTwoPair=true;}return{isFourOfAKind:isFourOfAKind,isFullHouse:isFullHouse,isThreeOfAKind:isThreeOfAKind,isTwoPair:isTwoPair,isPair:isPair,frequencyHistogramMetaData:frequencyHistogramMetaData};};/*\r\n  Check if hand is straight with Ace, two, three, four, five\r\n */var checkIfLowerStraight=function checkIfLowerStraight(valueSetCopy){var numConcurrentCards=0;var concurrentCardValuesLow=[];// Convert Ace which has highest value of 13 to lowest value 0 from which straight would start\nvalueSetCopy[0]=0;// sort card values\nvar sortedValueSetCopy=valueSetCopy.map(function(el){return el;}).sort(function(a,b){return a-b;});// check if Ace, two, three, four, five are found\nfor(var i=1;i<5;i++){if(numConcurrentCards>=5){return{isLowStraight:true,concurrentCardValuesLow:concurrentCardValuesLow};}if(sortedValueSetCopy[i]-sortedValueSetCopy[i-1]===1){if(numConcurrentCards===0){numConcurrentCards=2;concurrentCardValuesLow.push(sortedValueSetCopy[i-1]);concurrentCardValuesLow.push(sortedValueSetCopy[i]);}else{numConcurrentCards++;concurrentCardValuesLow.push(sortedValueSetCopy[i]);}}else{numConcurrentCards=0;concurrentCardValuesLow=[];}}if(numConcurrentCards>=5){return{isLowStraight:true,concurrentCardValuesLow:concurrentCardValuesLow};}else{return{isLowStraight:false,concurrentCardValuesLow:concurrentCardValuesLow};}};/*\r\n  Generate set of five cards that add value to hand\r\n */var generateValueSet=function generateValueSet(hand){return Array.from(new Set(hand.map(function(cardInfo){return cardInfo.value;})));};export{makeDeckOfCards,shuffleCards,dealPlayerCards,getCards,dealFlopCards,dealTurnCards,dealRiverCards,dealOtherCommunityCards,playerShowDown,checkIfFlush,checkIfRoyalFlush,checkIfStraightFlush,checkIfStraight,checkFrequencyHistogram,generateValueSet};","map":{"version":3,"sources":["C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/src/services/cardsService.js"],"names":["cloneDeep","choosePhaseStartActivePlayer","manageOverflowIndex","totalNumCards","cards","suits","VALUE_MAP","J","Q","K","A","makeDeckOfCards","deck","suit","card","push","cardFace","value","shuffleCards","shuffledDeck","Array","filledSlots","i","lastSlot","findIndex","el","shuffleToPosition","randomStartPosition","includes","dealPlayerCards","state","clearCards","animationDelay","players","activePlayerIndex","length","getCards","mutableDeckCopy","chosenCards","newDeck","blindIndex","big","phase","min","max","Math","ceil","floor","random","numToGet","pop","dealFlopCards","communityCards","dealTurnCards","dealRiverCards","dealOtherCommunityCards","cardsToPop","getShowdownCards","playerShowDown","player","frequencyHistogram","suitHistogram","showDownHand","hand","concat","descendingSortHand","map","sort","a","b","forEach","valueSet","generateValueSet","checkIfFlush","isFlush","flushedSuit","flushCards","filter","isRoyalFlush","checkIfRoyalFlush","checkIfStraightFlush","isStraightFlush","isLowStraightFlush","concurrentSFCardValues","concurrentSFCardValuesLow","checkIfStraight","isStraight","isLowStraight","concurrentCardValues","concurrentCardValuesLow","checkFrequencyHistogram","isFourOfAKind","isFullHouse","isThreeOfAKind","isTwoPair","isPair","frequencyHistogramMetaData","isNoPair","bools","heldRankHierarchy","name","match","metaData","highRankPosition","bestHandRank","bestHand","findBestHand","assignSidePots","numToPop","bestRank","slice","reduce","acc","cur","index","reverse","mutableHand","indexOfQuad","quads","face","tripples","indexOfTripple","indexOfPair","pairs","Error","determinePlayerHandsHierarchy","sortedComparator","handRank","winnerHierarchy","loserHierarchy","processComparator","comparator","round","filterableComparator","frame","handleSnapshotFrame","winningFrame","losingFrame","lowerTierComparator","snapshot","some","snapshotToMatchName","filteredWinnerSnapshots","higherTierComparator","processLowTierComparators","loserHierarchyFrame","loserComparatorToProcess","buildPlayerRankings","activePlayers","folded","hierarchy","rankMap","Map","playerIndex","get","playersWhoHoldThisRank","formattedPlayersWhoHoldThisRank","createRankingsComparator","rankPlayersHands","contestants","contestant","highValue","assignWinnings","prize","winnerFound","rank","console","log","payWinnings","winners","findHandWinner","playerHierarchy","sidePots","sidePot","potValue","roundEndChips","chips","showDownMessages","users","pot","overflow","splitPot","winner","playerData","from","playerShowdownData","losers","nameToExtract","flushMatchCards","numConcurrentCards","checkIfLowerStraight","numTripples","numPairs","valueSetCopy","sortedValueSetCopy","Set","cardInfo"],"mappings":"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","sourcesContent":["import { cloneDeep } from 'lodash';\r\nimport { choosePhaseStartActivePlayer, manageOverflowIndex } from './playersService.js';\r\n\r\n/**\r\n * cardsService provides key services to the App that\r\n * regard the Poker game cards. Such services include \r\n * shuffling the cards, dealing the cards finding \r\n * the best hand, etc.\r\n */\r\n\r\nconst totalNumCards = 52;\r\nconst cards = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\r\nconst suits = ['Heart', 'Spade', 'Club', 'Diamond'];\r\n\r\n// start from 2 as A (or 1) is the higest ranking card\r\nconst VALUE_MAP = {\r\n\t2: 1,\r\n\t3: 2,\r\n\t4: 3,\r\n\t5: 4,\r\n\t6: 5,\r\n\t7: 6,\r\n\t8: 7,\r\n\t9: 8,\r\n\t10: 9,\r\n\tJ: 10,\r\n\tQ: 11,\r\n\tK: 12,\r\n\tA: 13,\r\n};\r\n\r\n\r\n\r\n/*\r\n  Generate the deck of 52 cards \r\n */\r\nconst makeDeckOfCards = () => {\r\n\tconst deck = [];\r\n\r\n\t// get every combination of suit and value\r\n\tfor (let suit of suits) {\r\n\t\tfor (let card of cards) {\r\n\t\t\tdeck.push({\r\n\t\t\t\tcardFace: card,\r\n\t\t\t\tsuit: suit,\r\n\t\t\t\tvalue: VALUE_MAP[card]\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\treturn deck\r\n}\r\n\r\n\r\n/*\r\n  Shuffle cards to randomize their order\r\n */\r\nconst shuffleCards = (deck) => {\r\n\tlet shuffledDeck = new Array(totalNumCards);\r\n\tlet filledSlots = [];\r\n\tfor (let i = 0; i < totalNumCards; i++) {\r\n\t\t// if all cards except 1 are given \r\n\t\tif (i === 51) {\r\n\t\t\t// assign the last slot to the remaining card\r\n\t\t\tconst lastSlot = shuffledDeck.findIndex((el) => typeof el == 'undefined');\r\n\t\t\tshuffledDeck[lastSlot] = deck[i];\r\n\t\t\tfilledSlots.push(lastSlot);\r\n\t\t} else {\r\n\t\t\t// randomize order of all cards one by one\r\n\t\t\tlet shuffleToPosition = randomStartPosition(0, totalNumCards - 1);\r\n\t\t\twhile (filledSlots.includes(shuffleToPosition)) {\r\n\t\t\t\tshuffleToPosition = randomStartPosition(0, totalNumCards - 1);\r\n\t\t\t}\r\n\t\t\tshuffledDeck[shuffleToPosition] = deck[i];\r\n\t\t\tfilledSlots.push(shuffleToPosition);\r\n\t\t}\r\n\t}\r\n\treturn shuffledDeck\r\n}\r\n\r\n\r\n/*\r\n  Deal players cards at start of each hand\r\n */\r\nconst dealPlayerCards = (state) => {\r\n\tstate.clearCards = false;\r\n\tlet animationDelay = 0;\r\n\t// deal cards until every player at table has 2\r\n\twhile (state.players[state.activePlayerIndex].cards.length < 2) {\r\n\t\tconst { mutableDeckCopy, chosenCards } = getCards(state.deck, 1);\r\n\r\n\t\t// add animation delay \r\n\t\tchosenCards.animationDelay = animationDelay;\r\n\t\tanimationDelay = animationDelay + 250;\r\n\r\n\t\tconst newDeck = [...mutableDeckCopy];\r\n\t\tstate.players[state.activePlayerIndex].cards.push(chosenCards);\r\n\r\n\t\tstate.deck = newDeck;\r\n\t\tstate.activePlayerIndex = manageOverflowIndex(state.activePlayerIndex, 1, state.players.length, 'up');\r\n\t}\r\n\tif (state.players[state.activePlayerIndex].cards.length === 2) {\r\n\t\tstate.activePlayerIndex = manageOverflowIndex(state.blindIndex.big, 1, state.players.length, 'up');\r\n\t\t// set first phase of betting\r\n\t\tstate.phase = 'betting1';\r\n\t\treturn state;\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n  Find random start position for giving cards (assigns dealer chip)\r\n */\r\nconst randomStartPosition = (min, max) => {\r\n\tmin = Math.ceil(min);\r\n\tmax = Math.floor(max);\r\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n\r\n/*\r\n  Get cards dealt to a player\r\n */\r\nconst getCards = (deck, numToGet) => {\r\n\t// make shallow copy of deck to not alter original deck attributes\r\n\tconst mutableDeckCopy = [...deck];\r\n\tlet chosenCards;\r\n\tif (numToGet === 1) {\r\n\t\t// get last card \r\n\t\tchosenCards = mutableDeckCopy.pop();\r\n\t} else {\r\n\t\t// get chosen cards from mutable deck copy one by one\r\n\t\tchosenCards = [];\r\n\t\tfor (let i = 0; i < numToGet; i++) {\r\n\t\t\tchosenCards.push(mutableDeckCopy.pop());\r\n\t\t}\r\n\t}\r\n\treturn { mutableDeckCopy, chosenCards }\r\n}\r\n\r\n\r\n/*\r\n  Deal flop cards\r\n */\r\nconst dealFlopCards = (state) => {\r\n\tlet animationDelay = 0;\r\n\tconst { mutableDeckCopy, chosenCards } = getCards(state.deck, 3);\r\n\r\n\t// deal first 3 chosen flop cards\r\n\tfor (let card of chosenCards) {\r\n\t\t// add animation delay \r\n\t\tcard.animationDelay = animationDelay;\r\n\t\tanimationDelay = animationDelay + 250;\r\n\t\tstate.communityCards.push(card);\r\n\t}\r\n\r\n\tstate.deck = mutableDeckCopy;\r\n\tstate = choosePhaseStartActivePlayer(state)\r\n\t// set second phase of betting\r\n\tstate.phase = 'betting2';\r\n\r\n\treturn state;\r\n}\r\n\r\n/*\r\n  Deal turn cards\r\n */\r\nconst dealTurnCards = (state) => {\r\n\tconst { mutableDeckCopy, chosenCards } = getCards(state.deck, 1);\r\n\tchosenCards.animationDelay = 0;\r\n\r\n\tstate.communityCards.push(chosenCards);\r\n\tstate.deck = mutableDeckCopy;\r\n\tstate = choosePhaseStartActivePlayer(state)\r\n\t// set third phase of betting\r\n\tstate.phase = 'betting3'\r\n\r\n\treturn state\r\n}\r\n\r\n\r\n/*\r\n  Deal river cards\r\n */\r\nconst dealRiverCards = (state) => {\r\n\tconst { mutableDeckCopy, chosenCards } = getCards(state.deck, 1);\r\n\tchosenCards.animationDelay = 0;\r\n\r\n\tstate.communityCards.push(chosenCards);\r\n\tstate.deck = mutableDeckCopy;\r\n\tstate = choosePhaseStartActivePlayer(state)\r\n\t// set fourth phase of betting\r\n\tstate.phase = 'betting4'\r\n\r\n\treturn state\r\n}\r\n\r\n/*\r\n  Deal table Community cards \r\n */\r\nconst dealOtherCommunityCards = (state) => {\r\n\t// check number of cards left to deal\r\n\tconst cardsToPop = 5 - state.communityCards.length\r\n\tif (cardsToPop >= 1) {\r\n\t\tlet animationDelay = 0;\r\n\t\tconst { mutableDeckCopy, chosenCards } = getShowdownCards(state.deck, cardsToPop);\r\n\r\n\t\tfor (let card of chosenCards) {\r\n\t\t\tcard.animationDelay = animationDelay;\r\n\t\t\tanimationDelay = animationDelay + 250;\r\n\t\t\tstate.communityCards.push(card);\r\n\t\t}\r\n\r\n\t\tstate.deck = mutableDeckCopy;\r\n\t}\r\n\t// when completed move to showdown phase (phase to check winners of hand)\r\n\tstate.phase = 'showdown'\r\n\treturn state\r\n}\r\n\r\n/*\r\n  Perform player showdown at end of hand\r\n */\r\nconst playerShowDown = (state) => {\r\n\t// find players that are still in the hand\r\n\tfor (let player of state.players) {\r\n\t\tconst frequencyHistogram = {};\r\n\t\tconst suitHistogram = {};\r\n\r\n\t\t// build each player's best hand\r\n\t\tplayer.showDownHand.hand = player.cards.concat(state.communityCards);\r\n\t\tplayer.showDownHand.descendingSortHand = player.showDownHand.hand.map(el => el).sort((a, b) => b.value - a.value); // This mutates showDownHand.hand in place(!!)\r\n\r\n\t\tplayer.showDownHand.descendingSortHand.forEach(card => {\r\n\t\t\tfrequencyHistogram[card.cardFace] = (frequencyHistogram[card.cardFace] + 1 || 1);\r\n\t\t\tsuitHistogram[card.suit] = (suitHistogram[card.suit] + 1 || 1);\r\n\t\t})\r\n\r\n\t\tplayer.frequencyHistogram = frequencyHistogram;\r\n\t\tplayer.suitHistogram = suitHistogram;\r\n\r\n\t\tconst valueSet = generateValueSet(player.showDownHand.descendingSortHand);\r\n\r\n\t\t// check value of each player's hand\r\n\t\tconst { isFlush, flushedSuit } = checkIfFlush(suitHistogram);\r\n\t\tconst flushCards = (isFlush) && player.showDownHand.descendingSortHand.filter(card => card.suit === flushedSuit);\r\n\t\tconst isRoyalFlush = (isFlush) && checkIfRoyalFlush(flushCards);\r\n\t\tconst { isStraightFlush, isLowStraightFlush, concurrentSFCardValues, concurrentSFCardValuesLow } = (isFlush) && checkIfStraightFlush(flushCards)\r\n\t\tconst { isStraight, isLowStraight, concurrentCardValues, concurrentCardValuesLow } = checkIfStraight(valueSet);\r\n\t\tconst { isFourOfAKind, isFullHouse, isThreeOfAKind, isTwoPair, isPair, frequencyHistogramMetaData } = checkFrequencyHistogram(player.showDownHand.descendingSortHand, frequencyHistogram);\r\n\t\tconst isNoPair = ((!isRoyalFlush) && (!isStraightFlush) && (!isFourOfAKind) && (!isFullHouse) && (!isFlush) && (!isStraight) && (!isThreeOfAKind) && (!isTwoPair) && (!isPair))\r\n\r\n\t\t// set value of each player's hand\r\n\t\tplayer.showDownHand.bools = {\r\n\t\t\tisRoyalFlush,\r\n\t\t\tisStraightFlush,\r\n\t\t\tisFourOfAKind,\r\n\t\t\tisFullHouse,\r\n\t\t\tisFlush,\r\n\t\t\tisStraight,\r\n\t\t\tisThreeOfAKind,\r\n\t\t\tisTwoPair,\r\n\t\t\tisPair,\r\n\t\t\tisNoPair,\r\n\t\t}\r\n\r\n\t\tplayer.showDownHand.heldRankHierarchy = [{\r\n\t\t\tname: 'Royal Flush',\r\n\t\t\tmatch: isRoyalFlush,\r\n\t\t}, {\r\n\t\t\tname: 'Straight Flush',\r\n\t\t\tmatch: isStraightFlush\r\n\t\t}, {\r\n\t\t\tname: 'Four Of A Kind',\r\n\t\t\tmatch: isFourOfAKind,\r\n\t\t}, {\r\n\t\t\tname: 'Full House',\r\n\t\t\tmatch: isFullHouse,\r\n\t\t}, {\r\n\t\t\tname: 'Flush',\r\n\t\t\tmatch: isFlush,\r\n\t\t}, {\r\n\t\t\tname: 'Straight',\r\n\t\t\tmatch: isStraight,\r\n\t\t}, {\r\n\t\t\tname: 'Three Of A Kind',\r\n\t\t\tmatch: isThreeOfAKind,\r\n\t\t}, {\r\n\t\t\tname: 'Two Pair',\r\n\t\t\tmatch: isTwoPair,\r\n\t\t}, {\r\n\t\t\tname: 'Pair',\r\n\t\t\tmatch: isPair,\r\n\t\t}, {\r\n\t\t\tname: 'No Pair',\r\n\t\t\tmatch: isNoPair\r\n\t\t}];\r\n\r\n\t\tplayer.metaData = frequencyHistogramMetaData\r\n\r\n\t\t// get best hand between players in showdown\r\n\t\tconst highRankPosition = player.showDownHand.heldRankHierarchy.findIndex(el => el.match === true);\r\n\t\tplayer.showDownHand.bestHandRank = player.showDownHand.heldRankHierarchy[highRankPosition].name;\r\n\t\tplayer.showDownHand.bestHand = findBestHand(player.showDownHand.descendingSortHand, player.showDownHand.bestHandRank, flushedSuit, flushCards, concurrentCardValues, concurrentCardValuesLow, isLowStraight, isLowStraightFlush, concurrentSFCardValues, concurrentSFCardValuesLow, frequencyHistogramMetaData)\r\n\r\n\t}\r\n\r\n\treturn assignSidePots(state)\r\n\r\n}\r\n\r\n/*\r\n  Get cards of players that are part of showdown\r\n */\r\nconst getShowdownCards = (deck, numToPop) => {\r\n\t// make shallow copy of deck to not alter original deck attributes\r\n\tconst mutableDeckCopy = [...deck];\r\n\tlet chosenCards;\r\n\t// get last card \r\n\tif (numToPop === 1) {\r\n\t\tchosenCards = [mutableDeckCopy.pop()];\r\n\t} else {\r\n\t\t// get chosen cards from mutable deck copy one by one\r\n\t\tchosenCards = [];\r\n\t\tfor (let i = 0; i < numToPop; i++) {\r\n\t\t\tchosenCards.push(mutableDeckCopy.pop());\r\n\t\t}\r\n\t}\r\n\treturn { mutableDeckCopy, chosenCards }\r\n}\r\n\r\n/*\r\n  Find best hand amongst players still in a hand\r\n */\r\nconst findBestHand = (hand, bestRank, flushedSuit, flushCards, concurrentCardValues, concurrentCardValuesLow, isLowStraight, isLowStraightFlush, concurrentSFCardValues, concurrentSFCardValuesLow, frequencyHistogramMetaData) => {\r\n\t// check if hand matches any value from best to worst (Royal Flush to High Card)\r\n\tswitch (bestRank) {\r\n\t\t// check if hand is Ten, Jack, Queen, King and Ace (all of same suit)\r\n\t\tcase ('Royal Flush'): {\r\n\t\t\treturn flushCards.slice(0, 5)\r\n\t\t}\r\n\t\t// check if hand is five cards in sequence (all of same suit)\r\n\t\tcase ('Straight Flush'): {\r\n\t\t\tif (isLowStraightFlush && concurrentSFCardValues.length < 5) {\r\n\t\t\t\tconcurrentSFCardValuesLow[0] = 13\r\n\t\t\t\treturn concurrentSFCardValuesLow.reduce((acc, cur, index) => {\r\n\t\t\t\t\tif (index < 5) {\r\n\t\t\t\t\t\tacc.push(flushCards[flushCards.findIndex(match => match.value === cur)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn acc;\r\n\t\t\t\t}, []).reverse();\r\n\t\t\t} else {\r\n\t\t\t\treturn concurrentSFCardValues.reduce((acc, cur, index) => {\r\n\t\t\t\t\tif (index < 5) {\r\n\t\t\t\t\t\tacc.push(flushCards[flushCards.findIndex(match => match.value === cur)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn acc;\r\n\t\t\t\t}, []);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// check if hand is four cards all of the same denomination\r\n\t\tcase ('Four Of A Kind'): {\r\n\t\t\tconst bestHand = [];\r\n\t\t\tlet mutableHand = cloneDeep(hand);\r\n\r\n\t\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\t\tconst indexOfQuad = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.quads[0].face);\r\n\t\t\t\tbestHand.push(mutableHand[indexOfQuad])\r\n\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfQuad)\r\n\t\t\t}\r\n\r\n\t\t\treturn bestHand.concat(mutableHand.slice(0, 1))\r\n\t\t}\r\n\t\t// check if hand is three cards of one denomination and two cards of another denomination\r\n\t\tcase ('Full House'): {\r\n\t\t\tconst bestHand = [];\r\n\t\t\tlet mutableHand = cloneDeep(hand);\r\n\t\t\tif (frequencyHistogramMetaData.tripples.length > 1) {\r\n\t\t\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\t\t\tconst indexOfTripple = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.tripples[0].face);\r\n\t\t\t\t\tbestHand.push(mutableHand[indexOfTripple])\r\n\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfTripple)\r\n\t\t\t\t}\r\n\t\t\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\t\t\tconst indexOfPair = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.tripples[1].face);\r\n\t\t\t\t\tbestHand.push(mutableHand[indexOfPair])\r\n\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfPair)\r\n\t\t\t\t}\r\n\t\t\t\treturn bestHand\r\n\t\t\t} else {\r\n\t\t\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\t\t\tconst indexOfTripple = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.tripples[0].face);\r\n\t\t\t\t\tbestHand.push(mutableHand[indexOfTripple])\r\n\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfTripple)\r\n\t\t\t\t}\r\n\t\t\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\t\t\tconst indexOfPair = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.pairs[0].face);\r\n\t\t\t\t\tbestHand.push(mutableHand[indexOfPair])\r\n\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfPair)\r\n\t\t\t\t}\r\n\t\t\t\treturn bestHand\r\n\t\t\t}\r\n\t\t}\r\n\t\t// check if hand is five cards all of the same suit\r\n\t\tcase ('Flush'): {\r\n\t\t\treturn flushCards.slice(0, 5)\r\n\t\t}\r\n\t\t// check if hand is five cards of any suit in sequence\r\n\t\tcase ('Straight'): {\r\n\t\t\tif (isLowStraight && concurrentCardValues.length < 5) {\r\n\t\t\t\tconcurrentCardValuesLow[0] = 13\r\n\t\t\t\treturn concurrentCardValuesLow.reduce((acc, cur, index) => {\r\n\t\t\t\t\tif (index < 5) {\r\n\t\t\t\t\t\tacc.push(hand[hand.findIndex(match => match.value === cur)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn acc;\r\n\t\t\t\t}, []).reverse();\r\n\t\t\t} else {\r\n\t\t\t\treturn concurrentCardValues.reduce((acc, cur, index) => {\r\n\t\t\t\t\tif (index < 5) {\r\n\t\t\t\t\t\tacc.push(hand[hand.findIndex(match => match.value === cur)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn acc;\r\n\t\t\t\t}, []);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// check if hand is three cards of the same denomination and two unmatched cards\r\n\t\tcase ('Three Of A Kind'): {\r\n\t\t\tconst bestHand = [];\r\n\t\t\tlet mutableHand = cloneDeep(hand);\r\n\r\n\t\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\t\tconst indexOfTripple = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.tripples[0].face);\r\n\t\t\t\tbestHand.push(mutableHand[indexOfTripple])\r\n\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfTripple)\r\n\t\t\t}\r\n\r\n\t\t\treturn bestHand.concat(mutableHand.slice(0, 2))\r\n\t\t}\r\n\t\t// check if hand is two sets of two cards of the same denomination and any fifth card\r\n\t\tcase ('Two Pair'): {\r\n\t\t\tconst bestHand = [];\r\n\t\t\tlet mutableHand = cloneDeep(hand);\r\n\t\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\t\tconst indexOfPair = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.pairs[0].face);\r\n\t\t\t\tbestHand.push(mutableHand[indexOfPair])\r\n\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfPair)\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = 0; i < 2; i++) {\r\n\r\n\t\t\t\tconst indexOfPair = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.pairs[1].face);\r\n\t\t\t\tbestHand.push(mutableHand[indexOfPair])\r\n\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfPair)\r\n\t\t\t}\r\n\t\t\treturn bestHand.concat(mutableHand.slice(0, 1))\r\n\r\n\t\t}\r\n\t\t// check if hand is two cards of the same denomination and three unmatched cards\r\n\t\tcase ('Pair'): {\r\n\t\t\tconst bestHand = [];\r\n\t\t\tlet mutableHand = cloneDeep(hand);\r\n\t\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\t\tconst indexOfPair = mutableHand.findIndex(card => card.cardFace === frequencyHistogramMetaData.pairs[0].face);\r\n\t\t\t\t// CONSIDER : \r\n\t\t\t\tbestHand.push(mutableHand[indexOfPair])\r\n\t\t\t\tmutableHand = mutableHand.filter((card, index) => index !== indexOfPair)\r\n\t\t\t}\r\n\t\t\treturn bestHand.concat(mutableHand.slice(0, 3))\r\n\r\n\r\n\t\t}\r\n\t\t// check if hand is all five cards are unmatched\r\n\t\tcase ('No Pair'): {\r\n\t\t\treturn hand.slice(0, 5)\r\n\t\t}\r\n\t\tdefault: throw Error('Recieved unfamiliar rank argument in findBestHand()');\r\n\t}\r\n}\r\n\r\n/*\r\n  Determine ranking order of players' hands\r\n */\r\nconst determinePlayerHandsHierarchy = (sortedComparator, handRank) => {\r\n\tlet winnerHierarchy = [];\r\n\tlet loserHierarchy = [];\r\n\tconst processComparator = (comparator, round = 0) => {\r\n\t\tif (comparator[0].length === 1) {\r\n\t\t\tconst { name, bestHand } = comparator[0][0]\r\n\t\t\twinnerHierarchy = winnerHierarchy.concat([{ name, bestHand, handRank }])\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet filterableComparator = sortedComparator.map(el => el);\r\n\t\tconst frame = comparator[round];\r\n\t\tconst { winningFrame, losingFrame } = handleSnapshotFrame(frame);\r\n\t\t// find order of players who did not win hand\r\n\t\tif (losingFrame.length > 0) {\r\n\t\t\tconst lowerTierComparator = filterableComparator.map(frame => {\r\n\t\t\t\treturn frame.filter(snapshot => {\r\n\t\t\t\t\treturn losingFrame.some(snapshotToMatchName => {\r\n\t\t\t\t\t\treturn snapshotToMatchName.name === snapshot.name;\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t// Push the filtered comparator to the start of the losers queue. \r\n\t\t\tloserHierarchy = [lowerTierComparator].concat(loserHierarchy);\r\n\t\t}\r\n\t\t// if only one winner they are best hand\r\n\t\tif (winningFrame.length === 1) {\r\n\t\t\tconst { name, bestHand } = winningFrame[0];\r\n\t\t\twinnerHierarchy = winnerHierarchy.concat([{\r\n\t\t\t\tname,\r\n\t\t\t\tbestHand,\r\n\t\t\t\thandRank\r\n\t\t\t}])\r\n\t\t\t// find order of players who won hand if more than one\r\n\t\t} else if (round === (sortedComparator.length - 1)) {\r\n\t\t\tconst filteredWinnerSnapshots = winningFrame.map(snapshot => ({\r\n\t\t\t\tname: snapshot.name,\r\n\t\t\t\tbestHand: snapshot.bestHand,\r\n\t\t\t\thandRank\r\n\t\t\t}))\r\n\t\t\twinnerHierarchy = winnerHierarchy.concat([filteredWinnerSnapshots]);\r\n\t\t} else {\r\n\t\t\tconst higherTierComparator = filterableComparator.map(frame => {\r\n\t\t\t\treturn frame.filter(snapshot => {\r\n\t\t\t\t\treturn winningFrame.some(snapshotToMatchName => {\r\n\t\t\t\t\t\treturn snapshotToMatchName.name === snapshot.name;\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\tprocessComparator(higherTierComparator, (round + 1));\r\n\t\t}\r\n\t}\r\n\r\n\tconst processLowTierComparators = (loserHierarchyFrame) => {\r\n\t\tif (loserHierarchy.length > 0) {\r\n\t\t\tconst loserComparatorToProcess = loserHierarchyFrame[0];\r\n\t\t\tloserHierarchy = loserHierarchyFrame.slice(1);\r\n\t\t\tprocessComparator(loserComparatorToProcess);\r\n\t\t\tprocessLowTierComparators(loserHierarchy);\r\n\t\t}\r\n\t}\r\n\tprocessComparator(sortedComparator);\r\n\tprocessLowTierComparators(loserHierarchy);\r\n\treturn winnerHierarchy;\r\n}\r\n\r\n/*\r\n  Build ranking of hands of each player still in hand\r\n */\r\nconst buildPlayerRankings = (state) => {\r\n\r\n\t// only consider players still active in hand\r\n\tconst activePlayers = state.players.filter(player => !player.folded);\r\n\tlet hierarchy = [];\r\n\t// map of possible hand rankings\r\n\tconst rankMap = new Map([\r\n\t\t['Royal Flush', []],\r\n\t\t['Straight Flush', []],\r\n\t\t['Four Of A Kind', []],\r\n\t\t['Full House', []],\r\n\t\t['Flush', []],\r\n\t\t['Straight', []],\r\n\t\t['Three Of A Kind', []],\r\n\t\t['Two Pair', []],\r\n\t\t['Pair', []],\r\n\t\t['No Pair', []]\r\n\t]);\r\n\r\n\t// for each player find rank and add to ranking map\r\n\tactivePlayers.forEach((player, playerIndex) => {\r\n\t\tconst {\r\n\t\t\tname,\r\n\t\t\tshowDownHand: { bestHandRank, bestHand }\r\n\t\t} = player;\r\n\t\trankMap.get(bestHandRank).push({\r\n\t\t\tname,\r\n\t\t\tbestHand,\r\n\t\t\tplayerIndex\r\n\t\t})\r\n\t})\r\n\r\n\tfor (const [handRank, playersWhoHoldThisRank] of rankMap) {\r\n\t\tif (playersWhoHoldThisRank.length > 0) {\r\n\t\t\t// only one player can have Royal Flush so they would win regardless of the rest\r\n\t\t\tif (handRank === 'Royal Flush') {\r\n\t\t\t\tconst formattedPlayersWhoHoldThisRank = playersWhoHoldThisRank.map(player => ({\r\n\t\t\t\t\tname: player.name,\r\n\t\t\t\t\tbestHand: player.bestHand,\r\n\t\t\t\t\thandRank\r\n\t\t\t\t}))\r\n\t\t\t\thierarchy = hierarchy.concat(formattedPlayersWhoHoldThisRank);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// if only one player has a ranking that player is the best for that ranking\r\n\t\t\tif (playersWhoHoldThisRank.length === 1) {\r\n\t\t\t\tconst { name, bestHand } = playersWhoHoldThisRank[0];\r\n\t\t\t\thierarchy = hierarchy.concat([{\r\n\t\t\t\t\tname,\r\n\t\t\t\t\tbestHand,\r\n\t\t\t\t\thandRank\r\n\t\t\t\t}]);\r\n\t\t\t\t// if more than one player has same ranking must find which one has higher value\r\n\t\t\t} else if (playersWhoHoldThisRank.length > 1) {\r\n\t\t\t\tconst sortedComparator = createRankingsComparator(handRank, playersWhoHoldThisRank)\r\n\t\t\t\t\t.map((snapshot) => {\r\n\t\t\t\t\t\treturn snapshot.sort((a, b) => b.card.value - a.card.value)\r\n\t\t\t\t\t});\r\n\t\t\t\tconst winnerHierarchy = determinePlayerHandsHierarchy(sortedComparator, handRank);\r\n\t\t\t\thierarchy = hierarchy.concat(winnerHierarchy);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn hierarchy;\r\n}\r\n\r\n/*\r\n  Rank hands of players still active in hand\r\n */\r\nconst rankPlayersHands = (state, contestants) => {\r\n\r\n\t// map of possible hand rankings\r\n\tconst rankMap = new Map([\r\n\t\t['Royal Flush', []],\r\n\t\t['Straight Flush', []],\r\n\t\t['Four Of A Kind', []],\r\n\t\t['Full House', []],\r\n\t\t['Flush', []],\r\n\t\t['Straight', []],\r\n\t\t['Three Of A Kind', []],\r\n\t\t['Two Pair', []],\r\n\t\t['Pair', []],\r\n\t\t['No Pair', []]\r\n\t]);\r\n\r\n\tfor (let contestant of contestants) {\r\n\t\tconst playerIndex = state.players.findIndex(player => player.name === contestant);\r\n\t\tconst player = state.players[playerIndex];\r\n\t\t// if player is active in hand\r\n\t\tif (!player.folded) {\r\n\t\t\t// rank player hand\r\n\t\t\trankMap.get(player.showDownHand.bestHandRank).push({\r\n\t\t\t\tname: player.name,\r\n\t\t\t\tplayerIndex,\r\n\t\t\t\tbestHand: player.showDownHand.bestHand,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\treturn rankMap;\r\n}\r\n\r\n/*\r\n  Handle and get snapshot with winners and losers of hand\r\n */\r\nconst handleSnapshotFrame = (frame) => {\r\n\tconst highValue = frame[0].card.value;\r\n\tconst winningFrame = frame.filter(snapshot => snapshot.card.value === highValue);\r\n\tconst losingFrame = frame.filter(snapshot => snapshot.card.value < highValue);\r\n\treturn { winningFrame, losingFrame }\r\n}\r\n\r\n/*\r\n  Assign winnings to hand winners (handles pot splits too)\r\n */\r\nconst assignWinnings = (state, rankMap, prize) => {\r\n\tlet winnerFound = false;\r\n\r\n\t// find hand winners\r\n\trankMap.forEach((contestants, rank, map) => {\r\n\t\tif (!winnerFound) {\r\n\t\t\t// if only one player active in hand they win\r\n\t\t\tif (contestants.length === 1) {\r\n\t\t\t\twinnerFound = true\r\n\t\t\t\tconsole.log(\"Winner, \", contestants[0].name, \" , beating out the competition with a \", rank)\r\n\t\t\t\tstate = payWinnings(state, contestants, prize, rank)\r\n\t\t\t\t// if more than one player active in hand find winner\r\n\t\t\t} else if (contestants.length > 1) {\r\n\t\t\t\tconsole.log(contestants)\r\n\t\t\t\twinnerFound = true\r\n\t\t\t\t// get active players hand rankings\r\n\t\t\t\tconst winners = findHandWinner(createRankingsComparator(rank, contestants), rank)\r\n\t\t\t\t// if only one player wins they get all the pot\r\n\t\t\t\tif (winners.length === 1) {\r\n\t\t\t\t\tconsole.log(\"Winner, \", winners[0].name, \" , beating out the competition with a \", rank)\r\n\t\t\t\t\tstate = payWinnings(state, winners, prize, rank)\r\n\t\t\t\t\t// if multilple players win the pot is split amongst them\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"We have a tie! Split the pot amongst \", winners, \" Who will take the pot with their \", rank)\r\n\t\t\t\t\tstate = payWinnings(state, winners, prize, rank)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\treturn state\r\n}\r\n\r\n/*\r\n  Assign side pots when there are multiple winners for the same hand\r\n */\r\nconst assignSidePots = (state) => {\r\n\t// find winners of hand\r\n\tstate.playerHierarchy = buildPlayerRankings(state);\r\n\tconsole.log(\"Ultimate Player Hierarchy Determined:\")\r\n\tconsole.log(state.playerHierarchy);\r\n\r\n\t// assign each side pot to the corresponding winner\r\n\tfor (let sidePot of state.sidePots) {\r\n\t\tconst rankMap = rankPlayersHands(state, sidePot.contestants);\r\n\t\tstate = assignWinnings(state, rankMap, sidePot.potValue)\r\n\t}\r\n\r\n\tstate.players = state.players.map(player => ({\r\n\t\t...player,\r\n\t\troundEndChips: player.chips\r\n\t}));\r\n\r\n\treturn state\r\n}\r\n\r\n/*\r\n  Pay winnings to hand winners\r\n */\r\nconst payWinnings = (state, winners, prize, rank) => {\r\n\t// if only one winner they win all the pot\r\n\tif (winners.length === 1) {\r\n\t\tstate.showDownMessages = state.showDownMessages.concat([{\r\n\t\t\tusers: [winners[0].name],\r\n\t\t\tprize,\r\n\t\t\trank\r\n\t\t}]);\r\n\t\tconsole.log(\"Transferring \", prize, \" chips to \", winners[0].name)\r\n\t\tstate.players[winners[0].playerIndex].chips += prize\r\n\t\tstate.pot -= prize\r\n\t\t// if more than one winner split pot accordingly between them\r\n\t} else if (winners.length > 1) {\r\n\t\tconst overflow = prize % winners.length;\r\n\t\tconst splitPot = Math.floor(prize / winners.length)\r\n\t\tconsole.log(\"Mediating Tie. Total Prize \", prize, \" split into \", winners.length, \" portions with an overflow of \", overflow)\r\n\t\tstate.showDownMessages = state.showDownMessages.concat([{\r\n\t\t\tusers: winners.map(winner => winner.name),\r\n\t\t\tprize: splitPot,\r\n\t\t\trank\r\n\t\t}])\r\n\t\twinners.forEach(winner => {\r\n\t\t\tstate.players[winner.playerIndex].chips += splitPot\r\n\t\t\tstate.pot -= splitPot\r\n\t\t})\r\n\t}\r\n\treturn state\r\n}\r\n\r\n/*\r\n  Create hand rankings comparator to compare hand rankings\r\n */\r\nconst createRankingsComparator = (rank, playerData) => {\r\n\tlet comparator;\r\n\tswitch (rank) {\r\n\t\t// check if hand is Ten, Jack, Queen, King and Ace (all of same suit)\r\n\t\tcase ('Royal Flush'): {\r\n\t\t\tcomparator = Array.from({ length: 1 });\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator.push({\r\n\t\t\t\t\t// there can only be one royal flush which will be the winner regardless of other hand rankings\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is four cards all of the same denomination\r\n\t\tcase ('Four Of A Kind'): {\r\n\t\t\tcomparator = Array.from({ length: 2 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator[0].push({\r\n\t\t\t\t\t// four cards all of the same denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[0],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t\tcomparator[1].push({\r\n\t\t\t\t\t// last card is unmatched\r\n\t\t\t\t\tcard: playerData[index].bestHand[4],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is three cards of one denomination and two cards of another denomination\r\n\t\tcase ('Full House'): {\r\n\t\t\tcomparator = Array.from({ length: 2 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator[0].push({\r\n\t\t\t\t\t// three cards of one denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[0],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t\tcomparator[1].push({\r\n\t\t\t\t\t// two cards of another denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[3],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is three cards of one denomination and two cards of another denomination\r\n\t\t// or if all five cards are unmatched\r\n\t\tcase ('Flush'):\r\n\t\tcase ('No Pair'): {\r\n\t\t\tcomparator = Array.from({ length: 5 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tfor (let i = 0; i < 5; i++) {\r\n\t\t\t\t\tcomparator[i].push({\r\n\t\t\t\t\t\t// check all 5 cards of a flush or no-pair\r\n\t\t\t\t\t\tcard: playerData[index].bestHand[i],\r\n\t\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is three cards of the same denomination and two unmatched cards\r\n\t\tcase ('Three Of A Kind'): {\r\n\t\t\tcomparator = Array.from({ length: 3 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator[0].push({\r\n\t\t\t\t\t// three cards of the same denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[0],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t\tcomparator[1].push({\r\n\t\t\t\t\t// fourth card is unmatched\r\n\t\t\t\t\tcard: playerData[index].bestHand[3],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t\tcomparator[2].push({\r\n\t\t\t\t\t// fifth card is unmatched\r\n\t\t\t\t\tcard: playerData[index].bestHand[4],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is five cards of any suit in sequence\r\n\t\t// or if hand is five cards in sequence (all of same suit)\r\n\t\tcase ('Straight'):\r\n\t\tcase ('Straight Flush'): {\r\n\t\t\tcomparator = Array.from({ length: 1 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator[0].push({\r\n\t\t\t\t\t// check highest card of a straight as it will determine the straight value\r\n\t\t\t\t\tcard: playerData[index].bestHand[0],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is two sets of two cards of the same denomination and any fifth card\r\n\t\tcase ('Two Pair'): {\r\n\t\t\tcomparator = Array.from({ length: 3 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator[0].push({\r\n\t\t\t\t\t// two cards of the same denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[0],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t\tcomparator[1].push({\r\n\t\t\t\t\t// another two cards of the same denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[2],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t\tcomparator[2].push({\r\n\t\t\t\t\t// fifth unmatched card\r\n\t\t\t\t\tcard: playerData[index].bestHand[4],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\t// check if hand is two cards of the same denomination and three unmatched cards\r\n\t\tcase ('Pair'): {\r\n\t\t\tcomparator = Array.from({ length: 4 }, () => Array.from({ length: 0 }))\r\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\r\n\t\t\t\tcomparator[0].push({\r\n\t\t\t\t\t// two cards of the same denomination\r\n\t\t\t\t\tcard: playerData[index].bestHand[0],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t\tcomparator[1].push({\r\n\t\t\t\t\t// third unmtached card\r\n\t\t\t\t\tcard: playerData[index].bestHand[2],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t\tcomparator[2].push({\r\n\t\t\t\t\t// fourth unmtached card\r\n\t\t\t\t\tcard: playerData[index].bestHand[3],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t\tcomparator[3].push({\r\n\t\t\t\t\t// fifth unmtached card\r\n\t\t\t\t\tcard: playerData[index].bestHand[4],\r\n\t\t\t\t\tname: playerData[index].name,\r\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\r\n\t\t\t\t\tbestHand: playerData[index].bestHand\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tdefault: throw Error('Recieved unfamiliar rank argument in createRankingsComparator()');\r\n\t}\r\n\treturn comparator\r\n}\r\n\r\n/*\r\n  Find current hand winner\r\n */\r\nconst findHandWinner = (comparator, rank) => {\r\n\tlet winners;\r\n\tif (rank === 'Royal Flush') return comparator\r\n\tfor (let i = 0; i < comparator.length; i++) {\r\n\t\tlet highValue = 0;\r\n\t\tlet losers = [];\r\n\t\t// sort player rankings comparator \r\n\t\twinners = comparator[i].sort((a, b) => b.card.value - a.card.value).reduce((acc, cur, index) => {\r\n\t\t\t// add player with higher ranking hands first\r\n\t\t\tif (cur.card.value > highValue) {\r\n\r\n\t\t\t\thighValue = cur.card.value;\r\n\t\t\t\tacc.push({\r\n\t\t\t\t\tname: cur.name,\r\n\t\t\t\t\tplayerIndex: cur.playerIndex,\r\n\t\t\t\t});\r\n\t\t\t\treturn acc;\r\n\t\t\t} else if (cur.card.value === highValue) {\r\n\t\t\t\tacc.push({\r\n\t\t\t\t\tname: cur.name,\r\n\t\t\t\t\tplayerIndex: cur.playerIndex,\r\n\t\t\t\t});\r\n\t\t\t\treturn acc;\r\n\t\t\t\t// then add non active players (back of list)\r\n\t\t\t} else if (cur.card.value < highValue) {\r\n\t\t\t\tlosers.push(cur.name);\r\n\t\t\t\treturn acc;\r\n\t\t\t}\r\n\t\t}, [])\r\n\r\n\t\tif (winners.length === 1 || i === comparator.length) {\r\n\t\t\treturn winners\r\n\t\t} else {\r\n\t\t\tif (losers.length >= 1) {\r\n\t\t\t\tlosers.forEach((nameToExtract) => {\r\n\t\t\t\t\tcomparator = comparator.map(snapshot => snapshot.filter((el) => el.name !== nameToExtract));\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn winners\r\n\r\n}\r\n\r\n/*\r\n  Check if hand is a Flush\r\n */\r\nconst checkIfFlush = (suitHistogram) => {\r\n\tlet isFlush;\r\n\tlet flushedSuit;\r\n\t// check if all five cards have the same suit\r\n\tfor (let suit in suitHistogram) {\r\n\t\tif (suitHistogram[suit] >= 5) {\r\n\t\t\treturn {\r\n\t\t\t\tisFlush: true,\r\n\t\t\t\tflushedSuit: suit,\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\tisFlush: false,\r\n\t\tflushedSuit: null,\r\n\t}\r\n}\r\n\r\n/*\r\n  Check if hand is a Royal Flush\r\n */\r\nconst checkIfRoyalFlush = (flushMatchCards) => {\r\n\t// check if hand is Ten, Jack, Queen, King and Ace (all of same suit)\r\n\tif ((flushMatchCards[0].value === 13) &&\r\n\t\t(flushMatchCards[1].value === 12) &&\r\n\t\t(flushMatchCards[2].value === 11) &&\r\n\t\t(flushMatchCards[3].value === 10) &&\r\n\t\t(flushMatchCards[4].value === 10)) {\r\n\t\treturn true\r\n\t} else { return false }\r\n}\r\n\r\n/*\r\n  Check if hand is a Straight\r\n */\r\nconst checkIfStraight = (valueSet) => {\r\n\t// if less than five cards are valuable to the hand it is not a straight\r\n\tif (valueSet.length < 5) return false\r\n\tlet numConcurrentCards = 0;\r\n\tlet concurrentCardValues = [];\r\n\t// check if hand is five cards of any suit in sequence\r\n\tfor (let i = 1; i < valueSet.length; i++) {\r\n\t\tif (numConcurrentCards === 5) {\r\n\t\t\treturn {\r\n\t\t\t\tisStraight: true,\r\n\t\t\t\tconcurrentCardValues\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((valueSet[i] - valueSet[i - 1]) === -1) {\r\n\t\t\tif (numConcurrentCards === 0) {\r\n\t\t\t\tnumConcurrentCards = 2;\r\n\t\t\t\tconcurrentCardValues.push(valueSet[i - 1]);\r\n\t\t\t\tconcurrentCardValues.push(valueSet[i]);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tnumConcurrentCards++;\r\n\t\t\t\tconcurrentCardValues.push(valueSet[i]);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tnumConcurrentCards = 0;\r\n\t\t\tconcurrentCardValues = [];\r\n\t\t}\r\n\t}\r\n\tif (numConcurrentCards >= 5) {\r\n\t\treturn {\r\n\t\t\tisStraight: true,\r\n\t\t\tconcurrentCardValues\r\n\t\t}\r\n\t} else {\r\n\t\t// check if is straight with Ace, two, three, four, five\r\n\t\tif (valueSet[0] === 13) {\r\n\t\t\tlet { isLowStraight, concurrentCardValuesLow } = checkIfLowerStraight(cloneDeep(valueSet));\r\n\r\n\t\t\tif (isLowStraight) return {\r\n\t\t\t\tisStraight: true,\r\n\t\t\t\tisLowStraight,\r\n\t\t\t\tconcurrentCardValues,\r\n\t\t\t\tconcurrentCardValuesLow,\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tisStraight: false,\r\n\t\t\tisLowStraight: false,\r\n\t\t\tconcurrentCardValues,\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/*\r\n  Check if hand is a Straight Flush\r\n */\r\nconst checkIfStraightFlush = (flushMatchCards) => {\r\n\t// check if hand is five cards in sequence (all of same suit)\r\n\tconst valueSet = generateValueSet(flushMatchCards);\r\n\tconst { isStraight, isLowStraight, concurrentCardValues, concurrentCardValuesLow } = checkIfStraight(valueSet);\r\n\treturn {\r\n\t\tisStraightFlush: isStraight,\r\n\t\tisLowStraightFlush: isLowStraight,\r\n\t\tconcurrentSFCardValues: concurrentCardValues,\r\n\t\tconcurrentSFCardValuesLow: concurrentCardValuesLow,\r\n\t}\r\n}\r\n\r\n/*\r\n  Check how many hand rankings have occured and with what frequence \r\n  and order\r\n */\r\nconst checkFrequencyHistogram = (hand, frequencyHistogram) => {\r\n\r\n\t// set hand rankings to not seen \r\n\tlet isFourOfAKind = false;\r\n\tlet isFullHouse = false\r\n\tlet isThreeOfAKind = false;\r\n\tlet isTwoPair = false;\r\n\tlet isPair = false;\r\n\tlet numTripples = 0;\r\n\tlet numPairs = 0;\r\n\tlet frequencyHistogramMetaData = {\r\n\t\tpairs: [],\r\n\t\ttripples: [],\r\n\t\tquads: [],\r\n\t}\r\n\t// check if hand is four cards all of the same denomination\r\n\tfor (let cardFace in frequencyHistogram) {\r\n\t\tif (frequencyHistogram[cardFace] === 4) {\r\n\t\t\tisFourOfAKind = true\r\n\t\t\tfrequencyHistogramMetaData.quads.push({\r\n\t\t\t\tface: cardFace,\r\n\t\t\t\tvalue: VALUE_MAP[cardFace]\r\n\t\t\t})\r\n\t\t}\r\n\t\t// check if hand is three cards of the same denomination and two unmatched cards\r\n\t\tif (frequencyHistogram[cardFace] === 3) {\r\n\t\t\tisThreeOfAKind = true\r\n\t\t\tnumTripples++\r\n\t\t\tfrequencyHistogramMetaData.tripples.push({\r\n\t\t\t\tface: cardFace,\r\n\t\t\t\tvalue: VALUE_MAP[cardFace]\r\n\t\t\t})\r\n\t\t}\r\n\t\t// check if hand is two cards of the same denomination and three unmatched cards\r\n\t\tif (frequencyHistogram[cardFace] === 2) {\r\n\t\t\tisPair = true\r\n\t\t\tnumPairs++\r\n\t\t\tfrequencyHistogramMetaData.pairs.push({\r\n\t\t\t\tface: cardFace,\r\n\t\t\t\tvalue: VALUE_MAP[cardFace]\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t// sort histogram from best hand to worst hand\r\n\tfrequencyHistogramMetaData.pairs = frequencyHistogramMetaData.pairs.map(el => el).sort((a, b) => b.value - a.value)\r\n\tfrequencyHistogramMetaData.tripples = frequencyHistogramMetaData.tripples.map(el => el).sort((a, b) => b.value - a.value)\r\n\tfrequencyHistogramMetaData.quads = frequencyHistogramMetaData.quads.map(el => el).sort((a, b) => b.value - a.value)\r\n\r\n\t// check if hand is three cards of one denomination and two cards of another denomination (full house)\r\n\tif ((numTripples >= 2) || (numPairs >= 1 && numTripples >= 1)) {\r\n\t\tisFullHouse = true\r\n\t}\r\n\t// check if hand is two sets of two cards of the same denomination and any fifth card (Two Pairs)\r\n\tif (numPairs >= 2) {\r\n\t\tisTwoPair = true\r\n\t}\r\n\r\n\treturn {\r\n\t\tisFourOfAKind,\r\n\t\tisFullHouse,\r\n\t\tisThreeOfAKind,\r\n\t\tisTwoPair,\r\n\t\tisPair,\r\n\t\tfrequencyHistogramMetaData\r\n\t}\r\n\r\n}\r\n\r\n/*\r\n  Check if hand is straight with Ace, two, three, four, five\r\n */\r\nconst checkIfLowerStraight = (valueSetCopy) => {\r\n\tlet numConcurrentCards = 0;\r\n\tlet concurrentCardValuesLow = [];\r\n\t// Convert Ace which has highest value of 13 to lowest value 0 from which straight would start\r\n\tvalueSetCopy[0] = 0;\r\n\t// sort card values\r\n\tconst sortedValueSetCopy = valueSetCopy.map(el => el).sort((a, b) => a - b);\r\n\t// check if Ace, two, three, four, five are found\r\n\tfor (let i = 1; i < 5; i++) {\r\n\t\tif (numConcurrentCards >= 5) {\r\n\t\t\treturn {\r\n\t\t\t\tisLowStraight: true,\r\n\t\t\t\tconcurrentCardValuesLow,\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((sortedValueSetCopy[i] - sortedValueSetCopy[i - 1]) === 1) {\r\n\t\t\tif (numConcurrentCards === 0) {\r\n\t\t\t\tnumConcurrentCards = 2;\r\n\t\t\t\tconcurrentCardValuesLow.push(sortedValueSetCopy[i - 1]);\r\n\t\t\t\tconcurrentCardValuesLow.push(sortedValueSetCopy[i]);\r\n\t\t\t} else {\r\n\t\t\t\tnumConcurrentCards++;\r\n\t\t\t\tconcurrentCardValuesLow.push(sortedValueSetCopy[i]);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tnumConcurrentCards = 0;\r\n\t\t\tconcurrentCardValuesLow = [];\r\n\t\t}\r\n\t}\r\n\tif (numConcurrentCards >= 5) {\r\n\t\treturn {\r\n\t\t\tisLowStraight: true,\r\n\t\t\tconcurrentCardValuesLow,\r\n\t\t}\r\n\t} else {\r\n\t\treturn {\r\n\t\t\tisLowStraight: false,\r\n\t\t\tconcurrentCardValuesLow,\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/*\r\n  Generate set of five cards that add value to hand\r\n */\r\nconst generateValueSet = (hand) => {\r\n\treturn Array.from(new Set(hand.map(cardInfo => cardInfo.value)))\r\n}\r\n\r\nexport { makeDeckOfCards, shuffleCards, dealPlayerCards, getCards, dealFlopCards, dealTurnCards, dealRiverCards, dealOtherCommunityCards, playerShowDown, checkIfFlush, checkIfRoyalFlush, checkIfStraightFlush, checkIfStraight, checkFrequencyHistogram, generateValueSet };\r\n\r\n"]},"metadata":{},"sourceType":"module"}