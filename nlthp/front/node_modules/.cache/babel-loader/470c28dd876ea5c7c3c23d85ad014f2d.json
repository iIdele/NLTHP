{"ast":null,"code":"import { makeActionButtonText } from './uiService.js';\nimport { calculateMinBet, manageBet, managePlayerFold } from './betService.js';\nimport { checkFrequencyHistogram, checkIfFlush, checkIfRoyalFlush, checkIfStraight, checkIfStraightFlush, generateValueSet } from './cardsService.js';\n/**\r\n* The aiService provides key services for the \r\n* functinality of Ai players. It handles \r\n* how the Ai determines what move to make.\r\n*/\n\n/* \r\nThe main function to handle the behavior of an Ai player in a given situation \r\n*/\n\nconst aiHandler = (state, moveAnimationState) => {\n  const {\n    highBet\n  } = state;\n  const activePlayer = state.players[state.activePlayerIndex];\n  const min = calculateMinBet(highBet, activePlayer.chips, activePlayer.bet);\n  const max = activePlayer.chips + activePlayer.bet;\n  const totalInvestment = activePlayer.chips + activePlayer.bet + activePlayer.stackInvestment;\n  const investmentRequiredToRemain = highBet / totalInvestment * 100;\n  const descendingSortHand = activePlayer.cards.concat(state.communityCards).sort((a, b) => b.value - a.value);\n  const {\n    frequencyHistogram,\n    suitHistogram\n  } = makeHistogram(descendingSortHand);\n  const stakes = groupStakes(investmentRequiredToRemain);\n  const preFlopValues = activePlayer.cards.map(el => el.value);\n  const highCard = Math.max(...preFlopValues);\n  const lowCard = Math.min(...preFlopValues);\n\n  switch (state.phase) {\n    // determine Ai action for round 1 of betting\n    case 'first round':\n      {\n        // use specific factors to determine fold, call/check or bet\n        const suited = Object.entries(suitHistogram).find(keyValuePair => keyValuePair[1] === 2);\n        const straightGap = highCard - lowCard <= 4;\n        const {\n          callLimit,\n          raiseChance,\n          raiseRange\n        } = createPreFlopDeterminant(highCard, lowCard, suited, straightGap);\n        const willCall = betting_hierarchy[stakes] <= betting_hierarchy[callLimit];\n        const callValue = activePlayer.chips + activePlayer.bet >= highBet ? highBet : activePlayer.chips + activePlayer.bet;\n\n        if (willCall) {\n          if (willRaise(raiseChance)) {\n            const determinedRaiseRange = raiseRange[Math.floor(Math.random() * (raiseRange.length - 0)) + 0];\n            const wantRaise = betting_hierarchy[stakes] <= betting_hierarchy[determinedRaiseRange];\n\n            if (wantRaise) {\n              let betValue = Math.floor(chooseBetProportion(determinedRaiseRange) * activePlayer.chips);\n\n              if (betValue < highBet) {\n                if (highBet < max) {\n                  betValue = highBet;\n                }\n              }\n\n              if (betValue > max) activePlayer.canRaise = false;\n              moveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, betValue, activePlayer)} ${betValue}`);\n              return manageBet(state, betValue, min, max);\n            } else {\n              // will not render the bet value if it's a \"check\"\n              moveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${callValue > activePlayer.bet ? callValue : \"\"}`);\n              return manageBet(state, callValue, min, max);\n            }\n          } else {\n            moveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${callValue > activePlayer.bet ? callValue : \"\"}`);\n            return manageBet(state, callValue, min, max);\n          }\n        } else {\n          moveAnimationState(state.activePlayerIndex, `FOLD`);\n          return managePlayerFold(state);\n        }\n      }\n    // determine Ai action for subsequent betting rounds\n\n    case 'betting2':\n    case 'betting3':\n    case 'betting4':\n      // update freq histogram used to track hands\n      const {\n        isPair,\n        isTwoPair,\n        isThreeOfAKind,\n        isFourOfAKind,\n        isFullHouse,\n        frequencyHistogramMetaData\n      } = checkFrequencyHistogram(descendingSortHand, frequencyHistogram);\n      const valueSet = generateValueSet(descendingSortHand);\n      const {\n        isStraight,\n        isLowStraight,\n        concurrentCardValues,\n        concurrentCardValuesLow\n      } = checkIfStraight(valueSet);\n      const {\n        isFlush,\n        flushedSuit\n      } = checkIfFlush(suitHistogram);\n      const flushCards = isFlush && descendingSortHand.filter(card => card.suit === flushedSuit);\n      const {\n        isStraightFlush,\n        isLowStraightFlush,\n        concurrentSFCardValues,\n        concurrentSFCardValuesLow\n      } = isFlush && checkIfStraightFlush(flushCards);\n      const isRoyalFlush = isFlush && checkIfRoyalFlush(flushCards);\n      const isNoPair = !isRoyalFlush && !isStraightFlush && !isFourOfAKind && !isFullHouse && !isFlush && !isStraight && !isThreeOfAKind && !isTwoPair && !isPair; // create a hierarchy to rank hand strength\n\n      const handHierarchy = [{\n        name: 'Royal Flush',\n        match: isRoyalFlush\n      }, {\n        name: 'Straight Flush',\n        match: isStraightFlush\n      }, {\n        name: 'Four Of A Kind',\n        match: isFourOfAKind\n      }, {\n        name: 'Full House',\n        match: isFullHouse\n      }, {\n        name: 'Flush',\n        match: isFlush\n      }, {\n        name: 'Straight',\n        match: isStraight\n      }, {\n        name: 'Three Of A Kind',\n        match: isThreeOfAKind\n      }, {\n        name: 'Two Pair',\n        match: isTwoPair\n      }, {\n        name: 'Pair',\n        match: isPair\n      }, {\n        name: 'No Pair',\n        match: isNoPair\n      }]; // use hand hierarchy to determine Ai action\n\n      const highRank = handHierarchy[handHierarchy.findIndex(el => el.match === true)].name;\n      const {\n        callLimit,\n        raiseChance,\n        raiseRange\n      } = createGeneralizedDeterminant(descendingSortHand, highRank, frequencyHistogramMetaData);\n      const willCall = betting_hierarchy[stakes] <= betting_hierarchy[callLimit];\n      const callValue = activePlayer.chips + activePlayer.bet >= highBet ? highBet : activePlayer.chips + activePlayer.bet;\n\n      if (willCall) {\n        if (willRaise(raiseChance)) {\n          const determinedRaiseRange = raiseRange[Math.floor(Math.random() * (raiseRange.length - 0)) + 0];\n          const wantRaise = betting_hierarchy[stakes] <= betting_hierarchy[determinedRaiseRange];\n\n          if (wantRaise) {\n            let betValue = Math.floor(chooseBetProportion(determinedRaiseRange) * activePlayer.chips);\n\n            if (betValue < highBet) {\n              betValue = highBet;\n            }\n\n            activePlayer.canRaise = false;\n            moveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, betValue, activePlayer)} ${betValue}`);\n            return manageBet(state, betValue, min, max);\n          } else {\n            moveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${callValue > activePlayer.bet ? callValue : \"\"}`);\n            return manageBet(state, callValue, min, max);\n          }\n        } else {\n          moveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${callValue > activePlayer.bet ? callValue : \"\"}`);\n          return manageBet(state, callValue, min, max);\n        }\n      } else {\n        moveAnimationState(state.activePlayerIndex, `FOLD`);\n        return managePlayerFold(state);\n      }\n\n    default:\n      throw Error(\"Handle AI Running during incorrect phase\");\n  }\n};\n/* \r\nThis function determines Ai behavior based \r\non the rank of its card hand.\r\n*/\n\n\nconst createGeneralizedDeterminant = (hand, highRank, frequencyHistogramMetaData) => {\n  if (highRank === 'Royal Flush') {\n    return {\n      callLimit: 'beware',\n      raiseChance: 1,\n      raiseRange: ['beware']\n    };\n  } else if (highRank === 'Straight Flush') {\n    return {\n      callLimit: 'beware',\n      raiseChance: 1,\n      raiseRange: ['strong', 'aggro', 'beware']\n    };\n  } else if (highRank === 'Four Of A Kind') {\n    return {\n      callLimit: 'beware',\n      raiseChance: 1,\n      raiseRange: ['strong', 'aggro', 'beware']\n    };\n  } else if (highRank === 'Full House') {\n    return {\n      callLimit: 'beware',\n      raiseChance: 1,\n      raiseRange: ['hidraw', 'strong', 'aggro', 'beware']\n    };\n  } else if (highRank === 'Flush') {\n    return {\n      callLimit: 'beware',\n      raiseChange: 1,\n      raiseRange: ['strong', 'aggro', 'beware']\n    };\n  } else if (highRank === 'Straight') {\n    return {\n      callLimit: 'beware',\n      raiseChange: 1,\n      raiseRange: ['lowdraw', 'meddraw', 'hidraw, strong']\n    };\n  } else if (highRank === 'Three Of A Kind') {\n    return {\n      callLimit: 'beware',\n      raiseChange: 1,\n      raiseRange: ['lowdraw', 'meddraw', 'hidraw, strong']\n    };\n  } else if (highRank === 'Two Pair') {\n    return {\n      callLimit: 'beware',\n      raiseChange: 0.7,\n      raiseRange: ['lowdraw', 'meddraw', 'hidraw, strong']\n    };\n  } else if (highRank === 'Pair') {\n    return {\n      callLimit: 'hidraw',\n      raiseChange: 0.5,\n      raiseRange: ['lowdraw', 'meddraw', 'hidraw, strong']\n    };\n  } else if (highRank === 'No Pair') {\n    return {\n      callLimit: 'meddraw',\n      raiseChange: 0.2,\n      raiseRange: ['lowdraw', 'meddraw', 'hidraw, strong']\n    };\n  }\n};\n/* \r\nA function to determine Ai behavior based on the flop\r\nand its results. \r\n*/\n\n\nconst createPreFlopDeterminant = (highCard, lowCard, suited, straightGap) => {\n  if (highCard === lowCard) {\n    switch (highCard) {\n      case highCard > 8:\n        {\n          return {\n            callLimit: 'beware',\n            raiseChance: 0.9,\n            raiseRange: ['lowdraw', 'meddraw', 'hidraw', 'strong'] // randomly determine bet based on this\n\n          };\n        }\n\n      case highCard > 5:\n        {\n          return {\n            callLimit: 'aggro',\n            raiseChance: 0.75,\n            // if Math.random() is < than this, select a random raiseTarget \n            raiseRange: ['insignificant', 'lowdraw', 'meddraw']\n          };\n        }\n\n      case highCard < 5:\n      default:\n        {\n          return {\n            callLimit: 'aggro',\n            raiseChance: 0.5,\n            raiseRange: ['insignificant', 'lowdraw', 'meddraw']\n          };\n        }\n    }\n  } else if (highCard > 9 && lowCard > 9) {\n    // two high cards\n    if (suited) {\n      return {\n        callLimit: 'beware',\n        raiseChance: 1,\n        raiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw']\n      };\n    } else {\n      return {\n        callLimit: 'beware',\n        raiseChance: 0.75,\n        raiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw']\n      };\n    }\n  } else if (highCard > 8 && lowCard > 6) {\n    // one high card\n    if (suited) {\n      return {\n        callLimit: 'beware',\n        raiseChance: 0.65,\n        raiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw']\n      };\n    } else {\n      return {\n        callLimit: 'beware',\n        raiseChance: 0.45,\n        raiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw']\n      };\n    }\n  } else if (highCard > 8 && lowCard < 6) {\n    if (suited) {\n      return {\n        callLimit: 'major',\n        raiseChance: 0.45,\n        raiseRange: ['insignificant', 'lowdraw']\n      };\n    } else {\n      return {\n        callLimit: 'aggro',\n        raiseChance: 0.35,\n        raiseRange: ['insignificant', 'lowdraw']\n      };\n    }\n  } else if (highCard > 5 && lowCard > 3) {\n    if (suited) {\n      return {\n        callLimit: 'strong',\n        raiseChance: 0.1,\n        raiseRange: ['insignificant', 'lowdraw']\n      };\n    } else if (straightGap) {\n      return {\n        callLimit: 'aggro',\n        raiseChance: 0\n      };\n    } else {\n      return {\n        callLimit: 'strong',\n        raiseChance: 0\n      };\n    }\n  } else {\n    if (suited) {\n      return {\n        callLimit: 'strong',\n        raiseChance: 0.1,\n        raiseRange: ['insignificant']\n      };\n    } else if (straightGap) {\n      return {\n        callLimit: 'strong',\n        raiseChance: 0\n      };\n    } else {\n      return {\n        callLimit: 'insignificant',\n        raiseChance: 0\n      };\n    }\n  }\n};\n/* \r\nA function to group stakes into terms for betting.\r\n*/\n\n\nconst groupStakes = percentage => {\n  switch (true) {\n    case percentage > 75:\n      return 'beware';\n\n    case percentage > 40:\n      return 'aggro';\n\n    case percentage > 35:\n      return 'major';\n\n    case percentage > 25:\n      return 'strong';\n\n    case percentage > 15:\n      return 'hidraw';\n\n    case percentage > 10:\n      return 'meddraw';\n\n    case percentage > 3:\n      return 'lowdraw';\n\n    case percentage >= 1:\n      return 'insignificant';\n\n    case percentage < 1:\n    default:\n      return 'blind';\n  }\n};\n/* \r\nThis function determines the amount an Ai\r\nwill bet based on the betting hierarchy value.\r\n*/\n\n\nconst chooseBetProportion = stakes => {\n  if (stakes === 'blind') {\n    return Math.random() * (0.1 - 0) + 0;\n  } else if (stakes === 'insignificant') {\n    return Math.random() * (0.03 - 0.01) + 0.01;\n  } else if (stakes === 'lowdraw') {\n    return Math.random() * (0.10 - 0.03) + 0.03;\n  } else if (stakes === 'meddraw') {\n    return Math.random() * (0.15 - 0.10) + 0.10;\n  } else if (stakes === 'hidraw') {\n    return Math.random() * (0.25 - 0.15) + 0.15;\n  } else if (stakes === 'strong') {\n    return Math.random() * (0.35 - 0.25) + 0.25;\n  } else if (stakes === 'major') {\n    return Math.random() * (0.40 - 0.35) + 0.35;\n  } else if (stakes === 'aggro') {\n    return Math.random() * (0.75 - 0.40) + 0.40;\n  } else if (stakes === 'beware') {\n    return Math.random() * (1 - 0.75) + 0.75;\n  }\n};\n/* \r\nA list to set the degree of an Ai bet.\r\n*/\n\n\nconst betting_hierarchy = {\n  blind: 0,\n  insignificant: 1,\n  lowdraw: 2,\n  meddraw: 3,\n  hidraw: 4,\n  strong: 5,\n  major: 6,\n  aggro: 7,\n  beware: 8\n};\n\nconst willRaise = chance => {\n  return Math.random() < chance;\n};\n\nconst makeHistogram = hand => {\n  const histogram = hand.reduce((acc, cur) => {\n    acc.frequencyHistogram[cur.cardFace] = (acc.frequencyHistogram[cur.cardFace] || 0) + 1;\n    acc.suitHistogram[cur.suit] = (acc.suitHistogram[cur.suit] || 0) + 1;\n    return acc;\n  }, {\n    frequencyHistogram: {},\n    suitHistogram: {}\n  });\n  return histogram;\n};\n\nexport { aiHandler };","map":{"version":3,"sources":["C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/src/services/aiService.js"],"names":["makeActionButtonText","calculateMinBet","manageBet","managePlayerFold","checkFrequencyHistogram","checkIfFlush","checkIfRoyalFlush","checkIfStraight","checkIfStraightFlush","generateValueSet","aiHandler","state","moveAnimationState","highBet","activePlayer","players","activePlayerIndex","min","chips","bet","max","totalInvestment","stackInvestment","investmentRequiredToRemain","descendingSortHand","cards","concat","communityCards","sort","a","b","value","frequencyHistogram","suitHistogram","makeHistogram","stakes","groupStakes","preFlopValues","map","el","highCard","Math","lowCard","phase","suited","Object","entries","find","keyValuePair","straightGap","callLimit","raiseChance","raiseRange","createPreFlopDeterminant","willCall","betting_hierarchy","callValue","willRaise","determinedRaiseRange","floor","random","length","wantRaise","betValue","chooseBetProportion","canRaise","isPair","isTwoPair","isThreeOfAKind","isFourOfAKind","isFullHouse","frequencyHistogramMetaData","valueSet","isStraight","isLowStraight","concurrentCardValues","concurrentCardValuesLow","isFlush","flushedSuit","flushCards","filter","card","suit","isStraightFlush","isLowStraightFlush","concurrentSFCardValues","concurrentSFCardValuesLow","isRoyalFlush","isNoPair","handHierarchy","name","match","highRank","findIndex","createGeneralizedDeterminant","Error","hand","raiseChange","percentage","blind","insignificant","lowdraw","meddraw","hidraw","strong","major","aggro","beware","chance","histogram","reduce","acc","cur","cardFace"],"mappings":"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","sourcesContent":["import { makeActionButtonText } from './uiService.js';\r\nimport { calculateMinBet, manageBet, managePlayerFold } from './betService.js';\r\nimport {\r\n\tcheckFrequencyHistogram,\r\n\tcheckIfFlush,\r\n\tcheckIfRoyalFlush,\r\n\tcheckIfStraight,\r\n\tcheckIfStraightFlush,\r\n\tgenerateValueSet\r\n} from './cardsService.js';\r\n\r\n/**\r\n* The aiService provides key services for the \r\n* functinality of Ai players. It handles \r\n* how the Ai determines what move to make.\r\n*/\r\n\r\n/* \r\nThe main function to handle the behavior of an Ai player in a given situation \r\n*/\r\nconst aiHandler = (state, moveAnimationState) => {\r\n\tconst { highBet } = state\r\n\tconst activePlayer = state.players[state.activePlayerIndex];\r\n\tconst min = calculateMinBet(highBet, activePlayer.chips, activePlayer.bet)\r\n\tconst max = activePlayer.chips + activePlayer.bet\r\n\tconst totalInvestment = activePlayer.chips + activePlayer.bet + activePlayer.stackInvestment;\r\n\tconst investmentRequiredToRemain = (highBet / totalInvestment) * 100;\r\n\tconst descendingSortHand = activePlayer.cards.concat(state.communityCards).sort((a, b) => b.value - a.value)\r\n\tconst { frequencyHistogram, suitHistogram } = makeHistogram(descendingSortHand)\r\n\tconst stakes = groupStakes(investmentRequiredToRemain);\r\n\tconst preFlopValues = activePlayer.cards.map(el => el.value)\r\n\tconst highCard = Math.max(...preFlopValues)\r\n\tconst lowCard = Math.min(...preFlopValues)\r\n\tswitch (state.phase) {\r\n\r\n\t\t// determine Ai action for round 1 of betting\r\n\t\tcase ('first round'): {\r\n\t\t\t// use specific factors to determine fold, call/check or bet\r\n\t\t\tconst suited = Object.entries(suitHistogram).find(keyValuePair => keyValuePair[1] === 2)\r\n\t\t\tconst straightGap = (highCard - lowCard <= 4)\r\n\t\t\tconst { \r\n\t\t\t\tcallLimit, \r\n\t\t\t\traiseChance, \r\n\t\t\t\traiseRange \r\n\t\t\t} = createPreFlopDeterminant(highCard, lowCard, suited, straightGap)\r\n\r\n\t\t\tconst willCall = (betting_hierarchy[stakes] <= betting_hierarchy[callLimit])\r\n\t\t\tconst callValue = (activePlayer.chips + activePlayer.bet >= highBet) ? highBet : activePlayer.chips + activePlayer.bet\r\n\t\t\tif (willCall) {\r\n\t\t\t\tif (willRaise(raiseChance)) {\r\n\t\t\t\t\tconst determinedRaiseRange = raiseRange[Math.floor(Math.random() * (raiseRange.length - 0)) + 0];\r\n\t\t\t\t\tconst wantRaise = (betting_hierarchy[stakes] <= betting_hierarchy[determinedRaiseRange])\r\n\t\t\t\t\tif (wantRaise) {\r\n\t\t\t\t\t\tlet betValue = Math.floor(chooseBetProportion(determinedRaiseRange) * activePlayer.chips)\r\n\t\t\t\t\t\tif (betValue < highBet) {\r\n\t\t\t\t\t\t\tif (highBet < max) {\r\n\t\t\t\t\t\t\t\tbetValue = highBet;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (betValue > max)\r\n\t\t\t\t\t\t\tactivePlayer.canRaise = false\r\n\t\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, betValue, activePlayer)} ${betValue}`);\r\n\t\t\t\t\t\treturn manageBet(state, betValue, min, max);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// will not render the bet value if it's a \"check\"\r\n\t\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\r\n\t\t\t\t\t\treturn manageBet(state, callValue, min, max);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\r\n\t\t\t\t\treturn manageBet(state, callValue, min, max);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tmoveAnimationState(state.activePlayerIndex, `FOLD`);\r\n\t\t\t\treturn managePlayerFold(state)\r\n\t\t\t}\r\n\t\t}\r\n\t\t// determine Ai action for subsequent betting rounds\r\n\t\tcase ('betting2'):\r\n\t\tcase ('betting3'):\r\n\t\tcase ('betting4'):\r\n\t\t\t// update freq histogram used to track hands\r\n\t\t\tconst {\r\n\r\n\t\t\t\tisPair,\r\n\t\t\t\tisTwoPair,\r\n\t\t\t\tisThreeOfAKind,\r\n\t\t\t\tisFourOfAKind,\r\n\t\t\t\tisFullHouse,\r\n\t\t\t\tfrequencyHistogramMetaData,\r\n\r\n\t\t\t} = checkFrequencyHistogram(descendingSortHand, frequencyHistogram);\r\n\t\t\tconst valueSet = generateValueSet(descendingSortHand);\r\n\t\t\tconst {\r\n\r\n\t\t\t\tisStraight,\r\n\t\t\t\tisLowStraight,\r\n\t\t\t\tconcurrentCardValues,\r\n\t\t\t\tconcurrentCardValuesLow,\r\n\r\n\t\t\t} = checkIfStraight(valueSet);\r\n\t\t\tconst {\r\n\r\n\t\t\t\tisFlush,\r\n\t\t\t\tflushedSuit,\r\n\r\n\t\t\t} = checkIfFlush(suitHistogram);\r\n\r\n\t\t\tconst flushCards = (isFlush) &&\r\n\t\t\t\tdescendingSortHand\r\n\t\t\t\t\t.filter(card => card.suit === flushedSuit);\r\n\r\n\t\t\tconst {\r\n\r\n\t\t\t\tisStraightFlush,\r\n\t\t\t\tisLowStraightFlush,\r\n\t\t\t\tconcurrentSFCardValues,\r\n\t\t\t\tconcurrentSFCardValuesLow,\r\n\r\n\t\t\t} = (isFlush) && checkIfStraightFlush(flushCards);\r\n\t\t\tconst isRoyalFlush = (isFlush) &&\r\n\t\t\t\tcheckIfRoyalFlush(flushCards);\r\n\t\t\tconst isNoPair = (\r\n\t\t\t\t(!isRoyalFlush) &&\r\n\t\t\t\t(!isStraightFlush) &&\r\n\t\t\t\t(!isFourOfAKind) &&\r\n\t\t\t\t(!isFullHouse) &&\r\n\t\t\t\t(!isFlush) &&\r\n\t\t\t\t(!isStraight) &&\r\n\t\t\t\t(!isThreeOfAKind) &&\r\n\t\t\t\t(!isTwoPair) &&\r\n\t\t\t\t(!isPair));\r\n\r\n\t\t\t// create a hierarchy to rank hand strength\r\n\t\t\tconst handHierarchy = [{\r\n\t\t\t\tname: 'Royal Flush',\r\n\t\t\t\tmatch: isRoyalFlush,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Straight Flush',\r\n\t\t\t\tmatch: isStraightFlush\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Four Of A Kind',\r\n\t\t\t\tmatch: isFourOfAKind,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Full House',\r\n\t\t\t\tmatch: isFullHouse,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Flush',\r\n\t\t\t\tmatch: isFlush,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Straight',\r\n\t\t\t\tmatch: isStraight,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Three Of A Kind',\r\n\t\t\t\tmatch: isThreeOfAKind,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Two Pair',\r\n\t\t\t\tmatch: isTwoPair,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Pair',\r\n\t\t\t\tmatch: isPair,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'No Pair',\r\n\t\t\t\tmatch: isNoPair\r\n\t\t\t}];\r\n\r\n\t\t\t// use hand hierarchy to determine Ai action\r\n\t\t\tconst highRank = handHierarchy[handHierarchy.findIndex(el => el.match === true)].name\r\n\t\t\tconst { callLimit, raiseChance, raiseRange } = createGeneralizedDeterminant(descendingSortHand, highRank, frequencyHistogramMetaData)\r\n\t\t\tconst willCall = (betting_hierarchy[stakes] <= betting_hierarchy[callLimit])\r\n\t\t\tconst callValue = (activePlayer.chips + activePlayer.bet >= highBet) ? highBet : activePlayer.chips + activePlayer.bet\r\n\t\t\tif (willCall) {\r\n\t\t\t\tif (willRaise(raiseChance)) {\r\n\t\t\t\t\tconst determinedRaiseRange = raiseRange[Math.floor(Math.random() * (raiseRange.length - 0)) + 0];\r\n\t\t\t\t\tconst wantRaise = (betting_hierarchy[stakes] <= betting_hierarchy[determinedRaiseRange])\r\n\t\t\t\t\tif (wantRaise) {\r\n\t\t\t\t\t\tlet betValue = Math.floor(chooseBetProportion(determinedRaiseRange) * activePlayer.chips)\r\n\t\t\t\t\t\tif (betValue < highBet) {\r\n\t\t\t\t\t\t\tbetValue = highBet;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tactivePlayer.canRaise = false\r\n\t\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, betValue, activePlayer)} ${betValue}`);\r\n\t\t\t\t\t\treturn manageBet(state, betValue, min, max);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\r\n\t\t\t\t\t\treturn manageBet(state, callValue, min, max);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\r\n\t\t\t\t\treturn manageBet(state, callValue, min, max);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tmoveAnimationState(state.activePlayerIndex, `FOLD`);\r\n\t\t\t\treturn managePlayerFold(state)\r\n\t\t\t}\r\n\t\tdefault: throw Error(\"Handle AI Running during incorrect phase\");\r\n\t}\r\n}\r\n\r\n/* \r\nThis function determines Ai behavior based \r\non the rank of its card hand.\r\n*/\r\nconst createGeneralizedDeterminant = (hand, highRank, frequencyHistogramMetaData) => {\r\n\tif (highRank === 'Royal Flush') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChance: 1,\r\n\t\t\traiseRange: ['beware']\r\n\t\t}\r\n\t} else if (highRank === 'Straight Flush') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChance: 1,\r\n\t\t\traiseRange: ['strong', 'aggro', 'beware']\r\n\t\t}\r\n\t} else if (highRank === 'Four Of A Kind') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChance: 1,\r\n\t\t\traiseRange: ['strong', 'aggro', 'beware']\r\n\t\t}\r\n\t} else if (highRank === 'Full House') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChance: 1,\r\n\t\t\traiseRange: ['hidraw', 'strong', 'aggro', 'beware']\r\n\t\t}\r\n\t} else if (highRank === 'Flush') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChange: 1,\r\n\t\t\traiseRange: ['strong', 'aggro', 'beware'],\r\n\t\t}\r\n\t} else if (highRank === 'Straight') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChange: 1,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t} else if (highRank === 'Three Of A Kind') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChange: 1,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t} else if (highRank === 'Two Pair') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChange: 0.7,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t} else if (highRank === 'Pair') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'hidraw',\r\n\t\t\traiseChange: 0.5,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t} else if (highRank === 'No Pair') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'meddraw',\r\n\t\t\traiseChange: 0.2,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/* \r\nA function to determine Ai behavior based on the flop\r\nand its results. \r\n*/\r\nconst createPreFlopDeterminant = (highCard, lowCard, suited, straightGap) => {\r\n\tif (highCard === lowCard) {\r\n\t\tswitch (highCard) {\r\n\t\t\tcase (highCard > 8): {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\t\traiseChance: 0.9,\r\n\t\t\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw', 'strong'], // randomly determine bet based on this\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcase (highCard > 5): {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcallLimit: 'aggro',\r\n\t\t\t\t\traiseChance: 0.75, // if Math.random() is < than this, select a random raiseTarget \r\n\t\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw'],\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcase (highCard < 5):\r\n\t\t\tdefault: {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcallLimit: 'aggro',\r\n\t\t\t\t\traiseChance: 0.5,\r\n\t\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw'],\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (highCard > 9 && lowCard > 9) {\r\n\t\t// two high cards\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\traiseChance: 1,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\traiseChance: 0.75,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (highCard > 8 && lowCard > 6) {\r\n\t\t// one high card\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\traiseChance: 0.65,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\traiseChance: 0.45,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (highCard > 8 && lowCard < 6) {\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'major',\r\n\t\t\t\traiseChance: 0.45,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw'],\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'aggro',\r\n\t\t\t\traiseChance: 0.35,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw'],\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (highCard > 5 && lowCard > 3) {\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'strong',\r\n\t\t\t\traiseChance: 0.1,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw'],\r\n\t\t\t}\r\n\t\t} else if (straightGap) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'aggro',\r\n\t\t\t\traiseChance: 0,\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'strong',\r\n\t\t\t\traiseChance: 0,\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'strong',\r\n\t\t\t\traiseChance: 0.1,\r\n\t\t\t\traiseRange: ['insignificant'],\r\n\t\t\t}\r\n\t\t} else if (straightGap) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'strong',\r\n\t\t\t\traiseChance: 0,\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'insignificant',\r\n\t\t\t\traiseChance: 0,\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/* \r\nA function to group stakes into terms for betting.\r\n*/\r\nconst groupStakes = (percentage) => {\r\n\tswitch (true) {\r\n\t\tcase (percentage > 75):\r\n\t\t\treturn 'beware'\r\n\t\tcase (percentage > 40):\r\n\t\t\treturn 'aggro'\r\n\t\tcase (percentage > 35):\r\n\t\t\treturn 'major'\r\n\t\tcase (percentage > 25):\r\n\t\t\treturn 'strong'\r\n\t\tcase (percentage > 15):\r\n\t\t\treturn 'hidraw'\r\n\t\tcase (percentage > 10):\r\n\t\t\treturn 'meddraw'\r\n\t\tcase (percentage > 3):\r\n\t\t\treturn 'lowdraw'\r\n\t\tcase (percentage >= 1):\r\n\t\t\treturn 'insignificant'\r\n\t\tcase (percentage < 1):\r\n\t\tdefault:\r\n\t\t\treturn 'blind'\r\n\t}\r\n}\r\n\r\n/* \r\nThis function determines the amount an Ai\r\nwill bet based on the betting hierarchy value.\r\n*/\r\nconst chooseBetProportion = (stakes) => {\r\n\tif (stakes === 'blind') {\r\n\t\treturn Math.random() * (0.1 - 0) + 0\r\n\t} else if (stakes === 'insignificant') {\r\n\t\treturn Math.random() * (0.03 - 0.01) + 0.01\r\n\t} else if (stakes === 'lowdraw') {\r\n\t\treturn Math.random() * (0.10 - 0.03) + 0.03\r\n\t} else if (stakes === 'meddraw') {\r\n\t\treturn Math.random() * (0.15 - 0.10) + 0.10\r\n\t} else if (stakes === 'hidraw') {\r\n\t\treturn Math.random() * (0.25 - 0.15) + 0.15\r\n\t} else if (stakes === 'strong') {\r\n\t\treturn Math.random() * (0.35 - 0.25) + 0.25\r\n\t} else if (stakes === 'major') {\r\n\t\treturn Math.random() * (0.40 - 0.35) + 0.35\r\n\t} else if (stakes === 'aggro') {\r\n\t\treturn Math.random() * (0.75 - 0.40) + 0.40\r\n\t} else if (stakes === 'beware') {\r\n\t\treturn Math.random() * (1 - 0.75) + 0.75\r\n\t}\r\n}\r\n\r\n/* \r\nA list to set the degree of an Ai bet.\r\n*/\r\nconst betting_hierarchy = {\r\n\tblind: 0,\r\n\tinsignificant: 1,\r\n\tlowdraw: 2,\r\n\tmeddraw: 3,\r\n\thidraw: 4,\r\n\tstrong: 5,\r\n\tmajor: 6,\r\n\taggro: 7,\r\n\tbeware: 8,\r\n}\r\n\r\nconst willRaise = (chance) => {\r\n\treturn Math.random() < chance\r\n}\r\n\r\nconst makeHistogram = (hand) => {\r\n\tconst histogram = hand.reduce((acc, cur) => {\r\n\t\tacc.frequencyHistogram[cur.cardFace] = (acc.frequencyHistogram[cur.cardFace] || 0) + 1;\r\n\t\tacc.suitHistogram[cur.suit] = (acc.suitHistogram[cur.suit] || 0) + 1;\r\n\t\treturn acc\r\n\t}, { frequencyHistogram: {}, suitHistogram: {} })\r\n\treturn histogram\r\n}\r\n\r\nexport { aiHandler };\r\n\r\n"]},"metadata":{},"sourceType":"module"}