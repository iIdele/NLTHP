{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manny\\\\2021-ca400-idelegi2-puzzuos2\\\\src\\\\ui\\\\src\\\\services\\\\uiService.js\";\nimport React from 'react';\nimport { Handles, Rail, Slider, Tracks } from 'react-compound-slider';\nimport Handle from \"../components/raiseBar/Controller\";\nimport { railStyle, sliderStyle } from \"../components/raiseBar/styles\";\nimport Track from \"../components/raiseBar/Tracker\";\nimport { calculateMinBet } from './betService.js';\n/** \r\n* The uiService provides services to handle\r\n* UI animations assignments and renderings.\r\n*/\n\n/* \r\n Set next game phase\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst makePhaseStatement = phase => {\n  switch (phase) {\n    case 'loading':\n      return 'Finding a Table, Please Wait';\n\n    case 'initialDeal':\n      return 'Dealing out the cards';\n\n    case 'betting1':\n      return 'Betting 1';\n\n    case 'flop':\n      return 'Flop';\n\n    case 'betting2':\n      return 'Flop';\n\n    case 'turn':\n      return 'Turn';\n\n    case 'betting3':\n      return 'Turn';\n\n    case 'river':\n      return 'River';\n\n    case 'betting4':\n      return 'River';\n\n    case 'showdown':\n      return 'Show Your Cards!';\n\n    default:\n      throw Error('Unfamiliar phase returned from makePhaseStatement()');\n  }\n};\n/* \r\n Render Action Button text (Fold, Call, Raise, All in, etc.)\r\n*/\n\n\nconst makeActionButtonText = (highBet, betInputValue, activePlayer) => {\n  if (highBet === 0 && betInputValue === 0) {\n    return 'Check';\n  } else if (highBet === betInputValue) {\n    return 'Call';\n  } else if (betInputValue < highBet || betInputValue === activePlayer.chips + activePlayer.bet) {\n    return 'All-in!';\n  } else if (betInputValue > highBet) {\n    return 'Raise';\n  }\n};\n/* \r\n Show player winning after each hand\r\n*/\n\n\nconst makeNetPlayerEarnings = (endChips, startChips) => {\n  const netChipEarnings = endChips - startChips;\n  const win = netChipEarnings > 0;\n  const none = netChipEarnings === 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: `showdown-player-earnings ${win ? 'positive' : none ? '' : 'negative'}`,\n    children: `${win ? '+' : ''}${netChipEarnings}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 3\n  }, this);\n};\n/* \r\n Show Showdown messages\r\n*/\n\n\nconst makeShowdownMessages = showDownMessages => {\n  return showDownMessages.map((message, index) => {\n    const {\n      users,\n      prize,\n      rank\n    } = message;\n\n    if (users.length > 1) {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-div\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-user\",\n            children: `${users.length} players `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-content\",\n            children: `split the pot with a `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-rank\",\n            children: `${rank}!`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 6\n        }, this), users.map(user => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"message-div\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-player\",\n              children: `${user} `\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-content\",\n              children: `takes `\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-earnings\",\n              children: `${prize} chips `\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-content\",\n              children: `from the pot.`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 10\n            }, this)]\n          }, index + user, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 9\n          }, this);\n        })]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }, this);\n    } else if (users.length === 1) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-div\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-player\",\n          children: `${users[0]} `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-content\",\n          children: `wins `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-earnings\",\n          children: `${prize} chips `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-content\",\n          children: `from the pot with a `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-rank\",\n          children: `${rank}!`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 6\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }, this);\n    }\n  });\n};\n/* \r\n Render User Action menu for actions and slider (for raising)\r\n*/\n\n\nconst makeActionMenu = (highBet, players, activePlayerIndex, phase, changeSliderInputFn) => {\n  const min = calculateMinBet(highBet, players[activePlayerIndex].chips, players[activePlayerIndex].bet);\n  const max = players[activePlayerIndex].chips + players[activePlayerIndex].bet;\n  return phase === 'betting1' || phase === 'betting2' || phase === 'betting3' || phase === 'betting4' ? players[activePlayerIndex].agent ? /*#__PURE__*/_jsxDEV(\"h4\", {\n    className: \"current-move-head\",\n    children: [\" \", `Current Move: ${players[activePlayerIndex].name}`]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 138\n  }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Slider, {\n      rootStyle: sliderStyle,\n      domain: [min, max],\n      values: [min],\n      step: 1,\n      onChange: changeSliderInputFn,\n      mode: 2,\n      children: [/*#__PURE__*/_jsxDEV(Rail, {\n        children: ({\n          getRailProps\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: railStyle,\n          ...getRailProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Handles, {\n        children: ({\n          handles,\n          getHandleProps\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-handles\",\n          children: handles.map(handle => /*#__PURE__*/_jsxDEV(Handle, {\n            handle: handle,\n            getHandleProps: getHandleProps\n          }, handle.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 12\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Tracks, {\n        right: false,\n        children: ({\n          tracks,\n          getTrackProps\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-tracks\",\n          children: tracks.map(({\n            id,\n            source,\n            target\n          }) => /*#__PURE__*/_jsxDEV(Track, {\n            source: source,\n            target: target,\n            getTrackProps: getTrackProps\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 4\n  }, this) : null;\n};\n\nexport { makePhaseStatement, makeShowdownMessages, makeNetPlayerEarnings, makeActionMenu, makeActionButtonText };","map":{"version":3,"sources":["C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/src/services/uiService.js"],"names":["React","Handles","Rail","Slider","Tracks","Handle","railStyle","sliderStyle","Track","calculateMinBet","makePhaseStatement","phase","Error","makeActionButtonText","highBet","betInputValue","activePlayer","chips","bet","makeNetPlayerEarnings","endChips","startChips","netChipEarnings","win","none","makeShowdownMessages","showDownMessages","map","message","index","users","prize","rank","length","user","makeActionMenu","players","activePlayerIndex","changeSliderInputFn","min","max","agent","name","getRailProps","handles","getHandleProps","handle","id","tracks","getTrackProps","source","target"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,MAAxB,EAAgCC,MAAhC,QAA8C,uBAA9C;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,+BAAvC;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,SACCC,eADD,QAEO,iBAFP;AAIA;AACA;AACA;AACA;;AAGA;AACA;AACA;;;;AACA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACrC,UAAQA,KAAR;AACC,SAAM,SAAN;AAAkB,aAAO,8BAAP;;AAClB,SAAM,aAAN;AAAsB,aAAO,uBAAP;;AACtB,SAAM,UAAN;AAAmB,aAAO,WAAP;;AACnB,SAAM,MAAN;AAAe,aAAO,MAAP;;AACf,SAAM,UAAN;AAAmB,aAAO,MAAP;;AACnB,SAAM,MAAN;AAAe,aAAO,MAAP;;AACf,SAAM,UAAN;AAAmB,aAAO,MAAP;;AACnB,SAAM,OAAN;AAAgB,aAAO,OAAP;;AAChB,SAAM,UAAN;AAAmB,aAAO,OAAP;;AACnB,SAAM,UAAN;AAAmB,aAAO,kBAAP;;AACnB;AAAS,YAAMC,KAAK,CAAC,qDAAD,CAAX;AAXV;AAaA,CAdD;AAgBA;AACA;AACA;;;AACA,MAAMC,oBAAoB,GAAG,CAACC,OAAD,EAAUC,aAAV,EAAyBC,YAAzB,KAA0C;AACtE,MAAKF,OAAO,KAAK,CAAb,IAAoBC,aAAa,KAAK,CAA1C,EAA8C;AAC7C,WAAO,OAAP;AACA,GAFD,MAEO,IAAKD,OAAO,KAAKC,aAAjB,EAAiC;AACvC,WAAO,MAAP;AACA,GAFM,MAEA,IAAKA,aAAa,GAAGD,OAAjB,IAA8BC,aAAa,KAAKC,YAAY,CAACC,KAAb,GAAqBD,YAAY,CAACE,GAAtF,EAA4F;AAClG,WAAO,SAAP;AACA,GAFM,MAEA,IAAKH,aAAa,GAAGD,OAArB,EAA+B;AACrC,WAAO,OAAP;AACA;AACD,CAVD;AAYA;AACA;AACA;;;AACA,MAAMK,qBAAqB,GAAG,CAACC,QAAD,EAAWC,UAAX,KAA0B;AACvD,QAAMC,eAAe,GAAIF,QAAQ,GAAGC,UAApC;AACA,QAAME,GAAG,GAAID,eAAe,GAAG,CAA/B;AACA,QAAME,IAAI,GAAIF,eAAe,KAAK,CAAlC;AACA,sBACC;AAAK,IAAA,KAAK,EAAG,4BAA4BC,GAAD,GAAS,UAAT,GAAwBC,IAAD,GAAU,EAAV,GAAiB,UAAY,EAA5F;AAAA,cACG,GAAGD,GAAD,GAAS,GAAT,GAAiB,EAAI,GAAED,eAAgB;AAD5C;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CATD;AAWA;AACA;AACA;;;AACA,MAAMG,oBAAoB,GAAIC,gBAAD,IAAsB;AAClD,SAAOA,gBAAgB,CAACC,GAAjB,CAAqB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC/C,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,QAAyBJ,OAA/B;;AACA,QAAIE,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;AACrB,0BACC,QAAC,KAAD,CAAO,QAAP;AAAA,gCACC;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACC;AAAM,YAAA,SAAS,EAAC,cAAhB;AAAA,sBACG,GAAEH,KAAK,CAACG,MAAO;AADlB;AAAA;AAAA;AAAA;AAAA,kBADD,eAIC;AAAM,YAAA,SAAS,EAAC,iBAAhB;AAAA,sBACG;AADH;AAAA;AAAA;AAAA;AAAA,kBAJD,eAOC;AAAM,YAAA,SAAS,EAAC,cAAhB;AAAA,sBACG,GAAED,IAAK;AADV;AAAA;AAAA;AAAA;AAAA,kBAPD;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,EAaEF,KAAK,CAACH,GAAN,CAAUO,IAAI,IAAI;AACjB,8BACC;AAAwB,YAAA,KAAK,EAAC,aAA9B;AAAA,oCACC;AAAM,cAAA,SAAS,EAAC,gBAAhB;AAAA,wBACG,GAAEA,IAAK;AADV;AAAA;AAAA;AAAA;AAAA,oBADD,eAIC;AAAM,cAAA,SAAS,EAAC,iBAAhB;AAAA,wBACG;AADH;AAAA;AAAA;AAAA;AAAA,oBAJD,eAOC;AAAM,cAAA,SAAS,EAAC,kBAAhB;AAAA,wBACG,GAAEH,KAAM;AADX;AAAA;AAAA;AAAA;AAAA,oBAPD,eAUC;AAAM,cAAA,SAAS,EAAC,iBAAhB;AAAA,wBACG;AADH;AAAA;AAAA;AAAA;AAAA,oBAVD;AAAA,aAAUF,KAAK,GAAGK,IAAlB;AAAA;AAAA;AAAA;AAAA,kBADD;AAgBA,SAjBD,CAbF;AAAA,SAAqBL,KAArB;AAAA;AAAA;AAAA;AAAA,cADD;AAmCA,KApCD,MAoCO,IAAIC,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AAC9B,0BACC;AAAiB,QAAA,SAAS,EAAC,aAA3B;AAAA,gCACC;AAAM,UAAA,SAAS,EAAC,gBAAhB;AAAA,oBACG,GAAEH,KAAK,CAAC,CAAD,CAAI;AADd;AAAA;AAAA;AAAA;AAAA,gBADD,eAIC;AAAM,UAAA,SAAS,EAAC,iBAAhB;AAAA,oBACG;AADH;AAAA;AAAA;AAAA;AAAA,gBAJD,eAOC;AAAM,UAAA,SAAS,EAAC,kBAAhB;AAAA,oBACG,GAAEC,KAAM;AADX;AAAA;AAAA;AAAA;AAAA,gBAPD,eAUC;AAAM,UAAA,SAAS,EAAC,iBAAhB;AAAA,oBACG;AADH;AAAA;AAAA;AAAA;AAAA,gBAVD,eAaC;AAAM,UAAA,SAAS,EAAC,cAAhB;AAAA,oBACG,GAAEC,IAAK;AADV;AAAA;AAAA;AAAA;AAAA,gBAbD;AAAA,SAAUH,KAAV;AAAA;AAAA;AAAA;AAAA,cADD;AAmBA;AACD,GA3DM,CAAP;AA4DA,CA7DD;AA+DA;AACA;AACA;;;AACA,MAAMM,cAAc,GAAG,CAACrB,OAAD,EAAUsB,OAAV,EAAmBC,iBAAnB,EAAsC1B,KAAtC,EAA6C2B,mBAA7C,KAAqE;AAC3F,QAAMC,GAAG,GAAG9B,eAAe,CAACK,OAAD,EAAUsB,OAAO,CAACC,iBAAD,CAAP,CAA2BpB,KAArC,EAA4CmB,OAAO,CAACC,iBAAD,CAAP,CAA2BnB,GAAvE,CAA3B;AACA,QAAMsB,GAAG,GAAGJ,OAAO,CAACC,iBAAD,CAAP,CAA2BpB,KAA3B,GAAmCmB,OAAO,CAACC,iBAAD,CAAP,CAA2BnB,GAA1E;AACA,SACEP,KAAK,KAAK,UAAV,IAAwBA,KAAK,KAAK,UAAlC,IAAgDA,KAAK,KAAK,UAA1D,IAAwEA,KAAK,KAAK,UAAnF,GAAkGyB,OAAO,CAACC,iBAAD,CAAP,CAA2BI,KAA5B,gBAAsC;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA,oBAAqC,iBAAgBL,OAAO,CAACC,iBAAD,CAAP,CAA2BK,IAAK,EAArF;AAAA;AAAA;AAAA;AAAA;AAAA,UAAtC,gBAChG,QAAC,KAAD,CAAO,QAAP;AAAA,2BACC,QAAC,MAAD;AACC,MAAA,SAAS,EAAEnC,WADZ;AAEC,MAAA,MAAM,EAAE,CAACgC,GAAD,EAAMC,GAAN,CAFT;AAGC,MAAA,MAAM,EAAE,CAACD,GAAD,CAHT;AAIC,MAAA,IAAI,EAAE,CAJP;AAMC,MAAA,QAAQ,EAAED,mBANX;AAOC,MAAA,IAAI,EAAE,CAPP;AAAA,8BASC,QAAC,IAAD;AAAA,kBAEE,CAAC;AAAEK,UAAAA;AAAF,SAAD,kBACC;AAAK,UAAA,KAAK,EAAErC,SAAZ;AAAA,aAA2BqC,YAAY;AAAvC;AAAA;AAAA;AAAA;AAAA;AAHH;AAAA;AAAA;AAAA;AAAA,cATD,eAgBC,QAAC,OAAD;AAAA,kBAEE,CAAC;AAAEC,UAAAA,OAAF;AAAWC,UAAAA;AAAX,SAAD,kBACC;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,oBAEED,OAAO,CAACjB,GAAR,CAAYmB,MAAM,iBACjB,QAAC,MAAD;AAEC,YAAA,MAAM,EAAEA,MAFT;AAGC,YAAA,cAAc,EAAED;AAHjB,aACMC,MAAM,CAACC,EADb;AAAA;AAAA;AAAA;AAAA,kBADD;AAFF;AAAA;AAAA;AAAA;AAAA;AAHH;AAAA;AAAA;AAAA;AAAA,cAhBD,eAiCC,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,KAAf;AAAA,kBAEE,CAAC;AAAEC,UAAAA,MAAF;AAAUC,UAAAA;AAAV,SAAD,kBACC;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,oBAEED,MAAM,CAACrB,GAAP,CACC,CAAC;AAAEoB,YAAAA,EAAF;AAAMG,YAAAA,MAAN;AAAcC,YAAAA;AAAd,WAAD,kBACC,QAAC,KAAD;AAEC,YAAA,MAAM,EAAED,MAFT;AAGC,YAAA,MAAM,EAAEC,MAHT;AAIC,YAAA,aAAa,EAAEF;AAJhB,aACMF,EADN;AAAA;AAAA;AAAA;AAAA,kBAFF;AAFF;AAAA;AAAA;AAAA;AAAA;AAHH;AAAA;AAAA;AAAA;AAAA,cAjCD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD,GAyDI,IA1DL;AA4DA,CA/DD;;AAiEA,SACCrC,kBADD,EAECe,oBAFD,EAGCN,qBAHD,EAICgB,cAJD,EAKCtB,oBALD","sourcesContent":["import React from 'react';\r\nimport { Handles, Rail, Slider, Tracks } from 'react-compound-slider';\r\nimport Handle from \"../components/raiseBar/Controller\";\r\nimport { railStyle, sliderStyle } from \"../components/raiseBar/styles\";\r\nimport Track from \"../components/raiseBar/Tracker\";\r\nimport {\r\n\tcalculateMinBet\r\n} from './betService.js';\r\n\r\n/** \r\n* The uiService provides services to handle\r\n* UI animations assignments and renderings.\r\n*/\r\n\r\n\r\n/* \r\n Set next game phase\r\n*/\r\nconst makePhaseStatement = (phase) => {\r\n\tswitch (phase) {\r\n\t\tcase ('loading'): return 'Finding a Table, Please Wait';\r\n\t\tcase ('initialDeal'): return 'Dealing out the cards';\r\n\t\tcase ('betting1'): return 'Betting 1';\r\n\t\tcase ('flop'): return 'Flop';\r\n\t\tcase ('betting2'): return 'Flop';\r\n\t\tcase ('turn'): return 'Turn';\r\n\t\tcase ('betting3'): return 'Turn';\r\n\t\tcase ('river'): return 'River';\r\n\t\tcase ('betting4'): return 'River';\r\n\t\tcase ('showdown'): return 'Show Your Cards!';\r\n\t\tdefault: throw Error('Unfamiliar phase returned from makePhaseStatement()');\r\n\t}\r\n}\r\n\r\n/* \r\n Render Action Button text (Fold, Call, Raise, All in, etc.)\r\n*/\r\nconst makeActionButtonText = (highBet, betInputValue, activePlayer) => {\r\n\tif ((highBet === 0) && (betInputValue === 0)) {\r\n\t\treturn 'Check'\r\n\t} else if ((highBet === betInputValue)) {\r\n\t\treturn 'Call'\r\n\t} else if ((betInputValue < highBet) || (betInputValue === activePlayer.chips + activePlayer.bet)) {\r\n\t\treturn 'All-in!'\r\n\t} else if ((betInputValue > highBet)) {\r\n\t\treturn 'Raise'\r\n\t}\r\n}\r\n\r\n/* \r\n Show player winning after each hand\r\n*/\r\nconst makeNetPlayerEarnings = (endChips, startChips) => {\r\n\tconst netChipEarnings = (endChips - startChips);\r\n\tconst win = (netChipEarnings > 0);\r\n\tconst none = (netChipEarnings === 0);\r\n\treturn (\r\n\t\t<div class={`showdown-player-earnings ${(win) ? ('positive') : (none) ? ('') : ('negative')}`}>\r\n\t\t\t{`${(win) ? ('+') : ('')}${netChipEarnings}`}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n/* \r\n Show Showdown messages\r\n*/\r\nconst makeShowdownMessages = (showDownMessages) => {\r\n\treturn showDownMessages.map((message, index) => {\r\n\t\tconst { users, prize, rank } = message;\r\n\t\tif (users.length > 1) {\r\n\t\t\treturn (\r\n\t\t\t\t<React.Fragment key={index}>\r\n\t\t\t\t\t<div className=\"message-div\">\r\n\t\t\t\t\t\t<span className=\"message-user\">\r\n\t\t\t\t\t\t\t{`${users.length} players `}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span className=\"message-content\">\r\n\t\t\t\t\t\t\t{`split the pot with a `}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span className=\"message-rank\">\r\n\t\t\t\t\t\t\t{`${rank}!`}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tusers.map(user => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index + user} class=\"message-div\">\r\n\t\t\t\t\t\t\t\t\t<span className=\"message-player\">\r\n\t\t\t\t\t\t\t\t\t\t{`${user} `}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"message-content\">\r\n\t\t\t\t\t\t\t\t\t\t{`takes `}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"message-earnings\">\r\n\t\t\t\t\t\t\t\t\t\t{`${prize} chips `}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"message-content\">\r\n\t\t\t\t\t\t\t\t\t\t{`from the pot.`}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t)\r\n\t\t} else if (users.length === 1) {\r\n\t\t\treturn (\r\n\t\t\t\t<div key={index} className=\"message-div\">\r\n\t\t\t\t\t<span className=\"message-player\">\r\n\t\t\t\t\t\t{`${users[0]} `}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span className=\"message-content\">\r\n\t\t\t\t\t\t{`wins `}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span className=\"message-earnings\">\r\n\t\t\t\t\t\t{`${prize} chips `}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span className=\"message-content\">\r\n\t\t\t\t\t\t{`from the pot with a `}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span className=\"message-rank\">\r\n\t\t\t\t\t\t{`${rank}!`}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t})\r\n}\r\n\r\n/* \r\n Render User Action menu for actions and slider (for raising)\r\n*/\r\nconst makeActionMenu = (highBet, players, activePlayerIndex, phase, changeSliderInputFn) => {\r\n\tconst min = calculateMinBet(highBet, players[activePlayerIndex].chips, players[activePlayerIndex].bet)\r\n\tconst max = players[activePlayerIndex].chips + players[activePlayerIndex].bet\r\n\treturn (\r\n\t\t(phase === 'betting1' || phase === 'betting2' || phase === 'betting3' || phase === 'betting4') ? (players[activePlayerIndex].agent) ? (<h4 className=\"current-move-head\"> {`Current Move: ${players[activePlayerIndex].name}`}</h4>) : (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Slider\r\n\t\t\t\t\trootStyle={sliderStyle}\r\n\t\t\t\t\tdomain={[min, max]}\r\n\t\t\t\t\tvalues={[min]}\r\n\t\t\t\t\tstep={1}\r\n\r\n\t\t\t\t\tonChange={changeSliderInputFn}\r\n\t\t\t\t\tmode={2}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Rail>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t({ getRailProps }) => (\r\n\t\t\t\t\t\t\t\t<div style={railStyle} {...getRailProps()} />\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Rail>\r\n\t\t\t\t\t<Handles>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t({ handles, getHandleProps }) => (\r\n\t\t\t\t\t\t\t\t<div className='slider-handles'>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\thandles.map(handle => (\r\n\t\t\t\t\t\t\t\t\t\t\t<Handle\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={handle.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\thandle={handle}\r\n\t\t\t\t\t\t\t\t\t\t\t\tgetHandleProps={getHandleProps}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Handles>\r\n\t\t\t\t\t<Tracks right={false}>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t({ tracks, getTrackProps }) => (\r\n\t\t\t\t\t\t\t\t<div className='slider-tracks'>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ttracks.map(\r\n\t\t\t\t\t\t\t\t\t\t\t({ id, source, target }) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Track\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsource={source}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget={target}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tgetTrackProps={getTrackProps}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Tracks>\r\n\t\t\t\t</Slider>\r\n\t\t\t</React.Fragment>\r\n\t\t) : null\r\n\t)\r\n}\r\n\r\nexport {\r\n\tmakePhaseStatement,\r\n\tmakeShowdownMessages,\r\n\tmakeNetPlayerEarnings,\r\n\tmakeActionMenu,\r\n\tmakeActionButtonText\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}