{"ast":null,"code":"import _toConsumableArray from\"C:/Users/manny/fyp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{calculateMinBet,manageBet,managePlayerFold}from'./betService.js';import{checkFrequencyHistogram,checkIfFlush,checkIfRoyalFlush,checkIfStraight,checkIfStraightFlush,generateValueSet}from'./cardsService.js';import{makeActionButtonText}from'./uiService.js';/**\r\n* The aiService provides key services for the \r\n* functinality of Ai players. It handles \r\n* how the Ai determines what move to make.\r\n*/ /* \r\nThe main function to handle the behavior of an Ai player in a given situation \r\n*/var aiHandler=function aiHandler(state,moveAnimationState){var highBet=state.highBet;var activePlayer=state.players[state.activePlayerIndex];var min=calculateMinBet(highBet,activePlayer.chips,activePlayer.bet);var max=activePlayer.chips+activePlayer.bet;var totalInvestment=activePlayer.chips+activePlayer.bet+activePlayer.stackInvestment;var investmentRequiredToRemain=highBet/totalInvestment*100;var descendingSortHand=activePlayer.cards.concat(state.communityCards).sort(function(a,b){return b.value-a.value;});var _makeHistogram=makeHistogram(descendingSortHand),frequencyHistogram=_makeHistogram.frequencyHistogram,suitHistogram=_makeHistogram.suitHistogram;var stakes=groupStakes(investmentRequiredToRemain);var preFlopValues=activePlayer.cards.map(function(el){return el.value;});var highCard=Math.max.apply(Math,_toConsumableArray(preFlopValues));var lowCard=Math.min.apply(Math,_toConsumableArray(preFlopValues));switch(state.phase){// determine Ai action for round 1 of betting\ncase'betting1':{// use specific factors to determine fold, call/check or bet\nvar suited=Object.entries(suitHistogram).find(function(keyValuePair){return keyValuePair[1]===2;});var straightGap=highCard-lowCard<=4;var _createPreFlopDetermi=createPreFlopDeterminant(highCard,lowCard,suited,straightGap),_callLimit=_createPreFlopDetermi.callLimit,_raiseChance=_createPreFlopDetermi.raiseChance,_raiseRange=_createPreFlopDetermi.raiseRange;var _willCall=betting_hierarchy[stakes]<=betting_hierarchy[_callLimit];var _callValue=activePlayer.chips+activePlayer.bet>=highBet?highBet:activePlayer.chips+activePlayer.bet;if(_willCall){if(willRaise(_raiseChance)){var determinedRaiseRange=_raiseRange[Math.floor(Math.random()*(_raiseRange.length-0))+0];var wantRaise=betting_hierarchy[stakes]<=betting_hierarchy[determinedRaiseRange];if(wantRaise){var betValue=Math.floor(chooseBetProportion(determinedRaiseRange)*activePlayer.chips);if(betValue<highBet){if(highBet<max){betValue=highBet;}}if(betValue>max)activePlayer.canRaise=false;moveAnimationState(state.activePlayerIndex,\"\".concat(makeActionButtonText(highBet,betValue,activePlayer),\" \").concat(betValue));return manageBet(state,betValue,min,max);}else{// will not render the bet value if it's a \"check\"\nmoveAnimationState(state.activePlayerIndex,\"\".concat(makeActionButtonText(highBet,_callValue,activePlayer),\" \").concat(_callValue>activePlayer.bet?_callValue:\"\"));return manageBet(state,_callValue,min,max);}}else{moveAnimationState(state.activePlayerIndex,\"\".concat(makeActionButtonText(highBet,_callValue,activePlayer),\" \").concat(_callValue>activePlayer.bet?_callValue:\"\"));return manageBet(state,_callValue,min,max);}}else{moveAnimationState(state.activePlayerIndex,\"FOLD\");return managePlayerFold(state);}}// determine Ai action for subsequent betting rounds\ncase'betting2':case'betting3':case'betting4':// update freq histogram used to track hands\nvar _checkFrequencyHistog=checkFrequencyHistogram(descendingSortHand,frequencyHistogram),isPair=_checkFrequencyHistog.isPair,isTwoPair=_checkFrequencyHistog.isTwoPair,isThreeOfAKind=_checkFrequencyHistog.isThreeOfAKind,isFourOfAKind=_checkFrequencyHistog.isFourOfAKind,isFullHouse=_checkFrequencyHistog.isFullHouse,frequencyHistogramMetaData=_checkFrequencyHistog.frequencyHistogramMetaData;var valueSet=generateValueSet(descendingSortHand);var _checkIfStraight=checkIfStraight(valueSet),isStraight=_checkIfStraight.isStraight,isLowStraight=_checkIfStraight.isLowStraight,concurrentCardValues=_checkIfStraight.concurrentCardValues,concurrentCardValuesLow=_checkIfStraight.concurrentCardValuesLow;var _checkIfFlush=checkIfFlush(suitHistogram),isFlush=_checkIfFlush.isFlush,flushedSuit=_checkIfFlush.flushedSuit;var flushCards=isFlush&&descendingSortHand.filter(function(card){return card.suit===flushedSuit;});var _ref=isFlush&&checkIfStraightFlush(flushCards),isStraightFlush=_ref.isStraightFlush,isLowStraightFlush=_ref.isLowStraightFlush,concurrentSFCardValues=_ref.concurrentSFCardValues,concurrentSFCardValuesLow=_ref.concurrentSFCardValuesLow;var isRoyalFlush=isFlush&&checkIfRoyalFlush(flushCards);var isNoPair=!isRoyalFlush&&!isStraightFlush&&!isFourOfAKind&&!isFullHouse&&!isFlush&&!isStraight&&!isThreeOfAKind&&!isTwoPair&&!isPair;// create a hierarchy to rank hand strength\nvar handHierarchy=[{name:'Royal Flush',match:isRoyalFlush},{name:'Straight Flush',match:isStraightFlush},{name:'Four Of A Kind',match:isFourOfAKind},{name:'Full House',match:isFullHouse},{name:'Flush',match:isFlush},{name:'Straight',match:isStraight},{name:'Three Of A Kind',match:isThreeOfAKind},{name:'Two Pair',match:isTwoPair},{name:'Pair',match:isPair},{name:'No Pair',match:isNoPair}];// use hand hierarchy to determine Ai action\nvar highRank=handHierarchy[handHierarchy.findIndex(function(el){return el.match===true;})].name;var _createGeneralizedDet=createGeneralizedDeterminant(descendingSortHand,highRank,frequencyHistogramMetaData),callLimit=_createGeneralizedDet.callLimit,raiseChance=_createGeneralizedDet.raiseChance,raiseRange=_createGeneralizedDet.raiseRange;var willCall=betting_hierarchy[stakes]<=betting_hierarchy[callLimit];var callValue=activePlayer.chips+activePlayer.bet>=highBet?highBet:activePlayer.chips+activePlayer.bet;if(willCall){if(willRaise(raiseChance)){var _determinedRaiseRange=raiseRange[Math.floor(Math.random()*(raiseRange.length-0))+0];var _wantRaise=betting_hierarchy[stakes]<=betting_hierarchy[_determinedRaiseRange];if(_wantRaise){var _betValue=Math.floor(chooseBetProportion(_determinedRaiseRange)*activePlayer.chips);if(_betValue<highBet){_betValue=highBet;}activePlayer.canRaise=false;moveAnimationState(state.activePlayerIndex,\"\".concat(makeActionButtonText(highBet,_betValue,activePlayer),\" \").concat(_betValue));return manageBet(state,_betValue,min,max);}else{moveAnimationState(state.activePlayerIndex,\"\".concat(makeActionButtonText(highBet,callValue,activePlayer),\" \").concat(callValue>activePlayer.bet?callValue:\"\"));return manageBet(state,callValue,min,max);}}else{moveAnimationState(state.activePlayerIndex,\"\".concat(makeActionButtonText(highBet,callValue,activePlayer),\" \").concat(callValue>activePlayer.bet?callValue:\"\"));return manageBet(state,callValue,min,max);}}else{moveAnimationState(state.activePlayerIndex,\"FOLD\");return managePlayerFold(state);}default:throw Error(\"Handle AI Running during incorrect phase\");}};/* \r\nThis function determines Ai behavior based \r\non the rank of its card hand.\r\n*/var createGeneralizedDeterminant=function createGeneralizedDeterminant(hand,highRank,frequencyHistogramMetaData){if(highRank==='Royal Flush'){return{callLimit:'beware',raiseChance:1,raiseRange:['beware']};}else if(highRank==='Straight Flush'){return{callLimit:'beware',raiseChance:1,raiseRange:['strong','aggro','beware']};}else if(highRank==='Four Of A Kind'){return{callLimit:'beware',raiseChance:1,raiseRange:['strong','aggro','beware']};}else if(highRank==='Full House'){return{callLimit:'beware',raiseChance:1,raiseRange:['hidraw','strong','aggro','beware']};}else if(highRank==='Flush'){return{callLimit:'beware',raiseChange:1,raiseRange:['strong','aggro','beware']};}else if(highRank==='Straight'){return{callLimit:'beware',raiseChange:1,raiseRange:['lowdraw','meddraw','hidraw, strong']};}else if(highRank==='Three Of A Kind'){return{callLimit:'beware',raiseChange:1,raiseRange:['lowdraw','meddraw','hidraw, strong']};}else if(highRank==='Two Pair'){return{callLimit:'beware',raiseChange:0.7,raiseRange:['lowdraw','meddraw','hidraw, strong']};}else if(highRank==='Pair'){return{callLimit:'hidraw',raiseChange:0.5,raiseRange:['lowdraw','meddraw','hidraw, strong']};}else if(highRank==='No Pair'){return{callLimit:'meddraw',raiseChange:0.2,raiseRange:['lowdraw','meddraw','hidraw, strong']};}};/* \r\nA function to determine Ai behavior based on the flop\r\nand its results. \r\n*/var createPreFlopDeterminant=function createPreFlopDeterminant(highCard,lowCard,suited,straightGap){if(highCard===lowCard){switch(highCard){case highCard>8:{return{callLimit:'beware',raiseChance:0.9,raiseRange:['lowdraw','meddraw','hidraw','strong']// randomly determine bet based on this\n};}case highCard>5:{return{callLimit:'aggro',raiseChance:0.75,// if Math.random() is < than this, select a random raiseTarget \nraiseRange:['insignificant','lowdraw','meddraw']};}case highCard<5:default:{return{callLimit:'aggro',raiseChance:0.5,raiseRange:['insignificant','lowdraw','meddraw']};}}}else if(highCard>9&&lowCard>9){// two high cards\nif(suited){return{callLimit:'beware',raiseChance:1,raiseRange:['insignificant','lowdraw','meddraw','hidraw']};}else{return{callLimit:'beware',raiseChance:0.75,raiseRange:['insignificant','lowdraw','meddraw','hidraw']};}}else if(highCard>8&&lowCard>6){// one high card\nif(suited){return{callLimit:'beware',raiseChance:0.65,raiseRange:['insignificant','lowdraw','meddraw','hidraw']};}else{return{callLimit:'beware',raiseChance:0.45,raiseRange:['insignificant','lowdraw','meddraw','hidraw']};}}else if(highCard>8&&lowCard<6){if(suited){return{callLimit:'major',raiseChance:0.45,raiseRange:['insignificant','lowdraw']};}else{return{callLimit:'aggro',raiseChance:0.35,raiseRange:['insignificant','lowdraw']};}}else if(highCard>5&&lowCard>3){if(suited){return{callLimit:'strong',raiseChance:0.1,raiseRange:['insignificant','lowdraw']};}else if(straightGap){return{callLimit:'aggro',raiseChance:0};}else{return{callLimit:'strong',raiseChance:0};}}else{if(suited){return{callLimit:'strong',raiseChance:0.1,raiseRange:['insignificant']};}else if(straightGap){return{callLimit:'strong',raiseChance:0};}else{return{callLimit:'insignificant',raiseChance:0};}}};/* \r\nA function to group stakes into terms for betting.\r\n*/var groupStakes=function groupStakes(percentage){switch(true){case percentage>75:return'beware';case percentage>40:return'aggro';case percentage>35:return'major';case percentage>25:return'strong';case percentage>15:return'hidraw';case percentage>10:return'meddraw';case percentage>3:return'lowdraw';case percentage>=1:return'insignificant';case percentage<1:default:return'blind';}};/* \r\nThis function determines the amount an Ai\r\nwill bet based on the betting hierarchy value.\r\n*/var chooseBetProportion=function chooseBetProportion(stakes){if(stakes==='blind'){return Math.random()*(0.1-0)+0;}else if(stakes==='insignificant'){return Math.random()*(0.03-0.01)+0.01;}else if(stakes==='lowdraw'){return Math.random()*(0.10-0.03)+0.03;}else if(stakes==='meddraw'){return Math.random()*(0.15-0.10)+0.10;}else if(stakes==='hidraw'){return Math.random()*(0.25-0.15)+0.15;}else if(stakes==='strong'){return Math.random()*(0.35-0.25)+0.25;}else if(stakes==='major'){return Math.random()*(0.40-0.35)+0.35;}else if(stakes==='aggro'){return Math.random()*(0.75-0.40)+0.40;}else if(stakes==='beware'){return Math.random()*(1-0.75)+0.75;}};/* \r\nA list to set the degree of an Ai bet.\r\n*/var betting_hierarchy={blind:0,insignificant:1,lowdraw:2,meddraw:3,hidraw:4,strong:5,major:6,aggro:7,beware:8};var willRaise=function willRaise(chance){return Math.random()<chance;};var makeHistogram=function makeHistogram(hand){var histogram=hand.reduce(function(acc,cur){acc.frequencyHistogram[cur.cardFace]=(acc.frequencyHistogram[cur.cardFace]||0)+1;acc.suitHistogram[cur.suit]=(acc.suitHistogram[cur.suit]||0)+1;return acc;},{frequencyHistogram:{},suitHistogram:{}});return histogram;};export{aiHandler};","map":{"version":3,"sources":["C:/Users/manny/fyp/src/services/aiService.js"],"names":["calculateMinBet","manageBet","managePlayerFold","checkFrequencyHistogram","checkIfFlush","checkIfRoyalFlush","checkIfStraight","checkIfStraightFlush","generateValueSet","makeActionButtonText","aiHandler","state","moveAnimationState","highBet","activePlayer","players","activePlayerIndex","min","chips","bet","max","totalInvestment","stackInvestment","investmentRequiredToRemain","descendingSortHand","cards","concat","communityCards","sort","a","b","value","makeHistogram","frequencyHistogram","suitHistogram","stakes","groupStakes","preFlopValues","map","el","highCard","Math","lowCard","phase","suited","Object","entries","find","keyValuePair","straightGap","createPreFlopDeterminant","callLimit","raiseChance","raiseRange","willCall","betting_hierarchy","callValue","willRaise","determinedRaiseRange","floor","random","length","wantRaise","betValue","chooseBetProportion","canRaise","isPair","isTwoPair","isThreeOfAKind","isFourOfAKind","isFullHouse","frequencyHistogramMetaData","valueSet","isStraight","isLowStraight","concurrentCardValues","concurrentCardValuesLow","isFlush","flushedSuit","flushCards","filter","card","suit","isStraightFlush","isLowStraightFlush","concurrentSFCardValues","concurrentSFCardValuesLow","isRoyalFlush","isNoPair","handHierarchy","name","match","highRank","findIndex","createGeneralizedDeterminant","Error","hand","raiseChange","percentage","blind","insignificant","lowdraw","meddraw","hidraw","strong","major","aggro","beware","chance","histogram","reduce","acc","cur","cardFace"],"mappings":"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","sourcesContent":["import {\r\n\tcalculateMinBet, manageBet,\r\n\tmanagePlayerFold\r\n} from './betService.js';\r\nimport {\r\n\tcheckFrequencyHistogram,\r\n\tcheckIfFlush,\r\n\tcheckIfRoyalFlush,\r\n\tcheckIfStraight,\r\n\tcheckIfStraightFlush,\r\n\tgenerateValueSet\r\n} from './cardsService.js';\r\nimport {\r\n\tmakeActionButtonText\r\n} from './uiService.js';\r\n\r\n/**\r\n* The aiService provides key services for the \r\n* functinality of Ai players. It handles \r\n* how the Ai determines what move to make.\r\n*/\r\n\r\n/* \r\nThe main function to handle the behavior of an Ai player in a given situation \r\n*/\r\nconst aiHandler = (state, moveAnimationState) => {\r\n\tconst { highBet } = state\r\n\tconst activePlayer = state.players[state.activePlayerIndex];\r\n\tconst min = calculateMinBet(highBet, activePlayer.chips, activePlayer.bet)\r\n\tconst max = activePlayer.chips + activePlayer.bet\r\n\tconst totalInvestment = activePlayer.chips + activePlayer.bet + activePlayer.stackInvestment;\r\n\tconst investmentRequiredToRemain = (highBet / totalInvestment) * 100;\r\n\tconst descendingSortHand = activePlayer.cards.concat(state.communityCards).sort((a, b) => b.value - a.value)\r\n\tconst { frequencyHistogram, suitHistogram } = makeHistogram(descendingSortHand)\r\n\tconst stakes = groupStakes(investmentRequiredToRemain);\r\n\tconst preFlopValues = activePlayer.cards.map(el => el.value)\r\n\tconst highCard = Math.max(...preFlopValues)\r\n\tconst lowCard = Math.min(...preFlopValues)\r\n\tswitch (state.phase) {\r\n\r\n\t\t// determine Ai action for round 1 of betting\r\n\t\tcase ('betting1'): {\r\n\t\t\t// use specific factors to determine fold, call/check or bet\r\n\t\t\tconst suited = Object.entries(suitHistogram).find(keyValuePair => keyValuePair[1] === 2)\r\n\t\t\tconst straightGap = (highCard - lowCard <= 4)\r\n\t\t\tconst { callLimit, raiseChance, raiseRange } = createPreFlopDeterminant(highCard, lowCard, suited, straightGap)\r\n\t\t\tconst willCall = (betting_hierarchy[stakes] <= betting_hierarchy[callLimit])\r\n\t\t\tconst callValue = (activePlayer.chips + activePlayer.bet >= highBet) ? highBet : activePlayer.chips + activePlayer.bet\r\n\t\t\tif (willCall) {\r\n\t\t\t\tif (willRaise(raiseChance)) {\r\n\t\t\t\t\tconst determinedRaiseRange = raiseRange[Math.floor(Math.random() * (raiseRange.length - 0)) + 0];\r\n\t\t\t\t\tconst wantRaise = (betting_hierarchy[stakes] <= betting_hierarchy[determinedRaiseRange])\r\n\t\t\t\t\tif (wantRaise) {\r\n\t\t\t\t\t\tlet betValue = Math.floor(chooseBetProportion(determinedRaiseRange) * activePlayer.chips)\r\n\t\t\t\t\t\tif (betValue < highBet) {\r\n\t\t\t\t\t\t\tif (highBet < max) {\r\n\t\t\t\t\t\t\t\tbetValue = highBet;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (betValue > max)\r\n\t\t\t\t\t\t\tactivePlayer.canRaise = false\r\n\t\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, betValue, activePlayer)} ${betValue}`);\r\n\t\t\t\t\t\treturn manageBet(state, betValue, min, max);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// will not render the bet value if it's a \"check\"\r\n\t\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\r\n\t\t\t\t\t\treturn manageBet(state, callValue, min, max);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\r\n\t\t\t\t\treturn manageBet(state, callValue, min, max);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tmoveAnimationState(state.activePlayerIndex, `FOLD`);\r\n\t\t\t\treturn managePlayerFold(state)\r\n\t\t\t}\r\n\t\t}\r\n\t\t// determine Ai action for subsequent betting rounds\r\n\t\tcase ('betting2'):\r\n\t\tcase ('betting3'):\r\n\t\tcase ('betting4'):\r\n\t\t\t// update freq histogram used to track hands\r\n\t\t\tconst {\r\n\r\n\t\t\t\tisPair,\r\n\t\t\t\tisTwoPair,\r\n\t\t\t\tisThreeOfAKind,\r\n\t\t\t\tisFourOfAKind,\r\n\t\t\t\tisFullHouse,\r\n\t\t\t\tfrequencyHistogramMetaData,\r\n\r\n\t\t\t} = checkFrequencyHistogram(descendingSortHand, frequencyHistogram);\r\n\t\t\tconst valueSet = generateValueSet(descendingSortHand);\r\n\t\t\tconst {\r\n\r\n\t\t\t\tisStraight,\r\n\t\t\t\tisLowStraight,\r\n\t\t\t\tconcurrentCardValues,\r\n\t\t\t\tconcurrentCardValuesLow,\r\n\r\n\t\t\t} = checkIfStraight(valueSet);\r\n\t\t\tconst {\r\n\r\n\t\t\t\tisFlush,\r\n\t\t\t\tflushedSuit,\r\n\r\n\t\t\t} = checkIfFlush(suitHistogram);\r\n\r\n\t\t\tconst flushCards = (isFlush) &&\r\n\t\t\t\tdescendingSortHand\r\n\t\t\t\t\t.filter(card => card.suit === flushedSuit);\r\n\r\n\t\t\tconst {\r\n\r\n\t\t\t\tisStraightFlush,\r\n\t\t\t\tisLowStraightFlush,\r\n\t\t\t\tconcurrentSFCardValues,\r\n\t\t\t\tconcurrentSFCardValuesLow,\r\n\r\n\t\t\t} = (isFlush) && checkIfStraightFlush(flushCards);\r\n\t\t\tconst isRoyalFlush = (isFlush) &&\r\n\t\t\t\tcheckIfRoyalFlush(flushCards);\r\n\t\t\tconst isNoPair = (\r\n\t\t\t\t(!isRoyalFlush) &&\r\n\t\t\t\t(!isStraightFlush) &&\r\n\t\t\t\t(!isFourOfAKind) &&\r\n\t\t\t\t(!isFullHouse) &&\r\n\t\t\t\t(!isFlush) &&\r\n\t\t\t\t(!isStraight) &&\r\n\t\t\t\t(!isThreeOfAKind) &&\r\n\t\t\t\t(!isTwoPair) &&\r\n\t\t\t\t(!isPair));\r\n\r\n\t\t\t// create a hierarchy to rank hand strength\r\n\t\t\tconst handHierarchy = [{\r\n\t\t\t\tname: 'Royal Flush',\r\n\t\t\t\tmatch: isRoyalFlush,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Straight Flush',\r\n\t\t\t\tmatch: isStraightFlush\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Four Of A Kind',\r\n\t\t\t\tmatch: isFourOfAKind,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Full House',\r\n\t\t\t\tmatch: isFullHouse,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Flush',\r\n\t\t\t\tmatch: isFlush,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Straight',\r\n\t\t\t\tmatch: isStraight,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Three Of A Kind',\r\n\t\t\t\tmatch: isThreeOfAKind,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Two Pair',\r\n\t\t\t\tmatch: isTwoPair,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'Pair',\r\n\t\t\t\tmatch: isPair,\r\n\t\t\t}, {\r\n\t\t\t\tname: 'No Pair',\r\n\t\t\t\tmatch: isNoPair\r\n\t\t\t}];\r\n\r\n\t\t\t// use hand hierarchy to determine Ai action\r\n\t\t\tconst highRank = handHierarchy[handHierarchy.findIndex(el => el.match === true)].name\r\n\t\t\tconst { callLimit, raiseChance, raiseRange } = createGeneralizedDeterminant(descendingSortHand, highRank, frequencyHistogramMetaData)\r\n\t\t\tconst willCall = (betting_hierarchy[stakes] <= betting_hierarchy[callLimit])\r\n\t\t\tconst callValue = (activePlayer.chips + activePlayer.bet >= highBet) ? highBet : activePlayer.chips + activePlayer.bet\r\n\t\t\tif (willCall) {\r\n\t\t\t\tif (willRaise(raiseChance)) {\r\n\t\t\t\t\tconst determinedRaiseRange = raiseRange[Math.floor(Math.random() * (raiseRange.length - 0)) + 0];\r\n\t\t\t\t\tconst wantRaise = (betting_hierarchy[stakes] <= betting_hierarchy[determinedRaiseRange])\r\n\t\t\t\t\tif (wantRaise) {\r\n\t\t\t\t\t\tlet betValue = Math.floor(chooseBetProportion(determinedRaiseRange) * activePlayer.chips)\r\n\t\t\t\t\t\tif (betValue < highBet) {\r\n\t\t\t\t\t\t\tbetValue = highBet;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tactivePlayer.canRaise = false\r\n\t\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, betValue, activePlayer)} ${betValue}`);\r\n\t\t\t\t\t\treturn manageBet(state, betValue, min, max);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\r\n\t\t\t\t\t\treturn manageBet(state, callValue, min, max);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmoveAnimationState(state.activePlayerIndex, `${makeActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\r\n\t\t\t\t\treturn manageBet(state, callValue, min, max);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tmoveAnimationState(state.activePlayerIndex, `FOLD`);\r\n\t\t\t\treturn managePlayerFold(state)\r\n\t\t\t}\r\n\t\tdefault: throw Error(\"Handle AI Running during incorrect phase\");\r\n\t}\r\n}\r\n\r\n/* \r\nThis function determines Ai behavior based \r\non the rank of its card hand.\r\n*/\r\nconst createGeneralizedDeterminant = (hand, highRank, frequencyHistogramMetaData) => {\r\n\tif (highRank === 'Royal Flush') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChance: 1,\r\n\t\t\traiseRange: ['beware']\r\n\t\t}\r\n\t} else if (highRank === 'Straight Flush') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChance: 1,\r\n\t\t\traiseRange: ['strong', 'aggro', 'beware']\r\n\t\t}\r\n\t} else if (highRank === 'Four Of A Kind') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChance: 1,\r\n\t\t\traiseRange: ['strong', 'aggro', 'beware']\r\n\t\t}\r\n\t} else if (highRank === 'Full House') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChance: 1,\r\n\t\t\traiseRange: ['hidraw', 'strong', 'aggro', 'beware']\r\n\t\t}\r\n\t} else if (highRank === 'Flush') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChange: 1,\r\n\t\t\traiseRange: ['strong', 'aggro', 'beware'],\r\n\t\t}\r\n\t} else if (highRank === 'Straight') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChange: 1,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t} else if (highRank === 'Three Of A Kind') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChange: 1,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t} else if (highRank === 'Two Pair') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'beware',\r\n\t\t\traiseChange: 0.7,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t} else if (highRank === 'Pair') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'hidraw',\r\n\t\t\traiseChange: 0.5,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t} else if (highRank === 'No Pair') {\r\n\t\treturn {\r\n\t\t\tcallLimit: 'meddraw',\r\n\t\t\traiseChange: 0.2,\r\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/* \r\nA function to determine Ai behavior based on the flop\r\nand its results. \r\n*/\r\nconst createPreFlopDeterminant = (highCard, lowCard, suited, straightGap) => {\r\n\tif (highCard === lowCard) {\r\n\t\tswitch (highCard) {\r\n\t\t\tcase (highCard > 8): {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\t\traiseChance: 0.9,\r\n\t\t\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw', 'strong'], // randomly determine bet based on this\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcase (highCard > 5): {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcallLimit: 'aggro',\r\n\t\t\t\t\traiseChance: 0.75, // if Math.random() is < than this, select a random raiseTarget \r\n\t\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw'],\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcase (highCard < 5):\r\n\t\t\tdefault: {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcallLimit: 'aggro',\r\n\t\t\t\t\traiseChance: 0.5,\r\n\t\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw'],\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (highCard > 9 && lowCard > 9) {\r\n\t\t// two high cards\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\traiseChance: 1,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\traiseChance: 0.75,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (highCard > 8 && lowCard > 6) {\r\n\t\t// one high card\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\traiseChance: 0.65,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'beware',\r\n\t\t\t\traiseChance: 0.45,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (highCard > 8 && lowCard < 6) {\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'major',\r\n\t\t\t\traiseChance: 0.45,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw'],\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'aggro',\r\n\t\t\t\traiseChance: 0.35,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw'],\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (highCard > 5 && lowCard > 3) {\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'strong',\r\n\t\t\t\traiseChance: 0.1,\r\n\t\t\t\traiseRange: ['insignificant', 'lowdraw'],\r\n\t\t\t}\r\n\t\t} else if (straightGap) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'aggro',\r\n\t\t\t\traiseChance: 0,\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'strong',\r\n\t\t\t\traiseChance: 0,\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tif (suited) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'strong',\r\n\t\t\t\traiseChance: 0.1,\r\n\t\t\t\traiseRange: ['insignificant'],\r\n\t\t\t}\r\n\t\t} else if (straightGap) {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'strong',\r\n\t\t\t\traiseChance: 0,\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcallLimit: 'insignificant',\r\n\t\t\t\traiseChance: 0,\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/* \r\nA function to group stakes into terms for betting.\r\n*/\r\nconst groupStakes = (percentage) => {\r\n\tswitch (true) {\r\n\t\tcase (percentage > 75):\r\n\t\t\treturn 'beware'\r\n\t\tcase (percentage > 40):\r\n\t\t\treturn 'aggro'\r\n\t\tcase (percentage > 35):\r\n\t\t\treturn 'major'\r\n\t\tcase (percentage > 25):\r\n\t\t\treturn 'strong'\r\n\t\tcase (percentage > 15):\r\n\t\t\treturn 'hidraw'\r\n\t\tcase (percentage > 10):\r\n\t\t\treturn 'meddraw'\r\n\t\tcase (percentage > 3):\r\n\t\t\treturn 'lowdraw'\r\n\t\tcase (percentage >= 1):\r\n\t\t\treturn 'insignificant'\r\n\t\tcase (percentage < 1):\r\n\t\tdefault:\r\n\t\t\treturn 'blind'\r\n\t}\r\n}\r\n\r\n/* \r\nThis function determines the amount an Ai\r\nwill bet based on the betting hierarchy value.\r\n*/\r\nconst chooseBetProportion = (stakes) => {\r\n\tif (stakes === 'blind') {\r\n\t\treturn Math.random() * (0.1 - 0) + 0\r\n\t} else if (stakes === 'insignificant') {\r\n\t\treturn Math.random() * (0.03 - 0.01) + 0.01\r\n\t} else if (stakes === 'lowdraw') {\r\n\t\treturn Math.random() * (0.10 - 0.03) + 0.03\r\n\t} else if (stakes === 'meddraw') {\r\n\t\treturn Math.random() * (0.15 - 0.10) + 0.10\r\n\t} else if (stakes === 'hidraw') {\r\n\t\treturn Math.random() * (0.25 - 0.15) + 0.15\r\n\t} else if (stakes === 'strong') {\r\n\t\treturn Math.random() * (0.35 - 0.25) + 0.25\r\n\t} else if (stakes === 'major') {\r\n\t\treturn Math.random() * (0.40 - 0.35) + 0.35\r\n\t} else if (stakes === 'aggro') {\r\n\t\treturn Math.random() * (0.75 - 0.40) + 0.40\r\n\t} else if (stakes === 'beware') {\r\n\t\treturn Math.random() * (1 - 0.75) + 0.75\r\n\t}\r\n}\r\n\r\n/* \r\nA list to set the degree of an Ai bet.\r\n*/\r\nconst betting_hierarchy = {\r\n\tblind: 0,\r\n\tinsignificant: 1,\r\n\tlowdraw: 2,\r\n\tmeddraw: 3,\r\n\thidraw: 4,\r\n\tstrong: 5,\r\n\tmajor: 6,\r\n\taggro: 7,\r\n\tbeware: 8,\r\n}\r\n\r\nconst willRaise = (chance) => {\r\n\treturn Math.random() < chance\r\n}\r\n\r\nconst makeHistogram = (hand) => {\r\n\tconst histogram = hand.reduce((acc, cur) => {\r\n\t\tacc.frequencyHistogram[cur.cardFace] = (acc.frequencyHistogram[cur.cardFace] || 0) + 1;\r\n\t\tacc.suitHistogram[cur.suit] = (acc.suitHistogram[cur.suit] || 0) + 1;\r\n\t\treturn acc\r\n\t}, { frequencyHistogram: {}, suitHistogram: {} })\r\n\treturn histogram\r\n}\r\n\r\nexport { aiHandler };\r\n\r\n"]},"metadata":{},"sourceType":"module"}