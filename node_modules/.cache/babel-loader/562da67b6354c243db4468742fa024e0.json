{"ast":null,"code":"import\"core-js/modules/es.symbol\";import\"core-js/modules/es.symbol.description\";import\"core-js/modules/es.symbol.async-iterator\";import\"core-js/modules/es.symbol.has-instance\";import\"core-js/modules/es.symbol.is-concat-spreadable\";import\"core-js/modules/es.symbol.iterator\";import\"core-js/modules/es.symbol.match\";import\"core-js/modules/es.symbol.replace\";import\"core-js/modules/es.symbol.search\";import\"core-js/modules/es.symbol.species\";import\"core-js/modules/es.symbol.split\";import\"core-js/modules/es.symbol.to-primitive\";import\"core-js/modules/es.symbol.to-string-tag\";import\"core-js/modules/es.symbol.unscopables\";import\"core-js/modules/es.array.concat\";import\"core-js/modules/es.array.copy-within\";import\"core-js/modules/es.array.fill\";import\"core-js/modules/es.array.filter\";import\"core-js/modules/es.array.find\";import\"core-js/modules/es.array.find-index\";import\"core-js/modules/es.array.flat\";import\"core-js/modules/es.array.flat-map\";import\"core-js/modules/es.array.from\";import\"core-js/modules/es.array.includes\";import\"core-js/modules/es.array.index-of\";import\"core-js/modules/es.array.iterator\";import\"core-js/modules/es.array.join\";import\"core-js/modules/es.array.last-index-of\";import\"core-js/modules/es.array.map\";import\"core-js/modules/es.array.of\";import\"core-js/modules/es.array.reduce\";import\"core-js/modules/es.array.reduce-right\";import\"core-js/modules/es.array.slice\";import\"core-js/modules/es.array.sort\";import\"core-js/modules/es.array.species\";import\"core-js/modules/es.array.splice\";import\"core-js/modules/es.array.unscopables.flat\";import\"core-js/modules/es.array.unscopables.flat-map\";import\"core-js/modules/es.date.to-primitive\";import\"core-js/modules/es.function.has-instance\";import\"core-js/modules/es.function.name\";import\"core-js/modules/es.json.to-string-tag\";import\"core-js/modules/es.map\";import\"core-js/modules/es.math.acosh\";import\"core-js/modules/es.math.asinh\";import\"core-js/modules/es.math.atanh\";import\"core-js/modules/es.math.cbrt\";import\"core-js/modules/es.math.clz32\";import\"core-js/modules/es.math.cosh\";import\"core-js/modules/es.math.expm1\";import\"core-js/modules/es.math.fround\";import\"core-js/modules/es.math.hypot\";import\"core-js/modules/es.math.imul\";import\"core-js/modules/es.math.log10\";import\"core-js/modules/es.math.log1p\";import\"core-js/modules/es.math.log2\";import\"core-js/modules/es.math.sign\";import\"core-js/modules/es.math.sinh\";import\"core-js/modules/es.math.tanh\";import\"core-js/modules/es.math.to-string-tag\";import\"core-js/modules/es.math.trunc\";import\"core-js/modules/es.number.epsilon\";import\"core-js/modules/es.number.is-finite\";import\"core-js/modules/es.number.is-integer\";import\"core-js/modules/es.number.is-nan\";import\"core-js/modules/es.number.is-safe-integer\";import\"core-js/modules/es.number.max-safe-integer\";import\"core-js/modules/es.number.min-safe-integer\";import\"core-js/modules/es.number.parse-float\";import\"core-js/modules/es.number.parse-int\";import\"core-js/modules/es.number.to-fixed\";import\"core-js/modules/es.object.assign\";import\"core-js/modules/es.object.define-getter\";import\"core-js/modules/es.object.define-setter\";import\"core-js/modules/es.object.entries\";import\"core-js/modules/es.object.freeze\";import\"core-js/modules/es.object.from-entries\";import\"core-js/modules/es.object.get-own-property-descriptor\";import\"core-js/modules/es.object.get-own-property-descriptors\";import\"core-js/modules/es.object.get-own-property-names\";import\"core-js/modules/es.object.get-prototype-of\";import\"core-js/modules/es.object.is\";import\"core-js/modules/es.object.is-extensible\";import\"core-js/modules/es.object.is-frozen\";import\"core-js/modules/es.object.is-sealed\";import\"core-js/modules/es.object.keys\";import\"core-js/modules/es.object.lookup-getter\";import\"core-js/modules/es.object.lookup-setter\";import\"core-js/modules/es.object.prevent-extensions\";import\"core-js/modules/es.object.seal\";import\"core-js/modules/es.object.to-string\";import\"core-js/modules/es.object.values\";import\"core-js/modules/es.promise\";import\"core-js/modules/es.promise.finally\";import\"core-js/modules/es.reflect.apply\";import\"core-js/modules/es.reflect.construct\";import\"core-js/modules/es.reflect.define-property\";import\"core-js/modules/es.reflect.delete-property\";import\"core-js/modules/es.reflect.get\";import\"core-js/modules/es.reflect.get-own-property-descriptor\";import\"core-js/modules/es.reflect.get-prototype-of\";import\"core-js/modules/es.reflect.has\";import\"core-js/modules/es.reflect.is-extensible\";import\"core-js/modules/es.reflect.own-keys\";import\"core-js/modules/es.reflect.prevent-extensions\";import\"core-js/modules/es.reflect.set\";import\"core-js/modules/es.reflect.set-prototype-of\";import\"core-js/modules/es.regexp.exec\";import\"core-js/modules/es.regexp.flags\";import\"core-js/modules/es.regexp.to-string\";import\"core-js/modules/es.set\";import\"core-js/modules/es.string.code-point-at\";import\"core-js/modules/es.string.ends-with\";import\"core-js/modules/es.string.from-code-point\";import\"core-js/modules/es.string.includes\";import\"core-js/modules/es.string.iterator\";import\"core-js/modules/es.string.match\";import\"core-js/modules/es.string.pad-end\";import\"core-js/modules/es.string.pad-start\";import\"core-js/modules/es.string.raw\";import\"core-js/modules/es.string.repeat\";import\"core-js/modules/es.string.replace\";import\"core-js/modules/es.string.search\";import\"core-js/modules/es.string.split\";import\"core-js/modules/es.string.starts-with\";import\"core-js/modules/es.string.trim\";import\"core-js/modules/es.string.trim-end\";import\"core-js/modules/es.string.trim-start\";import\"core-js/modules/es.string.anchor\";import\"core-js/modules/es.string.big\";import\"core-js/modules/es.string.blink\";import\"core-js/modules/es.string.bold\";import\"core-js/modules/es.string.fixed\";import\"core-js/modules/es.string.fontcolor\";import\"core-js/modules/es.string.fontsize\";import\"core-js/modules/es.string.italics\";import\"core-js/modules/es.string.link\";import\"core-js/modules/es.string.small\";import\"core-js/modules/es.string.strike\";import\"core-js/modules/es.string.sub\";import\"core-js/modules/es.string.sup\";import\"core-js/modules/es.typed-array.float32-array\";import\"core-js/modules/es.typed-array.float64-array\";import\"core-js/modules/es.typed-array.int8-array\";import\"core-js/modules/es.typed-array.int16-array\";import\"core-js/modules/es.typed-array.int32-array\";import\"core-js/modules/es.typed-array.uint8-array\";import\"core-js/modules/es.typed-array.uint8-clamped-array\";import\"core-js/modules/es.typed-array.uint16-array\";import\"core-js/modules/es.typed-array.uint32-array\";import\"core-js/modules/es.typed-array.copy-within\";import\"core-js/modules/es.typed-array.every\";import\"core-js/modules/es.typed-array.fill\";import\"core-js/modules/es.typed-array.filter\";import\"core-js/modules/es.typed-array.find\";import\"core-js/modules/es.typed-array.find-index\";import\"core-js/modules/es.typed-array.for-each\";import\"core-js/modules/es.typed-array.from\";import\"core-js/modules/es.typed-array.includes\";import\"core-js/modules/es.typed-array.index-of\";import\"core-js/modules/es.typed-array.iterator\";import\"core-js/modules/es.typed-array.join\";import\"core-js/modules/es.typed-array.last-index-of\";import\"core-js/modules/es.typed-array.map\";import\"core-js/modules/es.typed-array.of\";import\"core-js/modules/es.typed-array.reduce\";import\"core-js/modules/es.typed-array.reduce-right\";import\"core-js/modules/es.typed-array.reverse\";import\"core-js/modules/es.typed-array.set\";import\"core-js/modules/es.typed-array.slice\";import\"core-js/modules/es.typed-array.some\";import\"core-js/modules/es.typed-array.sort\";import\"core-js/modules/es.typed-array.subarray\";import\"core-js/modules/es.typed-array.to-locale-string\";import\"core-js/modules/es.typed-array.to-string\";import\"core-js/modules/es.weak-map\";import\"core-js/modules/es.weak-set\";import\"core-js/modules/web.dom-collections.for-each\";import\"core-js/modules/web.dom-collections.iterator\";import\"core-js/modules/web.immediate\";import\"core-js/modules/web.queue-microtask\";import\"core-js/modules/web.url\";import\"core-js/modules/web.url.to-json\";import\"core-js/modules/web.url-search-params\";import _regeneratorRuntime from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _classCallCheck from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import{cloneDeep}from'lodash';import'raf/polyfill';import React,{Component}from'react';import{Dropdown,DropdownButton}from'react-bootstrap';import{Link}from\"react-router-dom\";import\"regenerator-runtime/runtime\";import'../../App.css';import'../../Game.css';import{aiHandler as aiHandlerUtil}from'../../services/aiService.js';import{anteUpBlinds,calculateBlindIndices,calculateMinBet,manageBet,managePlayerFold}from'../../services/betService.js';import{dealPlayerCards,makeDeckOfCards,shuffleCards}from'../../services/cardsService.js';import{checkWin,makeTable,startNextRound}from'../../services/playersService.js';import{makeActionButtonText,makeActionMenu,makeNetPlayerEarnings,makeShowdownMessages}from'../../services/uiService.js';import Card from\"../cards/Card\";import SpinnerLoading from'../helpers/SpinnerLoading';import Player from\"../players/Player\";import Dashboard from'./Dashboard';import PlayerWin from'./PlayerWin';/**\r\n * Game component that manages all aspects of the Poker Game\r\n * and allows user to compete with AI Agents.\r\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Game=/*#__PURE__*/function(_Component){_inherits(Game,_Component);var _super=_createSuper(Game);function Game(){var _this;_classCallCheck(this,Game);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={loading:true,winnerFound:null,winner:null,players:null,numPlayersActive:null,numPlayersFolded:null,numPlayersAllIn:null,activePlayerIndex:null,dealerIndex:null,blindIndex:null,deck:null,communityCards:[],pot:null,highBet:null,betInputValue:null,sidePots:[],minBet:20,phase:'loading',playerHierarchy:[],showDownMessages:[],playActionMessages:[],playerAnimationSwitchboard:{0:{isAnimating:false,content:null},1:{isAnimating:false,content:null},2:{isAnimating:false,content:null},3:{isAnimating:false,content:null},4:{isAnimating:false,content:null},5:{isAnimating:false,content:null}}};_this.cardAnimationDelay=0;_this.executeGame=function(){// deal player cards\nvar newState=dealPlayerCards(cloneDeep(_this.state));// update state after each action\n_this.setState(newState,function(){if(_this.state.players[_this.state.activePlayerIndex].robot&&_this.state.phase!=='showdown'){setTimeout(function(){_this.aiHandler();},1200);}});};_this.aiHandler=function(){var _this$state=_this.state,playerAnimationSwitchboard=_this$state.playerAnimationSwitchboard,appState=_objectWithoutProperties(_this$state,[\"playerAnimationSwitchboard\"]);// change state according to AI decision/action\nvar newState=aiHandlerUtil(cloneDeep(appState),_this.changePlayerAnimationState);// update state after action\n_this.setState(_objectSpread(_objectSpread({},newState),{},{betInputValue:newState.minBet}),function(){if(_this.state.players[_this.state.activePlayerIndex].robot&&_this.state.phase!=='showdown'){setTimeout(function(){_this.aiHandler();},1200);}});};_this.manageBetChange=function(val,min,max){if(val==='')val=min;if(val>max)val=max;// handle player bet change\n_this.setState({betInputValue:parseInt(val,10)});};_this.manageBetSubmit=function(bet,min,max){var _this$state2=_this.state,playerAnimationSwitchboard=_this$state2.playerAnimationSwitchboard,appState=_objectWithoutProperties(_this$state2,[\"playerAnimationSwitchboard\"]);// get active player\nvar activePlayerIndex=appState.activePlayerIndex;// execute player action \n_this.changePlayerAnimationState(activePlayerIndex,\"\".concat(makeActionButtonText(_this.state.highBet,_this.state.betInputValue,_this.state.players[_this.state.activePlayerIndex]),\" \").concat(bet>_this.state.players[_this.state.activePlayerIndex].bet?bet:\"\"));;var newState=manageBet(cloneDeep(appState),parseInt(bet,10),parseInt(min,10),parseInt(max,10));// continue to next player if hand is not over\n_this.setState(newState,function(){if(_this.state.players[_this.state.activePlayerIndex].robot&&_this.state.phase!=='showdown'){setTimeout(function(){_this.aiHandler();},1200);}});};_this.manageSliderInputChange=function(val){_this.setState({betInputValue:val[0]});};_this.managePlayerFold=function(){var _this$state3=_this.state,playerAnimationSwitchboard=_this$state3.playerAnimationSwitchboard,appState=_objectWithoutProperties(_this$state3,[\"playerAnimationSwitchboard\"]);// player fold action\nvar newState=managePlayerFold(cloneDeep(appState));// continue to next player if hand is not over\n_this.setState(newState,function(){if(_this.state.players[_this.state.activePlayerIndex].robot&&_this.state.phase!=='showdown'){setTimeout(function(){_this.aiHandler();},1200);}});};_this.manageNextRound=function(){// remove cards from table\n_this.setState({clearCards:true});// start fresh round\nvar newState=startNextRound(cloneDeep(_this.state));var winner;// if there is a winner the game is over\nif(checkWin(newState.players)){var players=newState.players;players.forEach(function(element){if(element.chips>0)winner=element;});_this.setState({winner:winner});_this.setState({winnerFound:true});return;}// continue to next round if hand is over\n_this.setState(newState,function(){if(_this.state.players[_this.state.activePlayerIndex].robot&&_this.state.phase!=='showdown'){setTimeout(function(){return _this.aiHandler();},1200);}});};_this.changePlayerAnimationState=function(index,content){var newAnimationSwitchboard=Object.assign({},_this.state.playerAnimationSwitchboard,_defineProperty({},index,{isAnimating:true,content:content}));_this.setState({playerAnimationSwitchboard:newAnimationSwitchboard});};_this.popPlayerAnimationState=function(index){var persistContent=_this.state.playerAnimationSwitchboard[index].content;var newAnimationSwitchboard=Object.assign({},_this.state.playerAnimationSwitchboard,_defineProperty({},index,{isAnimating:false,content:persistContent}));_this.setState({playerAnimationSwitchboard:newAnimationSwitchboard});};_this.renderTable=function(){// update table features according to current game state\nvar _this$state4=_this.state,players=_this$state4.players,activePlayerIndex=_this$state4.activePlayerIndex,dealerIndex=_this$state4.dealerIndex,clearCards=_this$state4.clearCards,phase=_this$state4.phase,playerAnimationSwitchboard=_this$state4.playerAnimationSwitchboard;// changes turn of player each hand\nvar reversedPlayers=players.reduce(function(result,player,index){var isActive=index===activePlayerIndex;var hasDealerChip=index===dealerIndex;// shift player in array to allow move dealer chip to each player counter clock-wise\nresult.unshift(/*#__PURE__*/_jsx(Player,{arrayIndex:index,isActive:isActive,hasDealerChip:hasDealerChip,player:player,clearCards:clearCards,phase:phase,playerAnimationSwitchboard:playerAnimationSwitchboard,endTransition:_this.popPlayerAnimationState},index));return result;},[]);return reversedPlayers.map(function(component){return component;});};_this.renderPlayerActionButtons=function(){var _this$state5=_this.state,highBet=_this$state5.highBet,players=_this$state5.players,activePlayerIndex=_this$state5.activePlayerIndex,phase=_this$state5.phase,betInputValue=_this$state5.betInputValue;// calculate min bet user has to place\nvar min=calculateMinBet(highBet,players[activePlayerIndex].chips,players[activePlayerIndex].bet);// calculate max bet user can place\nvar max=players[activePlayerIndex].chips+players[activePlayerIndex].bet;// render different buttons/text according to user input \nreturn players[activePlayerIndex].robot||phase==='showdown'?null:/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"button\",{className:\"fold-button\",onClick:function onClick(){return _this.managePlayerFold();},children:\"Fold\"}),/*#__PURE__*/_jsx(\"button\",{className:\"bet-button\",onClick:function onClick(){return _this.manageBetSubmit(betInputValue,min,max);},children:makeActionButtonText(highBet,betInputValue,players[activePlayerIndex])})]});};_this.renderTableCommunityCards=function(purgeAnimation){return _this.state.communityCards.map(function(card,index){var cardData=_objectSpread({},card);if(purgeAnimation){cardData.animationDelay=0;}// render card according to its value and suit\nreturn/*#__PURE__*/_jsx(Card,{cardData:cardData},index);});};_this.renderPlayerShowdown=function(){return/*#__PURE__*/_jsxs(\"div\",{className:\"showdown-div-wrapper\",children:[/*#__PURE__*/_jsx(\"h5\",{className:\"showdown-div-title\",children:\"Hand Complete!\"}),/*#__PURE__*/_jsx(\"div\",{className:\"showdown-div-messages\",children:makeShowdownMessages(_this.state.showDownMessages)}),/*#__PURE__*/_jsx(\"h5\",{className:\"showdown-div-community-card-label\",children:\"Community Cards\"}),/*#__PURE__*/_jsx(\"div\",{className:\"showdown-div-community-cards\",children:_this.renderTableCommunityCards(true)}),/*#__PURE__*/_jsx(\"button\",{className:\"showdown-nextRound-button\",onClick:function onClick(){return _this.manageNextRound();},children:\" Next Hand \"}),_this.renderBestHands()]});};_this.renderBestHands=function(){// get best hands from current state of game\nvar playerHierarchy=_this.state.playerHierarchy;return playerHierarchy.map(function(rankSnapshot){var tie=Array.isArray(rankSnapshot);return tie?_this.renderHandSplit(rankSnapshot):_this.renderHandWinner(rankSnapshot);});};_this.renderHandSplit=function(rankSnapshot){return rankSnapshot.map(function(player){return _this.renderHandWinner(player);});};_this.makeCards=function(cards){return cards.map(function(card,index){var cardData=_objectSpread(_objectSpread({},card),{},{animationDelay:0});return/*#__PURE__*/_jsx(Card,{cardData:cardData},index);});};_this.renderHandWinner=function(player){// get best hand and hand ranking from winning player\nvar name=player.name,bestHand=player.bestHand,handRank=player.handRank;// get info of winning player\nvar playerStateData=_this.state.players.find(function(statePlayer){return statePlayer.name===name;});// display winning player information\nreturn/*#__PURE__*/_jsxs(\"table\",{class:\"showdown-table content-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Player\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Private Cards\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Best Hand\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Hand Ranking\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Win/Loss\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:name}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"div\",{class:\"showdown-player-privateCards\",children:/*#__PURE__*/_jsx(\"div\",{class:\"showdown-player-cards\",children:_this.makeCards(playerStateData.cards)})})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"div\",{className:\"showdown-player-besthand-div\",children:/*#__PURE__*/_jsx(\"div\",{className:\"showdown-player-besthand-cards\",style:{alignItems:'center'},children:bestHand.map(function(card,index){// reset animation delay for next round\nvar cardData=_objectSpread(_objectSpread({},card),{},{animationDelay:0});return/*#__PURE__*/_jsx(Card,{cardData:cardData},index);})})})}),/*#__PURE__*/_jsx(\"td\",{children:handRank}),/*#__PURE__*/_jsx(\"td\",{children:makeNetPlayerEarnings(playerStateData.roundEndChips,playerStateData.roundStartChips)})]})})]});};_this.renderGame=function(){var _this$state6=_this.state,highBet=_this$state6.highBet,players=_this$state6.players,activePlayerIndex=_this$state6.activePlayerIndex,phase=_this$state6.phase;return/*#__PURE__*/_jsxs(\"div\",{className:\"app-background\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"title-text\",style:{maxWidth:\"400px\"}}),/*#__PURE__*/_jsxs(\"div\",{className:\"poker-table-div\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"title-logo\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"./assets/logo.svg\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"No-Limit Texas Hold'em Poker\"}),/*#__PURE__*/_jsxs(DropdownButton,{id:\"dropdown-basic-button\",title:\"\",children:[/*#__PURE__*/_jsxs(Dropdown.Item,{href:\"#\",children:[\" \",/*#__PURE__*/_jsx(Link,{to:\"/dashboard\",children:\"Return to Dashboard\"})]}),/*#__PURE__*/_jsxs(Dropdown.Item,{href:\"#\",children:[\" \",/*#__PURE__*/_jsx(Link,{to:\"/login\",children:\"Logout\"})]})]})]}),/*#__PURE__*/_jsx(\"img\",{className:\"poker-table-image\",src:\"./assets/table.svg\",alt:\"Poker Table\"}),_this.renderTable(),/*#__PURE__*/_jsx(\"div\",{className:\"community-hand-div\",children:_this.renderTableCommunityCards()}),/*#__PURE__*/_jsxs(\"div\",{className:\"pot-div\",children:[/*#__PURE__*/_jsx(\"img\",{src:'./assets/pot.svg',alt:\"Pot Value\"}),/*#__PURE__*/_jsxs(\"h5\",{children:[\" \",\"\".concat(_this.state.pot),\" \"]})]})]}),_this.state.phase==='showdown'&&_this.renderPlayerShowdown(),/*#__PURE__*/_jsxs(\"div\",{className:\"game-bar\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"game-buttons\",children:_this.renderPlayerActionButtons()}),/*#__PURE__*/_jsx(\"div\",{className:\"slider\",children:!_this.state.loading&&makeActionMenu(highBet,players,activePlayerIndex,phase,_this.manageBetChange)})]})]});};return _this;}_createClass(Game,[{key:\"componentDidMount\",value:/*\r\n   On component load create game with table, players, etc.\r\n  */function(){var _componentDidMount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _this2=this;var players,dealerIndex,blindIndicies,playersBoughtIn,imageLoaderRequest;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return makeTable(Dashboard.username);case 2:players=_context.sent;// randomly assign dealer chip\ndealerIndex=Math.floor(Math.random()*Math.floor(players.length));// assign blinds to respective players\nblindIndicies=calculateBlindIndices(dealerIndex,players.length);playersBoughtIn=anteUpBlinds(players,blindIndicies,this.state.minBet);imageLoaderRequest=new XMLHttpRequest();// wait for table to load\nimageLoaderRequest.addEventListener(\"load\",function(e){console.log(\"\".concat(e.type));console.log(e);console.log(\"Table Loaded!\");_this2.setState({loading:false});});imageLoaderRequest.addEventListener(\"loadstart\",function(e){console.log(\"\".concat(e.type));console.log(e);});imageLoaderRequest.addEventListener(\"loadend\",function(e){console.log(\"\".concat(e.type));console.log(e);});imageLoaderRequest.addEventListener(\"progress\",function(e){console.log(\"\".concat(e.type));console.log(e);});imageLoaderRequest.addEventListener(\"abort\",function(e){console.log(\"\".concat(e.type));console.log(e);});imageLoaderRequest.addEventListener(\"error\",function(e){console.log(\"\".concat(e.type));console.log(e);});imageLoaderRequest.open(\"GET\",\"./assets/table.svg\");imageLoaderRequest.send();// set initial game state\nthis.setState(function(prevState){return{players:playersBoughtIn,numPlayersActive:players.length,numPlayersFolded:0,numPlayersAllIn:0,activePlayerIndex:dealerIndex,dealerIndex:dealerIndex,blindIndex:{big:blindIndicies.bigBlindIndex,small:blindIndicies.smallBlindIndex},deck:shuffleCards(makeDeckOfCards()),pot:0,highBet:prevState.minBet,betInputValue:prevState.minBet,phase:'initialDeal'};});// game executes until there is a winner\nthis.executeGame();case 17:case\"end\":return _context.stop();}}},_callee,this);}));function componentDidMount(){return _componentDidMount.apply(this,arguments);}return componentDidMount;}()/*\r\n   Game execution which iterates through each phase of the \r\n   Poker game repeatedly until there is a winner at the table\r\n  */},{key:\"render\",value:/*\r\n   Render Poker Game until there is a winner. When that occurs \r\n   render \"Player wins\" page.\r\n  */function render(){return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(\"div\",{className:\"poker-table-wrapper\",children:this.state.loading?/*#__PURE__*/_jsx(SpinnerLoading,{}):this.state.winnerFound?/*#__PURE__*/_jsx(PlayerWin,{winner:this.state.winner}):this.renderGame()// to test Player Wins page\n// <PlayerWin winner={this.state.winner} difficulty=\"\"/>\n})});}}]);return Game;}(Component);export default Game;","map":{"version":3,"sources":["C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/src/components/interfaces/Game.js"],"names":["cloneDeep","React","Component","Dropdown","DropdownButton","Link","aiHandler","aiHandlerUtil","anteUpBlinds","calculateBlindIndices","calculateMinBet","manageBet","managePlayerFold","dealPlayerCards","makeDeckOfCards","shuffleCards","checkWin","makeTable","startNextRound","makeActionButtonText","makeActionMenu","makeNetPlayerEarnings","makeShowdownMessages","Card","SpinnerLoading","Player","Dashboard","PlayerWin","Game","state","loading","winnerFound","winner","players","numPlayersActive","numPlayersFolded","numPlayersAllIn","activePlayerIndex","dealerIndex","blindIndex","deck","communityCards","pot","highBet","betInputValue","sidePots","minBet","phase","playerHierarchy","showDownMessages","playActionMessages","playerAnimationSwitchboard","isAnimating","content","cardAnimationDelay","executeGame","newState","setState","robot","setTimeout","appState","changePlayerAnimationState","manageBetChange","val","min","max","parseInt","manageBetSubmit","bet","manageSliderInputChange","manageNextRound","clearCards","forEach","element","chips","index","newAnimationSwitchboard","Object","assign","popPlayerAnimationState","persistContent","renderTable","reversedPlayers","reduce","result","player","isActive","hasDealerChip","unshift","map","component","renderPlayerActionButtons","renderTableCommunityCards","purgeAnimation","card","cardData","animationDelay","renderPlayerShowdown","renderBestHands","rankSnapshot","tie","Array","isArray","renderHandSplit","renderHandWinner","makeCards","cards","name","bestHand","handRank","playerStateData","find","statePlayer","alignItems","roundEndChips","roundStartChips","renderGame","maxWidth","username","Math","floor","random","length","blindIndicies","playersBoughtIn","imageLoaderRequest","XMLHttpRequest","addEventListener","e","console","log","type","open","send","prevState","big","bigBlindIndex","small","smallBlindIndex"],"mappings":"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","sourcesContent":["import 'core-js/es/array';\r\nimport 'core-js/es/map';\r\nimport 'core-js/es/set';\r\nimport \"core-js/stable\";\r\nimport { cloneDeep } from 'lodash';\r\nimport 'raf/polyfill';\r\nimport React, { Component } from 'react';\r\nimport { Dropdown, DropdownButton } from 'react-bootstrap';\r\nimport { Link } from \"react-router-dom\";\r\nimport \"regenerator-runtime/runtime\";\r\nimport '../../App.css';\r\nimport '../../Game.css';\r\nimport {\r\n  aiHandler as aiHandlerUtil\r\n} from '../../services/aiService.js';\r\nimport {\r\n  anteUpBlinds, calculateBlindIndices,\r\n\r\n  calculateMinBet,\r\n  manageBet,\r\n  managePlayerFold\r\n} from '../../services/betService.js';\r\nimport {\r\n  dealPlayerCards, makeDeckOfCards,\r\n  shuffleCards\r\n} from '../../services/cardsService.js';\r\nimport {\r\n  checkWin, makeTable, startNextRound\r\n} from '../../services/playersService.js';\r\nimport {\r\n  makeActionButtonText,\r\n\r\n  makeActionMenu, makeNetPlayerEarnings, makeShowdownMessages\r\n} from '../../services/uiService.js';\r\nimport Card from \"../cards/Card\";\r\nimport SpinnerLoading from '../helpers/SpinnerLoading';\r\nimport Player from \"../players/Player\";\r\nimport Dashboard from './Dashboard';\r\nimport PlayerWin from './PlayerWin';\r\n\r\n/**\r\n * Game component that manages all aspects of the Poker Game\r\n * and allows user to compete with AI Agents.\r\n */\r\nclass Game extends Component {\r\n  state = {\r\n    loading: true,\r\n    winnerFound: null,\r\n    winner: null,\r\n    players: null,\r\n    numPlayersActive: null,\r\n    numPlayersFolded: null,\r\n    numPlayersAllIn: null,\r\n    activePlayerIndex: null,\r\n    dealerIndex: null,\r\n    blindIndex: null,\r\n    deck: null,\r\n    communityCards: [],\r\n    pot: null,\r\n    highBet: null,\r\n    betInputValue: null,\r\n    sidePots: [],\r\n    minBet: 20,\r\n    phase: 'loading',\r\n    playerHierarchy: [],\r\n    showDownMessages: [],\r\n    playActionMessages: [],\r\n    playerAnimationSwitchboard: {\r\n      0: { isAnimating: false, content: null },\r\n      1: { isAnimating: false, content: null },\r\n      2: { isAnimating: false, content: null },\r\n      3: { isAnimating: false, content: null },\r\n      4: { isAnimating: false, content: null },\r\n      5: { isAnimating: false, content: null }\r\n    }\r\n  }\r\n\r\n  // animation delay for cards which gives real dealer effect\r\n  cardAnimationDelay = 0;\r\n\r\n  /*\r\n   On component load create game with table, players, etc.\r\n  */\r\n  async componentDidMount() {\r\n    const players = await makeTable(Dashboard.username);\r\n    // randomly assign dealer chip\r\n    const dealerIndex = Math.floor(Math.random() * Math.floor(players.length));\r\n\r\n    // assign blinds to respective players\r\n    const blindIndicies = calculateBlindIndices(dealerIndex, players.length);\r\n    const playersBoughtIn = anteUpBlinds(players, blindIndicies, this.state.minBet);\r\n\r\n    const imageLoaderRequest = new XMLHttpRequest();\r\n\r\n    // wait for table to load\r\n    imageLoaderRequest.addEventListener(\"load\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n      console.log(\"Table Loaded!\");\r\n      this.setState({\r\n        loading: false,\r\n      })\r\n    });\r\n\r\n\r\n    imageLoaderRequest.addEventListener(\"loadstart\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.addEventListener(\"loadend\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.addEventListener(\"progress\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.addEventListener(\"abort\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.addEventListener(\"error\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.open(\"GET\", \"./assets/table.svg\");\r\n    imageLoaderRequest.send();\r\n\r\n    // set initial game state\r\n    this.setState(prevState => ({\r\n      players: playersBoughtIn,\r\n      numPlayersActive: players.length,\r\n      numPlayersFolded: 0,\r\n      numPlayersAllIn: 0,\r\n      activePlayerIndex: dealerIndex,\r\n      dealerIndex,\r\n      blindIndex: {\r\n        big: blindIndicies.bigBlindIndex,\r\n        small: blindIndicies.smallBlindIndex,\r\n      },\r\n      deck: shuffleCards(makeDeckOfCards()),\r\n      pot: 0,\r\n      highBet: prevState.minBet,\r\n      betInputValue: prevState.minBet,\r\n      phase: 'initialDeal',\r\n    }))\r\n    // game executes until there is a winner\r\n    this.executeGame();\r\n  }\r\n\r\n  /*\r\n   Game execution which iterates through each phase of the \r\n   Poker game repeatedly until there is a winner at the table\r\n  */\r\n  executeGame = () => {\r\n    // deal player cards\r\n    const newState = dealPlayerCards(cloneDeep(this.state))\r\n    // update state after each action\r\n    this.setState(newState, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n          this.aiHandler()\r\n        }, 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handler for Artificial Intelligence Agents performs action\r\n   according to their in game decisions\r\n  */\r\n  aiHandler = () => {\r\n    const { playerAnimationSwitchboard, ...appState } = this.state;\r\n    // change state according to AI decision/action\r\n    const newState = aiHandlerUtil(cloneDeep(appState), this.changePlayerAnimationState)\r\n\r\n    // update state after action\r\n    this.setState({\r\n      ...newState,\r\n      betInputValue: newState.minBet\r\n    }, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n\r\n          this.aiHandler()\r\n        }, 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handle player bet change action\r\n  */\r\n  manageBetChange = (val, min, max) => {\r\n    if (val === '') val = min\r\n    if (val > max) val = max\r\n    // handle player bet change\r\n    this.setState({\r\n      betInputValue: parseInt(val, 10),\r\n    });\r\n  }\r\n\r\n  /*\r\n   Handle player bet submit action\r\n  */\r\n  manageBetSubmit = (bet, min, max) => {\r\n    const { playerAnimationSwitchboard, ...appState } = this.state;\r\n    // get active player\r\n    const { activePlayerIndex } = appState;\r\n    // execute player action \r\n    this.changePlayerAnimationState(activePlayerIndex, `${makeActionButtonText(this.state.highBet, this.state.betInputValue, this.state.players[this.state.activePlayerIndex])} ${(bet > this.state.players[this.state.activePlayerIndex].bet) ? (bet) : \"\"}`);;\r\n    const newState = manageBet(cloneDeep(appState), parseInt(bet, 10), parseInt(min, 10), parseInt(max, 10));\r\n\r\n    // continue to next player if hand is not over\r\n    this.setState(newState, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n\r\n          this.aiHandler()\r\n        }, 1200)\r\n      }\r\n    });\r\n  }\r\n\r\n  /*\r\n   Handle Raise Slider bar value change (by user)\r\n  */\r\n  manageSliderInputChange = (val) => {\r\n    this.setState({\r\n      betInputValue: val[0]\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handle Player fold action\r\n  */\r\n  managePlayerFold = () => {\r\n    const { playerAnimationSwitchboard, ...appState } = this.state\r\n    // player fold action\r\n    const newState = managePlayerFold(cloneDeep(appState));\r\n\r\n    // continue to next player if hand is not over\r\n    this.setState(newState, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n\r\n          this.aiHandler()\r\n        }, 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handle next game hand\r\n  */\r\n  manageNextRound = () => {\r\n    // remove cards from table\r\n    this.setState({ clearCards: true })\r\n    // start fresh round\r\n    const newState = startNextRound(cloneDeep(this.state))\r\n    var winner;\r\n    // if there is a winner the game is over\r\n    if (checkWin(newState.players)) {\r\n      const players = newState.players\r\n      players.forEach(element => {\r\n        if (element.chips > 0)\r\n          winner = element\r\n      });\r\n      this.setState({ winner: winner });\r\n      this.setState({ winnerFound: true })\r\n\r\n      return;\r\n    }\r\n    // continue to next round if hand is over\r\n    this.setState(newState, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => this.aiHandler(), 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handle player animation according to state of game\r\n  */\r\n  changePlayerAnimationState = (index, content) => {\r\n    const newAnimationSwitchboard = Object.assign(\r\n      {},\r\n      this.state.playerAnimationSwitchboard,\r\n      { [index]: { isAnimating: true, content } }\r\n    )\r\n    this.setState({ playerAnimationSwitchboard: newAnimationSwitchboard });\r\n  }\r\n\r\n  /*\r\n   Stop latest player animation \r\n  */\r\n  popPlayerAnimationState = (index) => {\r\n    const persistContent = this.state.playerAnimationSwitchboard[index].content;\r\n    const newAnimationSwitchboard = Object.assign(\r\n      {},\r\n      this.state.playerAnimationSwitchboard,\r\n      { [index]: { isAnimating: false, content: persistContent } }\r\n    )\r\n    this.setState({ playerAnimationSwitchboard: newAnimationSwitchboard });\r\n  }\r\n\r\n  /*\r\n   Render Poker Table with Players, cards, etc.\r\n  */\r\n  renderTable = () => {\r\n    // update table features according to current game state\r\n    const {\r\n      players,\r\n      activePlayerIndex,\r\n      dealerIndex,\r\n      clearCards,\r\n      phase,\r\n      playerAnimationSwitchboard\r\n    } = this.state;\r\n\r\n    // changes turn of player each hand\r\n    const reversedPlayers = players.reduce((result, player, index) => {\r\n\r\n      const isActive = (index === activePlayerIndex);\r\n      const hasDealerChip = (index === dealerIndex);\r\n\r\n\r\n      // shift player in array to allow move dealer chip to each player counter clock-wise\r\n      result.unshift(\r\n        <Player\r\n          key={index}\r\n          arrayIndex={index}\r\n          isActive={isActive}\r\n          hasDealerChip={hasDealerChip}\r\n          player={player}\r\n          clearCards={clearCards}\r\n          phase={phase}\r\n          playerAnimationSwitchboard={playerAnimationSwitchboard}\r\n          endTransition={this.popPlayerAnimationState}\r\n        />\r\n      )\r\n      return result\r\n    }, []);\r\n    return reversedPlayers.map(component => component);\r\n  }\r\n\r\n  /*\r\n   Render action buttons for user such as check/call/raise/allin and fold\r\n  */\r\n  renderPlayerActionButtons = () => {\r\n    const { highBet, players, activePlayerIndex, phase, betInputValue } = this.state\r\n    // calculate min bet user has to place\r\n    const min = calculateMinBet(highBet, players[activePlayerIndex].chips, players[activePlayerIndex].bet)\r\n    // calculate max bet user can place\r\n    const max = players[activePlayerIndex].chips + players[activePlayerIndex].bet\r\n\r\n    // render different buttons/text according to user input \r\n    return ((players[activePlayerIndex].robot) || (phase === 'showdown')) ? null : (\r\n      <React.Fragment>\r\n        <button className='fold-button' onClick={() => this.managePlayerFold()}>\r\n          Fold\r\n        </button>\r\n        <button className='bet-button' onClick={() => this.manageBetSubmit(betInputValue, min, max)}>\r\n          {makeActionButtonText(highBet, betInputValue, players[activePlayerIndex])}\r\n        </button>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  /*\r\n   Render community cards that dealer deals on flop, turn and river\r\n  */\r\n  renderTableCommunityCards = (purgeAnimation) => {\r\n    return this.state.communityCards.map((card, index) => {\r\n      let cardData = { ...card };\r\n      if (purgeAnimation) {\r\n        cardData.animationDelay = 0;\r\n      }\r\n      // render card according to its value and suit\r\n      return (\r\n        <Card key={index} cardData={cardData} />\r\n      );\r\n    });\r\n  }\r\n\r\n  /*\r\n   Render player showdown at end of each hand.\r\n   Compares players' hands and indicates winnings \r\n   (win/losses of each active player)\r\n  */\r\n  renderPlayerShowdown = () => {\r\n    return (\r\n      <div className='showdown-div-wrapper'>\r\n        <h5 className=\"showdown-div-title\">\r\n          Hand Complete!\r\n        </h5>\r\n        <div className=\"showdown-div-messages\">\r\n          {makeShowdownMessages(this.state.showDownMessages)}\r\n        </div>\r\n        <h5 className=\"showdown-div-community-card-label\">\r\n          Community Cards\r\n        </h5>\r\n        <div className='showdown-div-community-cards'>\r\n          {this.renderTableCommunityCards(true)}\r\n        </div>\r\n        <button className=\"showdown-nextRound-button\" onClick={() => this.manageNextRound()}> Next Hand </button>\r\n        { this.renderBestHands()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  /*\r\n   Render each active player's best hand\r\n   (considering player's private cards and \r\n   available community cards). Handles ties.\r\n  */\r\n  renderBestHands = () => {\r\n    // get best hands from current state of game\r\n    const { playerHierarchy } = this.state;\r\n\r\n    return playerHierarchy.map(rankSnapshot => {\r\n      const tie = Array.isArray(rankSnapshot);\r\n      return tie ? this.renderHandSplit(rankSnapshot) : this.renderHandWinner(rankSnapshot);\r\n    })\r\n  }\r\n\r\n  /*\r\n   Render pot split amongst winning players\r\n   when there is more than a single best hand.\r\n  */\r\n  renderHandSplit = (rankSnapshot) => {\r\n    return rankSnapshot.map(player => {\r\n      return this.renderHandWinner(player);\r\n    })\r\n  }\r\n\r\n  makeCards = (cards) => {\r\n    return cards.map((card, index) => {\r\n      const cardData = { ...card, animationDelay: 0 }\r\n      return <Card key={index} cardData={cardData} />\r\n    })\r\n  }\r\n\r\n  /*\r\n   Render player winning showdown. Displays best hand, \r\n   hand rankings and amount of chips won by player.\r\n  */\r\n  renderHandWinner = (player) => {\r\n    // get best hand and hand ranking from winning player\r\n    const { name, bestHand, handRank } = player;\r\n    // get info of winning player\r\n    const playerStateData = this.state.players.find(statePlayer => statePlayer.name === name);\r\n    // display winning player information\r\n    return (\r\n      <table class=\"showdown-table content-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Player</th>\r\n            <th>Private Cards</th>\r\n            <th>Best Hand</th>\r\n            <th>Hand Ranking</th>\r\n            <th>Win/Loss</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              {name}</td>\r\n            <td>\r\n              <div class=\"showdown-player-privateCards\">\r\n                <div class=\"showdown-player-cards\">\r\n                  {this.makeCards(playerStateData.cards)}\r\n                </div>\r\n              </div>\r\n            </td>\r\n            <td><div className=\"showdown-player-besthand-div\">\r\n              <div className='showdown-player-besthand-cards' style={{ alignItems: 'center' }}>\r\n                {\r\n                  bestHand.map((card, index) => {\r\n                    // reset animation delay for next round\r\n                    const cardData = { ...card, animationDelay: 0 }\r\n                    return <Card key={index} cardData={cardData} />\r\n                  })\r\n                }\r\n              </div>\r\n            </div>\r\n            </td>\r\n            <td>{handRank}</td>\r\n            <td>{makeNetPlayerEarnings(playerStateData.roundEndChips, playerStateData.roundStartChips)}</td>\r\n          </tr>\r\n\r\n        </tbody>\r\n      </table>\r\n\r\n\r\n\r\n    )\r\n  }\r\n\r\n  /*\r\n   Render Poker Game and all its entities. Table, Players, chips\r\n   action buttons, title, logo, etc. This renders the game in its\r\n   entirety.\r\n  */\r\n  renderGame = () => {\r\n    const { highBet, players, activePlayerIndex, phase } = this.state;\r\n    return (\r\n      <div className='app-background'>\r\n        <div className=\"title-text\" style={{ maxWidth: \"400px\" }}></div>\r\n        <div className=\"poker-table-div\">\r\n          <div className=\"title-logo\">\r\n            <img src={\"./assets/logo.svg\"}></img>\r\n            <h3>No-Limit Texas Hold'em Poker</h3>\r\n            <DropdownButton id=\"dropdown-basic-button\" title=\"\">\r\n              <Dropdown.Item href=\"#\"> <Link to=\"/dashboard\">Return to Dashboard</Link></Dropdown.Item>\r\n              <Dropdown.Item href=\"#\"> <Link to=\"/login\">Logout</Link></Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n          <img className=\"poker-table-image\" src={\"./assets/table.svg\"} alt=\"Poker Table\" />\r\n          {this.renderTable()}\r\n          <div className='community-hand-div' >\r\n            {this.renderTableCommunityCards()}\r\n          </div>\r\n          <div className='pot-div'>\r\n            <img src={'./assets/pot.svg'} alt=\"Pot Value\" />\r\n            <h5> {`${this.state.pot}`} </h5>\r\n          </div>\r\n        </div>\r\n        { (this.state.phase === 'showdown') && this.renderPlayerShowdown()}\r\n        <div className='game-bar' >\r\n          <div className='game-buttons'>\r\n            {this.renderPlayerActionButtons()}\r\n          </div>\r\n          <div className='slider'>\r\n            {(!this.state.loading) && makeActionMenu(highBet, players, activePlayerIndex, phase, this.manageBetChange)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  /*\r\n   Render Poker Game until there is a winner. When that occurs \r\n   render \"Player wins\" page.\r\n  */\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className='poker-table-wrapper'>\r\n          {\r\n\r\n\r\n            (this.state.loading) ? <SpinnerLoading /> :\r\n              (this.state.winnerFound) ? <PlayerWin winner={this.state.winner} /> :\r\n                this.renderGame()\r\n\r\n            // to test Player Wins page\r\n            // <PlayerWin winner={this.state.winner} difficulty=\"\"/>\r\n          }\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}