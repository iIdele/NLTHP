{"ast":null,"code":"import _objectSpread from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import uuid from'uuid/v1';import{anteUpBlinds,calculateBlindIndices,managePhaseShift,remakePot}from'./betService.js';import{dealOtherCommunityCards,dealPlayerCards,makeDeckOfCards,playerShowDown,shuffleCards}from'./cardsService.js';/** \r\n* The playerService provides services to handle\r\n* player information and the passing of information\r\n* to players.\r\n*/ /* \r\nIntialise user and agents data\r\n*/var axios=require('axios');var makeTable=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var playerName,users,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:playerName=_args.length>0&&_args[0]!==undefined?_args[0]:\"User\";// a list containing both the user and the agents data\nusers=[{id:uuid(),name:playerName,avatarURL:'/assets/playerIcons/blackUser.svg',cards:[],showDownHand:{hand:[],descendingSortHand:[]},chips:20000,roundStartChips:20000,roundEndChips:20000,currentRoundChipsInvested:0,bet:0,betReconciled:false,folded:false,allIn:false,canRaise:true,stackInvestment:0,robot:false},{id:uuid(),name:'Agent 1',avatarURL:'/assets/playerIcons/blueUser.svg',cards:[],showDownHand:{hand:[],descendingSortHand:[]},chips:20000,roundStartChips:20000,roundEndChips:20000,currentRoundChipsInvested:0,bet:0,betReconciled:false,folded:false,allIn:false,canRaise:true,stackInvestment:0,robot:true},{id:uuid(),name:'Agent 2',avatarURL:'/assets/playerIcons/redUser.svg',cards:[],showDownHand:{hand:[],descendingSortHand:[]},chips:20000,roundStartChips:20000,roundEndChips:20000,currentRoundChipsInvested:0,bet:0,betReconciled:false,folded:false,allIn:false,canRaise:true,stackInvestment:0,robot:true},{id:uuid(),name:'Agent 3',avatarURL:'/assets/playerIcons/purpleUser.svg',cards:[],showDownHand:{hand:[],descendingSortHand:[]},chips:20000,roundStartChips:20000,roundEndChips:20000,currentRoundChipsInvested:0,bet:0,betReconciled:false,folded:false,allIn:false,canRaise:true,stackInvestment:0,robot:true},{id:uuid(),name:'Agent 4',avatarURL:'/assets/playerIcons/yellowUser.svg',cards:[],showDownHand:{hand:[],descendingSortHand:[]},chips:20000,roundStartChips:20000,roundEndChips:20000,currentRoundChipsInvested:0,bet:0,betReconciled:false,folded:false,allIn:false,canRaise:true,stackInvestment:0,robot:true}];return _context.abrupt(\"return\",users);case 3:case\"end\":return _context.stop();}}},_callee);}));return function makeTable(){return _ref.apply(this,arguments);};}();/* \r\n Used to create agents of different difficulties\r\n */var makePersonality=function makePersonality(seed){switch(seed){// intermediate/advanced ai\ncase seed>0.5:return'standard';// beginner ai\ncase seed>0.35:return'aggressive';case seed>0:// intermediate/advanced ai\ndefault:return'conservative';}};var manageOverflowIndex=function manageOverflowIndex(currentIndex,incrementBy,arrayLength,direction){switch(direction){case'up':{return(currentIndex+incrementBy)%arrayLength;}case'down':{return(currentIndex-incrementBy)%arrayLength+arrayLength;}default:throw Error(\"Attempted to overfow index on unfamiliar direction\");}};/* \r\n Determines which player starts the round\r\n */var choosePhaseStartActivePlayer=function choosePhaseStartActivePlayer(state){var recursion=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!recursion){state.activePlayerIndex=manageOverflowIndex(state.blindIndex.big,1,state.players.length,'up');}else if(recursion){state.activePlayerIndex=manageOverflowIndex(state.activePlayerIndex,1,state.players.length,'up');}if(state.players[state.activePlayerIndex].folded){return choosePhaseStartActivePlayer(state,true);}if(state.players[state.activePlayerIndex].chips===0){return choosePhaseStartActivePlayer(state,true);}return state;};/* \r\n Determines which players turn is next\r\n */var chooseNextActivePlayer=function chooseNextActivePlayer(state){state.activePlayerIndex=manageOverflowIndex(state.activePlayerIndex,1,state.players.length,'up');var activePlayer=state.players[state.activePlayerIndex];var allButOnePlayersAreAllIn=state.numPlayersActive-state.numPlayersAllIn===1;if(state.numPlayersActive===1){console.log(\"Only one player active, skipping to showdown.\");return playerShowDown(remakePot(dealOtherCommunityCards(state)));}if(activePlayer.folded){console.log(\"Current player index is folded, going to next active player.\");return chooseNextActivePlayer(state);}if(allButOnePlayersAreAllIn&&!activePlayer.folded&&activePlayer.betReconciled){return playerShowDown(remakePot(dealOtherCommunityCards(state)));}if(activePlayer.chips===0){if(state.numPlayersAllIn===state.numPlayersActive){console.log(\"All players are all in.\");return playerShowDown(remakePot(dealOtherCommunityCards(state)));}else if(allButOnePlayersAreAllIn&&activePlayer.allIn){return playerShowDown(remakePot(dealOtherCommunityCards(state)));}else{return chooseNextActivePlayer(state);}}if(activePlayer.betReconciled){console.log(\"Player is reconciled with pot, round betting cycle complete, proceed to next round.\");return managePhaseShift(state);}return state;};/* \r\n The dealer chip is assigned to the \r\n player acting as the dealer in \r\n a given round.\r\n */var moveDealerChip=function moveDealerChip(state){state.dealerIndex=manageOverflowIndex(state.dealerIndex,1,state.players.length,'up');var nextDealer=state.players[state.dealerIndex];if(nextDealer.chips===0){return moveDealerChip(state);}return findBrokePlayers(state,nextDealer.name);};/* \r\n Finds and remove players with no funds remaining,\r\n shifts dealer if necessary and prepares state for \r\n next game phase.\r\n */var findBrokePlayers=function findBrokePlayers(state,dealerID){state.players=state.players.filter(function(player){return player.chips>0;});var newDealerIndex=state.players.findIndex(function(player){return player.name===dealerID;});state.dealerIndex=newDealerIndex;state.activePlayerIndex=newDealerIndex;if(state.players.length===1){// winner determined\nreturn state;}else if(state.players.length===2){state.blindIndex.small=newDealerIndex;state.blindIndex.big=manageOverflowIndex(newDealerIndex,1,state.players.length,'up');state.players=anteUpBlinds(state.players,{bigBlindIndex:state.blindIndex.big,smallBlindIndex:state.blindIndex.small},state.minBet).map(function(player){return _objectSpread(_objectSpread({},player),{},{cards:[],showDownHand:{hand:[],descendingSortHand:[]},roundStartChips:player.chips+player.bet,currentRoundChipsInvested:0,betReconciled:false,folded:false,allIn:false});});state.numPlayersAllIn=0;state.numPlayersFolded=0;state.numPlayersActive=state.players.length;}else{var blindIndicies=calculateBlindIndices(newDealerIndex,state.players.length);state.blindIndex={big:blindIndicies.bigBlindIndex,small:blindIndicies.smallBlindIndex};state.players=anteUpBlinds(state.players,blindIndicies,state.minBet).map(function(player){return _objectSpread(_objectSpread({},player),{},{cards:[],showDownHand:{hand:[],descendingSortHand:[]},roundStartChips:player.chips+player.bet,currentRoundChipsInvested:0,betReconciled:false,folded:false,allIn:false});});state.numPlayersAllIn=0;state.numPlayersFolded=0;state.numPlayersActive=state.players.length;}return dealPlayerCards(state);};/* \r\n Increments state to next game phase and \r\n shifts dealer.\r\n */var startNextRound=function startNextRound(state){state.communityCards=[];state.sidePots=[];state.playerHierarchy=[];state.showDownMessages=[];state.deck=shuffleCards(makeDeckOfCards());state.highBet=20;state.betInputValue=20;state.minBet=20;// can export out to initialState\n// Unmount all cards so react can re-trigger animations\nvar players=state.players;var clearPlayerCards=players.map(function(player){return _objectSpread(_objectSpread({},player),{},{cards:player.cards.map(function(card){})});});state.players=clearPlayerCards;return moveDealerChip(state);};/* \r\n Check if the game has a winner.\r\n */var checkWin=function checkWin(players){return players.filter(function(player){return player.chips>0;}).length===1;};export{makeTable,manageOverflowIndex,chooseNextActivePlayer,choosePhaseStartActivePlayer,startNextRound,checkWin};","map":{"version":3,"sources":["C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/src/services/playersService.js"],"names":["uuid","anteUpBlinds","calculateBlindIndices","managePhaseShift","remakePot","dealOtherCommunityCards","dealPlayerCards","makeDeckOfCards","playerShowDown","shuffleCards","axios","require","makeTable","playerName","users","id","name","avatarURL","cards","showDownHand","hand","descendingSortHand","chips","roundStartChips","roundEndChips","currentRoundChipsInvested","bet","betReconciled","folded","allIn","canRaise","stackInvestment","robot","makePersonality","seed","manageOverflowIndex","currentIndex","incrementBy","arrayLength","direction","Error","choosePhaseStartActivePlayer","state","recursion","activePlayerIndex","blindIndex","big","players","length","chooseNextActivePlayer","activePlayer","allButOnePlayersAreAllIn","numPlayersActive","numPlayersAllIn","console","log","moveDealerChip","dealerIndex","nextDealer","findBrokePlayers","dealerID","filter","player","newDealerIndex","findIndex","small","bigBlindIndex","smallBlindIndex","minBet","map","numPlayersFolded","blindIndicies","startNextRound","communityCards","sidePots","playerHierarchy","showDownMessages","deck","highBet","betInputValue","clearPlayerCards","card","checkWin"],"mappings":"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","sourcesContent":["import uuid from 'uuid/v1';\r\nimport { anteUpBlinds, calculateBlindIndices, managePhaseShift, remakePot } from './betService.js';\r\nimport { dealOtherCommunityCards, dealPlayerCards, makeDeckOfCards, playerShowDown, shuffleCards } from './cardsService.js';\r\n\r\n/** \r\n* The playerService provides services to handle\r\n* player information and the passing of information\r\n* to players.\r\n*/\r\n\r\n/* \r\nIntialise user and agents data\r\n*/\r\nconst axios = require('axios')\r\nconst makeTable = async (playerName = \"User\") => {\r\n\t// a list containing both the user and the agents data\r\n\tconst users = [{\r\n\t\tid: uuid(),\r\n\t\tname: playerName,\r\n\t\tavatarURL: '/assets/playerIcons/blackUser.svg',\r\n\t\tcards: [],\r\n\t\tshowDownHand: {\r\n\t\t\thand: [],\r\n\t\t\tdescendingSortHand: [],\r\n\t\t},\r\n\t\tchips: 20000,\r\n\t\troundStartChips: 20000,\r\n\t\troundEndChips: 20000,\r\n\t\tcurrentRoundChipsInvested: 0,\r\n\t\tbet: 0,\r\n\t\tbetReconciled: false,\r\n\t\tfolded: false,\r\n\t\tallIn: false,\r\n\t\tcanRaise: true,\r\n\t\tstackInvestment: 0,\r\n\t\trobot: false\r\n\t},\r\n\t{\r\n\t\tid: uuid(),\r\n\t\tname: 'Agent 1',\r\n\t\tavatarURL: '/assets/playerIcons/blueUser.svg',\r\n\t\tcards: [],\r\n\t\tshowDownHand: {\r\n\t\t\thand: [],\r\n\t\t\tdescendingSortHand: [],\r\n\t\t},\r\n\t\tchips: 20000,\r\n\t\troundStartChips: 20000,\r\n\t\troundEndChips: 20000,\r\n\t\tcurrentRoundChipsInvested: 0,\r\n\t\tbet: 0,\r\n\t\tbetReconciled: false,\r\n\t\tfolded: false,\r\n\t\tallIn: false,\r\n\t\tcanRaise: true,\r\n\t\tstackInvestment: 0,\r\n\t\trobot: true\r\n\t},\r\n\t{\r\n\t\tid: uuid(),\r\n\t\tname: 'Agent 2',\r\n\t\tavatarURL: '/assets/playerIcons/redUser.svg',\r\n\t\tcards: [],\r\n\t\tshowDownHand: {\r\n\t\t\thand: [],\r\n\t\t\tdescendingSortHand: [],\r\n\t\t},\r\n\t\tchips: 20000,\r\n\t\troundStartChips: 20000,\r\n\t\troundEndChips: 20000,\r\n\t\tcurrentRoundChipsInvested: 0,\r\n\t\tbet: 0,\r\n\t\tbetReconciled: false,\r\n\t\tfolded: false,\r\n\t\tallIn: false,\r\n\t\tcanRaise: true,\r\n\t\tstackInvestment: 0,\r\n\t\trobot: true\r\n\t},\r\n\t{\r\n\t\tid: uuid(),\r\n\t\tname: 'Agent 3',\r\n\t\tavatarURL: '/assets/playerIcons/purpleUser.svg',\r\n\t\tcards: [],\r\n\t\tshowDownHand: {\r\n\t\t\thand: [],\r\n\t\t\tdescendingSortHand: [],\r\n\t\t},\r\n\t\tchips: 20000,\r\n\t\troundStartChips: 20000,\r\n\t\troundEndChips: 20000,\r\n\t\tcurrentRoundChipsInvested: 0,\r\n\t\tbet: 0,\r\n\t\tbetReconciled: false,\r\n\t\tfolded: false,\r\n\t\tallIn: false,\r\n\t\tcanRaise: true,\r\n\t\tstackInvestment: 0,\r\n\t\trobot: true\r\n\t},\r\n\t{\r\n\t\tid: uuid(),\r\n\t\tname: 'Agent 4',\r\n\t\tavatarURL: '/assets/playerIcons/yellowUser.svg',\r\n\t\tcards: [],\r\n\t\tshowDownHand: {\r\n\t\t\thand: [],\r\n\t\t\tdescendingSortHand: [],\r\n\t\t},\r\n\t\tchips: 20000,\r\n\t\troundStartChips: 20000,\r\n\t\troundEndChips: 20000,\r\n\t\tcurrentRoundChipsInvested: 0,\r\n\t\tbet: 0,\r\n\t\tbetReconciled: false,\r\n\t\tfolded: false,\r\n\t\tallIn: false,\r\n\t\tcanRaise: true,\r\n\t\tstackInvestment: 0,\r\n\t\trobot: true\r\n\t}];\r\n\r\n\treturn users\r\n}\r\n/* \r\n Used to create agents of different difficulties\r\n */\r\nconst makePersonality = (seed) => {\r\n\tswitch (seed) {\r\n\t\t// intermediate/advanced ai\r\n\t\tcase (seed > 0.5):\r\n\t\t\treturn 'standard'\r\n\t\t// beginner ai\r\n\t\tcase (seed > 0.35):\r\n\t\t\treturn 'aggressive'\r\n\t\tcase (seed > 0):\r\n\t\t// intermediate/advanced ai\r\n\t\tdefault:\r\n\t\t\treturn 'conservative'\r\n\t}\r\n}\r\n\r\nconst manageOverflowIndex = (currentIndex, incrementBy, arrayLength, direction) => {\r\n\tswitch (direction) {\r\n\t\tcase ('up'): {\r\n\t\t\treturn (\r\n\t\t\t\t(currentIndex + incrementBy) % arrayLength\r\n\t\t\t)\r\n\t\t}\r\n\t\tcase ('down'): {\r\n\t\t\treturn (\r\n\t\t\t\t((currentIndex - incrementBy) % arrayLength) + arrayLength\r\n\t\t\t)\r\n\t\t}\r\n\t\tdefault: throw Error(\"Attempted to overfow index on unfamiliar direction\");\r\n\t}\r\n}\r\n/* \r\n Determines which player starts the round\r\n */\r\nconst choosePhaseStartActivePlayer = (state, recursion = false) => {\r\n\tif (!recursion) {\r\n\t\tstate.activePlayerIndex = manageOverflowIndex(state.blindIndex.big, 1, state.players.length, 'up');\r\n\t} else if (recursion) {\r\n\t\tstate.activePlayerIndex = manageOverflowIndex(state.activePlayerIndex, 1, state.players.length, 'up');\r\n\t}\r\n\tif (state.players[state.activePlayerIndex].folded) {\r\n\t\treturn choosePhaseStartActivePlayer(state, true)\r\n\t}\r\n\tif (state.players[state.activePlayerIndex].chips === 0) {\r\n\t\treturn choosePhaseStartActivePlayer(state, true)\r\n\t}\r\n\treturn state\r\n}\r\n\r\n/* \r\n Determines which players turn is next\r\n */\r\nconst chooseNextActivePlayer = (state) => {\r\n\tstate.activePlayerIndex = manageOverflowIndex(state.activePlayerIndex, 1, state.players.length, 'up');\r\n\tconst activePlayer = state.players[state.activePlayerIndex];\r\n\r\n\tconst allButOnePlayersAreAllIn = (state.numPlayersActive - state.numPlayersAllIn === 1);\r\n\tif (state.numPlayersActive === 1) {\r\n\t\tconsole.log(\"Only one player active, skipping to showdown.\")\r\n\t\treturn (playerShowDown(remakePot(dealOtherCommunityCards(state))));\r\n\t}\r\n\tif (activePlayer.folded) {\r\n\t\tconsole.log(\"Current player index is folded, going to next active player.\")\r\n\t\treturn chooseNextActivePlayer(state);\r\n\t}\r\n\r\n\tif (\r\n\t\tallButOnePlayersAreAllIn &&\r\n\t\t!activePlayer.folded &&\r\n\t\tactivePlayer.betReconciled\r\n\t) {\r\n\t\treturn (playerShowDown(remakePot(dealOtherCommunityCards(state))));\r\n\t}\r\n\r\n\tif (activePlayer.chips === 0) {\r\n\t\tif (state.numPlayersAllIn === state.numPlayersActive) {\r\n\t\t\tconsole.log(\"All players are all in.\")\r\n\t\t\treturn (playerShowDown(remakePot(dealOtherCommunityCards(state))));\r\n\t\t} else if (allButOnePlayersAreAllIn && activePlayer.allIn) {\r\n\t\t\treturn (playerShowDown(remakePot(dealOtherCommunityCards(state))));\r\n\t\t} else {\r\n\t\t\treturn chooseNextActivePlayer(state);\r\n\t\t}\r\n\t}\r\n\r\n\tif (activePlayer.betReconciled) {\r\n\t\tconsole.log(\"Player is reconciled with pot, round betting cycle complete, proceed to next round.\")\r\n\t\treturn managePhaseShift(state);\r\n\t}\r\n\r\n\treturn state\r\n}\r\n\r\n/* \r\n The dealer chip is assigned to the \r\n player acting as the dealer in \r\n a given round.\r\n */\r\nconst moveDealerChip = (state) => {\r\n\tstate.dealerIndex = manageOverflowIndex(state.dealerIndex, 1, state.players.length, 'up');\r\n\tconst nextDealer = state.players[state.dealerIndex]\r\n\tif (nextDealer.chips === 0) {\r\n\t\treturn moveDealerChip(state)\r\n\t}\r\n\r\n\treturn findBrokePlayers(state, nextDealer.name);\r\n}\r\n\r\n\r\n/* \r\n Finds and remove players with no funds remaining,\r\n shifts dealer if necessary and prepares state for \r\n next game phase.\r\n */\r\nconst findBrokePlayers = (state, dealerID) => {\r\n\tstate.players = state.players.filter(player => player.chips > 0);\r\n\tconst newDealerIndex = state.players.findIndex(player => player.name === dealerID)\r\n\tstate.dealerIndex = newDealerIndex\r\n\tstate.activePlayerIndex = newDealerIndex\r\n\tif (state.players.length === 1) {\r\n\t\t// winner determined\r\n\t\treturn state\r\n\t} else if (state.players.length === 2) {\r\n\t\tstate.blindIndex.small = newDealerIndex;\r\n\t\tstate.blindIndex.big = manageOverflowIndex(newDealerIndex, 1, state.players.length, 'up');\r\n\t\tstate.players = anteUpBlinds(state.players, { bigBlindIndex: state.blindIndex.big, smallBlindIndex: state.blindIndex.small }, state.minBet).map(player => ({\r\n\t\t\t...player,\r\n\t\t\tcards: [],\r\n\t\t\tshowDownHand: {\r\n\t\t\t\thand: [],\r\n\t\t\t\tdescendingSortHand: [],\r\n\t\t\t},\r\n\t\t\troundStartChips: player.chips + player.bet,\r\n\t\t\tcurrentRoundChipsInvested: 0,\r\n\t\t\tbetReconciled: false,\r\n\t\t\tfolded: false,\r\n\t\t\tallIn: false,\r\n\t\t}))\r\n\t\tstate.numPlayersAllIn = 0;\r\n\t\tstate.numPlayersFolded = 0;\r\n\t\tstate.numPlayersActive = state.players.length;\r\n\t} else {\r\n\t\tconst blindIndicies = calculateBlindIndices(newDealerIndex, state.players.length);\r\n\t\tstate.blindIndex = {\r\n\t\t\tbig: blindIndicies.bigBlindIndex,\r\n\t\t\tsmall: blindIndicies.smallBlindIndex,\r\n\t\t}\r\n\t\tstate.players = anteUpBlinds(state.players, blindIndicies, state.minBet).map(player => ({\r\n\t\t\t...player,\r\n\t\t\tcards: [],\r\n\t\t\tshowDownHand: {\r\n\t\t\t\thand: [],\r\n\t\t\t\tdescendingSortHand: [],\r\n\t\t\t},\r\n\t\t\troundStartChips: player.chips + player.bet,\r\n\t\t\tcurrentRoundChipsInvested: 0,\r\n\t\t\tbetReconciled: false,\r\n\t\t\tfolded: false,\r\n\t\t\tallIn: false,\r\n\t\t}))\r\n\t\tstate.numPlayersAllIn = 0;\r\n\t\tstate.numPlayersFolded = 0;\r\n\t\tstate.numPlayersActive = state.players.length;\r\n\t}\r\n\treturn dealPlayerCards(state)\r\n}\r\n\r\n/* \r\n Increments state to next game phase and \r\n shifts dealer.\r\n */\r\nconst startNextRound = (state) => {\r\n\tstate.communityCards = [];\r\n\tstate.sidePots = [];\r\n\tstate.playerHierarchy = [];\r\n\tstate.showDownMessages = [];\r\n\tstate.deck = shuffleCards(makeDeckOfCards())\r\n\tstate.highBet = 20;\r\n\tstate.betInputValue = 20;\r\n\tstate.minBet = 20; // can export out to initialState\r\n\t// Unmount all cards so react can re-trigger animations\r\n\tconst { players } = state;\r\n\tconst clearPlayerCards = players.map(player => ({ ...player, cards: player.cards.map(card => { }) }))\r\n\tstate.players = clearPlayerCards;\r\n\treturn moveDealerChip(state)\r\n}\r\n\r\n/* \r\n Check if the game has a winner.\r\n */\r\nconst checkWin = players => {\r\n\treturn (players.filter(player => player.chips > 0).length === 1)\r\n}\r\n\r\nexport { makeTable, manageOverflowIndex, chooseNextActivePlayer, choosePhaseStartActivePlayer, startNextRound, checkWin };\r\n\r\n"]},"metadata":{},"sourceType":"module"}