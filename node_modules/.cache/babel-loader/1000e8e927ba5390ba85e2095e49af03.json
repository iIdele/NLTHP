{"ast":null,"code":"import \"core-js/modules/web.immediate\";\nimport \"core-js/modules/web.url\";\nimport \"core-js/modules/web.url.to-json\";\nimport \"core-js/modules/web.url-search-params\";\nvar _jsxFileName = \"C:\\\\Users\\\\manny\\\\2021-ca400-idelegi2-puzzuos2\\\\src\\\\ui\\\\src\\\\components\\\\interfaces\\\\Game.js\";\nimport { cloneDeep } from 'lodash';\nimport 'raf/polyfill';\nimport React, { Component } from 'react';\nimport { Dropdown, DropdownButton } from 'react-bootstrap';\nimport { Link } from \"react-router-dom\";\nimport '../../App.css';\nimport '../../Game.css';\nimport { aiHandler as aiHandlerUtil } from '../../services/aiService.js';\nimport { anteUpBlinds, calculateBlindIndices, calculateMinBet, manageBet, managePlayerFold } from '../../services/betService.js';\nimport { dealPlayerCards, makeDeckOfCards, shuffleCards } from '../../services/cardsService.js';\nimport { checkWin, makeTable, startNextRound } from '../../services/playersService.js';\nimport { makeActionButtonText, makeActionMenu, makeNetPlayerEarnings, makeShowdownMessages } from '../../services/uiService.js';\nimport Card from \"../cards/Card\";\nimport SpinnerLoading from '../helpers/SpinnerLoading';\nimport Player from \"../players/Player\";\nimport Dashboard from './Dashboard';\nimport PlayerWin from './PlayerWin';\n/**\r\n * Game component that manages all aspects of the Poker Game\r\n * and allows user to compete with AI Agents.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      playerAnimationCase: {\n        0: {\n          isAnimating: false,\n          content: null\n        },\n        1: {\n          isAnimating: false,\n          content: null\n        },\n        2: {\n          isAnimating: false,\n          content: null\n        },\n        3: {\n          isAnimating: false,\n          content: null\n        },\n        4: {\n          isAnimating: false,\n          content: null\n        },\n        5: {\n          isAnimating: false,\n          content: null\n        }\n      },\n      loading: true,\n      winnerFound: null,\n      winner: null,\n      blindIndex: null,\n      playerHierarchy: [],\n      showDownMessages: [],\n      playActionMessages: [],\n      deck: null,\n      communityCards: [],\n      pot: null,\n      highBet: null,\n      betInputValue: null,\n      sidePots: [],\n      minBet: 20,\n      phase: 'loading',\n      players: null,\n      playersActive: null,\n      playersFolded: null,\n      playersAllIn: null,\n      activePlayerIndex: null,\n      dealerIndex: null\n    };\n    this.cardanimationDelay = 0;\n\n    this.executeGame = () => {\n      // deal player cards\n      const newState = dealPlayerCards(cloneDeep(this.state)); // update state after each action\n\n      this.setState(newState, () => {\n        if (this.state.players[this.state.activePlayerIndex].agent && this.state.phase !== 'showdown') {\n          setTimeout(() => {\n            this.aiHandler();\n          }, 1200);\n        }\n      });\n    };\n\n    this.aiHandler = () => {\n      const {\n        playerAnimationCase,\n        ...appState\n      } = this.state; // change state according to AI decision/action\n\n      const newState = aiHandlerUtil(cloneDeep(appState), this.changePlayerAnimationState); // update state after action\n\n      this.setState({ ...newState,\n        betInputValue: newState.minBet\n      }, () => {\n        if (this.state.players[this.state.activePlayerIndex].agent && this.state.phase !== 'showdown') {\n          setTimeout(() => {\n            this.aiHandler();\n          }, 1200);\n        }\n      });\n    };\n\n    this.manageBetChange = (val, min, max) => {\n      if (val === '') val = min;\n      if (val > max) val = max; // handle player bet change\n\n      this.setState({\n        betInputValue: parseInt(val, 10)\n      });\n    };\n\n    this.manageBetSubmit = (bet, min, max) => {\n      const {\n        playerAnimationCase,\n        ...appState\n      } = this.state; // get active player\n\n      const {\n        activePlayerIndex\n      } = appState; // execute player action \n\n      this.changePlayerAnimationState(activePlayerIndex, `${makeActionButtonText(this.state.highBet, this.state.betInputValue, this.state.players[this.state.activePlayerIndex])} ${bet > this.state.players[this.state.activePlayerIndex].bet ? bet : \"\"}`);\n      ;\n      const newState = manageBet(cloneDeep(appState), parseInt(bet, 10), parseInt(min, 10), parseInt(max, 10)); // continue to next player if hand is not over\n\n      this.setState(newState, () => {\n        if (this.state.players[this.state.activePlayerIndex].agent && this.state.phase !== 'showdown') {\n          setTimeout(() => {\n            this.aiHandler();\n          }, 1200);\n        }\n      });\n    };\n\n    this.manageSliderInputChange = val => {\n      this.setState({\n        betInputValue: val[0]\n      });\n    };\n\n    this.managePlayerFold = () => {\n      const {\n        playerAnimationCase,\n        ...appState\n      } = this.state; // player fold action\n\n      const newState = managePlayerFold(cloneDeep(appState)); // continue to next player if hand is not over\n\n      this.setState(newState, () => {\n        if (this.state.players[this.state.activePlayerIndex].agent && this.state.phase !== 'showdown') {\n          setTimeout(() => {\n            this.aiHandler();\n          }, 1200);\n        }\n      });\n    };\n\n    this.manageNextRound = () => {\n      // remove cards from table\n      this.setState({\n        clearCards: true\n      }); // start fresh round\n\n      const newState = startNextRound(cloneDeep(this.state));\n      var winner; // if there is a winner the game is over\n\n      if (checkWin(newState.players)) {\n        const players = newState.players;\n        players.forEach(element => {\n          if (element.chips > 0) winner = element;\n        });\n        this.setState({\n          winner: winner\n        });\n        this.setState({\n          winnerFound: true\n        });\n        return;\n      } // continue to next round if hand is over\n\n\n      this.setState(newState, () => {\n        if (this.state.players[this.state.activePlayerIndex].agent && this.state.phase !== 'showdown') {\n          setTimeout(() => this.aiHandler(), 1200);\n        }\n      });\n    };\n\n    this.changePlayerAnimationState = (index, content) => {\n      const newAnimationSwitchboard = Object.assign({}, this.state.playerAnimationCase, {\n        [index]: {\n          isAnimating: true,\n          content\n        }\n      });\n      this.setState({\n        playerAnimationCase: newAnimationSwitchboard\n      });\n    };\n\n    this.popPlayerAnimationState = index => {\n      const persistContent = this.state.playerAnimationCase[index].content;\n      const newAnimationSwitchboard = Object.assign({}, this.state.playerAnimationCase, {\n        [index]: {\n          isAnimating: false,\n          content: persistContent\n        }\n      });\n      this.setState({\n        playerAnimationCase: newAnimationSwitchboard\n      });\n    };\n\n    this.renderTable = () => {\n      // update table features according to current game state\n      const {\n        players,\n        activePlayerIndex,\n        dealerIndex,\n        clearCards,\n        phase,\n        playerAnimationCase\n      } = this.state; // changes turn of player each hand\n\n      const reversedPlayers = players.reduce((result, player, index) => {\n        const isActive = index === activePlayerIndex;\n        const hasDealerChip = index === dealerIndex; // shift player in array to allow move dealer chip to each player counter clock-wise\n\n        result.unshift( /*#__PURE__*/_jsxDEV(Player, {\n          arrayIndex: index,\n          isActive: isActive,\n          hasDealerChip: hasDealerChip,\n          player: player,\n          clearCards: clearCards,\n          phase: phase,\n          playerAnimationCase: playerAnimationCase,\n          endTransition: this.popPlayerAnimationState\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 9\n        }, this));\n        return result;\n      }, []);\n      return reversedPlayers.map(component => component);\n    };\n\n    this.renderPlayerActionButtons = () => {\n      const {\n        highBet,\n        players,\n        activePlayerIndex,\n        phase,\n        betInputValue\n      } = this.state; // calculate min bet user has to place\n\n      const min = calculateMinBet(highBet, players[activePlayerIndex].chips, players[activePlayerIndex].bet); // calculate max bet user can place\n\n      const max = players[activePlayerIndex].chips + players[activePlayerIndex].bet; // render different buttons/text according to user input \n\n      return players[activePlayerIndex].agent || phase === 'showdown' ? null : /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"fold-button\",\n          onClick: () => this.managePlayerFold(),\n          children: \"Fold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bet-button\",\n          onClick: () => this.manageBetSubmit(betInputValue, min, max),\n          children: makeActionButtonText(highBet, betInputValue, players[activePlayerIndex])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.renderTableCommunityCards = purgeAnimation => {\n      return this.state.communityCards.map((card, index) => {\n        let cardData = { ...card\n        };\n\n        if (purgeAnimation) {\n          cardData.animationDelay = 0;\n        } // render card according to its value and suit\n\n\n        return /*#__PURE__*/_jsxDEV(Card, {\n          cardData: cardData\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 9\n        }, this);\n      });\n    };\n\n    this.renderPlayerShowdown = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"showdown-div-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"showdown-div-title\",\n          children: \"Hand Complete!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"showdown-div-messages\",\n          \"aria-live\": \"polite\",\n          children: makeShowdownMessages(this.state.showDownMessages)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"showdown-div-community-card-label\",\n          children: \"Community Cards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"showdown-div-community-cards\",\n          children: this.renderTableCommunityCards(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"showdown-nextRound-button\",\n          onClick: () => this.manageNextRound(),\n          children: \" Next Hand \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 9\n        }, this), this.renderBestHands()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.renderBestHands = () => {\n      // get best hands from current state of game\n      const {\n        playerHierarchy\n      } = this.state;\n      return playerHierarchy.map(rankSnapshot => {\n        const tie = Array.isArray(rankSnapshot);\n        return tie ? this.renderHandSplit(rankSnapshot) : this.renderHandWinner(rankSnapshot);\n      });\n    };\n\n    this.renderHandSplit = rankSnapshot => {\n      return rankSnapshot.map(player => {\n        return this.renderHandWinner(player);\n      });\n    };\n\n    this.makeCards = cards => {\n      return cards.map((card, index) => {\n        const cardData = { ...card,\n          animationDelay: 0\n        };\n        return /*#__PURE__*/_jsxDEV(Card, {\n          cardData: cardData\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 14\n        }, this);\n      });\n    };\n\n    this.renderHandWinner = player => {\n      // get best hand and hand ranking from winning player\n      const {\n        name,\n        bestHand,\n        handRank\n      } = player; // get info of winning player\n\n      const playerStateData = this.state.players.find(statePlayer => statePlayer.name === name); // display winning player information\n\n      return /*#__PURE__*/_jsxDEV(\"table\", {\n        class: \"showdown-table content-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Player\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Private Cards\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Best Hand\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Hand Ranking\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Win/Loss\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"showdown-player-privateCards\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"showdown-player-cards\",\n                  children: this.makeCards(playerStateData.cards)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 476,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"showdown-player-besthand-div\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"showdown-player-besthand-cards\",\n                  style: {\n                    alignItems: 'center'\n                  },\n                  children: bestHand.map((card, index) => {\n                    // reset animation delay for next round\n                    const cardData = { ...card,\n                      animationDelay: 0\n                    };\n                    return /*#__PURE__*/_jsxDEV(Card, {\n                      cardData: cardData\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 487,\n                      columnNumber: 28\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 482,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: handRank\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: makeNetPlayerEarnings(playerStateData.roundEndChips, playerStateData.roundStartChips)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.renderGame = () => {\n      const {\n        highBet,\n        players,\n        activePlayerIndex,\n        phase\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-background\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-text\",\n          style: {\n            maxWidth: \"400px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"poker-table-div\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title-logo\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"./assets/logo.svg\",\n              alt: \"App Logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"No-Limit Texas Hold'em Poker\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(DropdownButton, {\n              id: \"dropdown-basic-button\",\n              title: \"Menu\",\n              alt: \"Menu Dropdown\",\n              \"aria-label\": \"Menu Dropdown\",\n              children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                href: \"#\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n                  to: \"/dashboard\",\n                  children: \"Return to Dashboard\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 520,\n                  columnNumber: 40\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                href: \"#\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n                  to: \"/login\",\n                  children: \"Logout\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 521,\n                  columnNumber: 40\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"poker-table-image\",\n            src: \"./assets/table.svg\",\n            alt: \"Poker Table\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 11\n          }, this), this.renderTable(), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"community-hand-div\",\n            \"aria-label\": \"Community Cards\",\n            children: this.renderTableCommunityCards()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pot-div\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: './assets/pot.svg',\n              alt: \"Community Pot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\" \", `${this.state.pot}`, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 9\n        }, this), this.state.phase === 'showdown' && this.renderPlayerShowdown(), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-bar\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-buttons\",\n            children: this.renderPlayerActionButtons()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider\",\n            \"aria-label\": \"Betting Slider\",\n            children: !this.state.loading && makeActionMenu(highBet, players, activePlayerIndex, phase, this.manageBetChange)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  /*\r\n   On component load create game with table, players, etc.\r\n  */\n  async componentDidMount() {\n    const players = await makeTable(Dashboard.username); // randomly assign dealer chip\n\n    const dealerIndex = Math.floor(Math.random() * Math.floor(players.length)); // assign blinds to respective players\n\n    const blindIndicies = calculateBlindIndices(dealerIndex, players.length);\n    const playersBoughtIn = anteUpBlinds(players, blindIndicies, this.state.minBet);\n    const imageLoaderRequest = new XMLHttpRequest(); // wait for table to load\n\n    imageLoaderRequest.addEventListener(\"load\", e => {\n      console.log(`${e.type}`);\n      console.log(e);\n      console.log(\"Table Loaded!\");\n      this.setState({\n        loading: false\n      });\n    });\n    imageLoaderRequest.addEventListener(\"loadstart\", e => {\n      console.log(`${e.type}`);\n      console.log(e);\n    });\n    imageLoaderRequest.addEventListener(\"loadend\", e => {\n      console.log(`${e.type}`);\n      console.log(e);\n    });\n    imageLoaderRequest.addEventListener(\"progress\", e => {\n      console.log(`${e.type}`);\n      console.log(e);\n    });\n    imageLoaderRequest.addEventListener(\"abort\", e => {\n      console.log(`${e.type}`);\n      console.log(e);\n    });\n    imageLoaderRequest.addEventListener(\"error\", e => {\n      console.log(`${e.type}`);\n      console.log(e);\n    });\n    imageLoaderRequest.open(\"GET\", \"./assets/table.svg\");\n    imageLoaderRequest.send(); // set initial game state\n\n    this.setState(prevState => ({\n      players: playersBoughtIn,\n      playersActive: players.length,\n      playersFolded: 0,\n      playersAllIn: 0,\n      activePlayerIndex: dealerIndex,\n      dealerIndex,\n      blindIndex: {\n        big: blindIndicies.bigBlindIndex,\n        small: blindIndicies.smallBlindIndex\n      },\n      deck: shuffleCards(makeDeckOfCards()),\n      pot: 0,\n      highBet: prevState.minBet,\n      betInputValue: prevState.minBet,\n      phase: 'initialDeal'\n    })); // game executes until there is a winner\n\n    this.executeGame();\n  }\n  /*\r\n   Game execution which iterates through each phase of the \r\n   Poker game repeatedly until there is a winner at the table\r\n  */\n\n\n  /*\r\n   Render Poker Game until there is a winner. When that occurs \r\n   render \"Player wins\" page.\r\n  */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poker-table-wrapper\",\n        children: this.state.loading ? /*#__PURE__*/_jsxDEV(SpinnerLoading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 36\n        }, this) : this.state.winnerFound ? /*#__PURE__*/_jsxDEV(PlayerWin, {\n          winner: this.state.winner\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 42\n        }, this) : this.renderGame() // to test Player Wins page\n        // <PlayerWin winner={this.state.winner} difficulty=\"\"/>\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/manny/2021-ca400-idelegi2-puzzuos2/src/ui/src/components/interfaces/Game.js"],"names":["cloneDeep","React","Component","Dropdown","DropdownButton","Link","aiHandler","aiHandlerUtil","anteUpBlinds","calculateBlindIndices","calculateMinBet","manageBet","managePlayerFold","dealPlayerCards","makeDeckOfCards","shuffleCards","checkWin","makeTable","startNextRound","makeActionButtonText","makeActionMenu","makeNetPlayerEarnings","makeShowdownMessages","Card","SpinnerLoading","Player","Dashboard","PlayerWin","Game","state","playerAnimationCase","isAnimating","content","loading","winnerFound","winner","blindIndex","playerHierarchy","showDownMessages","playActionMessages","deck","communityCards","pot","highBet","betInputValue","sidePots","minBet","phase","players","playersActive","playersFolded","playersAllIn","activePlayerIndex","dealerIndex","cardanimationDelay","executeGame","newState","setState","agent","setTimeout","appState","changePlayerAnimationState","manageBetChange","val","min","max","parseInt","manageBetSubmit","bet","manageSliderInputChange","manageNextRound","clearCards","forEach","element","chips","index","newAnimationSwitchboard","Object","assign","popPlayerAnimationState","persistContent","renderTable","reversedPlayers","reduce","result","player","isActive","hasDealerChip","unshift","map","component","renderPlayerActionButtons","renderTableCommunityCards","purgeAnimation","card","cardData","animationDelay","renderPlayerShowdown","renderBestHands","rankSnapshot","tie","Array","isArray","renderHandSplit","renderHandWinner","makeCards","cards","name","bestHand","handRank","playerStateData","find","statePlayer","alignItems","roundEndChips","roundStartChips","renderGame","maxWidth","componentDidMount","username","Math","floor","random","length","blindIndicies","playersBoughtIn","imageLoaderRequest","XMLHttpRequest","addEventListener","e","console","log","type","open","send","prevState","big","bigBlindIndex","small","smallBlindIndex","render"],"mappings":"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","sourcesContent":["import 'core-js/es/array';\r\nimport 'core-js/es/map';\r\nimport 'core-js/es/set';\r\nimport \"core-js/stable\";\r\nimport { cloneDeep } from 'lodash';\r\nimport 'raf/polyfill';\r\nimport React, { Component } from 'react';\r\nimport { Dropdown, DropdownButton } from 'react-bootstrap';\r\nimport { Link } from \"react-router-dom\";\r\nimport \"regenerator-runtime/runtime\";\r\nimport '../../App.css';\r\nimport '../../Game.css';\r\nimport {\r\n  aiHandler as aiHandlerUtil\r\n} from '../../services/aiService.js';\r\nimport {\r\n  anteUpBlinds, calculateBlindIndices,\r\n\r\n  calculateMinBet,\r\n  manageBet,\r\n  managePlayerFold\r\n} from '../../services/betService.js';\r\nimport {\r\n  dealPlayerCards, makeDeckOfCards,\r\n  shuffleCards\r\n} from '../../services/cardsService.js';\r\nimport {\r\n  checkWin, makeTable, startNextRound\r\n} from '../../services/playersService.js';\r\nimport {\r\n  makeActionButtonText,\r\n\r\n  makeActionMenu, makeNetPlayerEarnings, makeShowdownMessages\r\n} from '../../services/uiService.js';\r\nimport Card from \"../cards/Card\";\r\nimport SpinnerLoading from '../helpers/SpinnerLoading';\r\nimport Player from \"../players/Player\";\r\nimport Dashboard from './Dashboard';\r\nimport PlayerWin from './PlayerWin';\r\n\r\n/**\r\n * Game component that manages all aspects of the Poker Game\r\n * and allows user to compete with AI Agents.\r\n */\r\nclass Game extends Component {\r\n  state = {\r\n    playerAnimationCase: {\r\n      0: { isAnimating: false, content: null },\r\n      1: { isAnimating: false, content: null },\r\n      2: { isAnimating: false, content: null },\r\n      3: { isAnimating: false, content: null },\r\n      4: { isAnimating: false, content: null },\r\n      5: { isAnimating: false, content: null }\r\n    },\r\n    loading: true,\r\n    winnerFound: null,\r\n    winner: null,\r\n    blindIndex: null,\r\n    playerHierarchy: [],\r\n    showDownMessages: [],\r\n    playActionMessages: [],\r\n    deck: null,\r\n    communityCards: [],\r\n    pot: null,\r\n    highBet: null,\r\n    betInputValue: null,\r\n    sidePots: [],\r\n    minBet: 20,\r\n    phase: 'loading', \r\n    players: null,\r\n    playersActive: null,\r\n    playersFolded: null,\r\n    playersAllIn: null,\r\n    activePlayerIndex: null,\r\n    dealerIndex: null,  \r\n  }\r\n\r\n  // animation delay for cards which gives real dealer effect\r\n  cardanimationDelay = 0;\r\n\r\n  /*\r\n   On component load create game with table, players, etc.\r\n  */\r\n  async componentDidMount() {\r\n    const players = await makeTable(Dashboard.username);\r\n    // randomly assign dealer chip\r\n    const dealerIndex = Math.floor(Math.random() * Math.floor(players.length));\r\n\r\n    // assign blinds to respective players\r\n    const blindIndicies = calculateBlindIndices(dealerIndex, players.length);\r\n    const playersBoughtIn = anteUpBlinds(players, blindIndicies, this.state.minBet);\r\n\r\n    const imageLoaderRequest = new XMLHttpRequest();\r\n\r\n    // wait for table to load\r\n    imageLoaderRequest.addEventListener(\"load\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n      console.log(\"Table Loaded!\");\r\n      this.setState({\r\n        loading: false,\r\n      })\r\n    });\r\n\r\n\r\n    imageLoaderRequest.addEventListener(\"loadstart\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.addEventListener(\"loadend\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.addEventListener(\"progress\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.addEventListener(\"abort\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.addEventListener(\"error\", e => {\r\n      console.log(`${e.type}`);\r\n      console.log(e);\r\n    });\r\n\r\n    imageLoaderRequest.open(\"GET\", \"./assets/table.svg\");\r\n    imageLoaderRequest.send();\r\n\r\n    // set initial game state\r\n    this.setState(prevState => ({\r\n      players: playersBoughtIn,\r\n      playersActive: players.length,\r\n      playersFolded: 0,\r\n      playersAllIn: 0,\r\n      activePlayerIndex: dealerIndex,\r\n      dealerIndex,\r\n      blindIndex: {\r\n        big: blindIndicies.bigBlindIndex,\r\n        small: blindIndicies.smallBlindIndex,\r\n      },\r\n      deck: shuffleCards(makeDeckOfCards()),\r\n      pot: 0,\r\n      highBet: prevState.minBet,\r\n      betInputValue: prevState.minBet,\r\n      phase: 'initialDeal',\r\n    }))\r\n    // game executes until there is a winner\r\n    this.executeGame();\r\n  }\r\n\r\n  /*\r\n   Game execution which iterates through each phase of the \r\n   Poker game repeatedly until there is a winner at the table\r\n  */\r\n  executeGame = () => {\r\n    // deal player cards\r\n    const newState = dealPlayerCards(cloneDeep(this.state))\r\n    // update state after each action\r\n    this.setState(newState, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].agent) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n          this.aiHandler()\r\n        }, 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handler for Artificial Intelligence Agents performs action\r\n   according to their in game decisions\r\n  */\r\n  aiHandler = () => {\r\n    const { playerAnimationCase, ...appState } = this.state;\r\n    // change state according to AI decision/action\r\n    const newState = aiHandlerUtil(cloneDeep(appState), this.changePlayerAnimationState)\r\n\r\n    // update state after action\r\n    this.setState({\r\n      ...newState,\r\n      betInputValue: newState.minBet\r\n    }, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].agent) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n\r\n          this.aiHandler()\r\n        }, 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handle player bet change action\r\n  */\r\n  manageBetChange = (val, min, max) => {\r\n    if (val === '') val = min\r\n    if (val > max) val = max\r\n    // handle player bet change\r\n    this.setState({\r\n      betInputValue: parseInt(val, 10),\r\n    });\r\n  }\r\n\r\n  /*\r\n   Handle player bet submit action\r\n  */\r\n  manageBetSubmit = (bet, min, max) => {\r\n    const { playerAnimationCase, ...appState } = this.state;\r\n    // get active player\r\n    const { activePlayerIndex } = appState;\r\n    // execute player action \r\n    this.changePlayerAnimationState(activePlayerIndex, `${makeActionButtonText(this.state.highBet, this.state.betInputValue, this.state.players[this.state.activePlayerIndex])} ${(bet > this.state.players[this.state.activePlayerIndex].bet) ? (bet) : \"\"}`);;\r\n    const newState = manageBet(cloneDeep(appState), parseInt(bet, 10), parseInt(min, 10), parseInt(max, 10));\r\n\r\n    // continue to next player if hand is not over\r\n    this.setState(newState, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].agent) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n\r\n          this.aiHandler()\r\n        }, 1200)\r\n      }\r\n    });\r\n  }\r\n\r\n  /*\r\n   Handle Raise Slider bar value change (by user)\r\n  */\r\n  manageSliderInputChange = (val) => {\r\n    this.setState({\r\n      betInputValue: val[0]\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handle Player fold action\r\n  */\r\n  managePlayerFold = () => {\r\n    const { playerAnimationCase, ...appState } = this.state\r\n    // player fold action\r\n    const newState = managePlayerFold(cloneDeep(appState));\r\n\r\n    // continue to next player if hand is not over\r\n    this.setState(newState, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].agent) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n\r\n          this.aiHandler()\r\n        }, 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handle next game hand\r\n  */\r\n  manageNextRound = () => {\r\n    // remove cards from table\r\n    this.setState({ clearCards: true })\r\n    // start fresh round\r\n    const newState = startNextRound(cloneDeep(this.state))\r\n    var winner;\r\n    // if there is a winner the game is over\r\n    if (checkWin(newState.players)) {\r\n      const players = newState.players\r\n      players.forEach(element => {\r\n        if (element.chips > 0)\r\n          winner = element\r\n      });\r\n      this.setState({ winner: winner });\r\n      this.setState({ winnerFound: true })\r\n\r\n      return;\r\n    }\r\n    // continue to next round if hand is over\r\n    this.setState(newState, () => {\r\n      if ((this.state.players[this.state.activePlayerIndex].agent) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => this.aiHandler(), 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  /*\r\n   Handle player animation according to state of game\r\n  */\r\n  changePlayerAnimationState = (index, content) => {\r\n    const newAnimationSwitchboard = Object.assign(\r\n      {},\r\n      this.state.playerAnimationCase,\r\n      { [index]: { isAnimating: true, content } }\r\n    )\r\n    this.setState({ playerAnimationCase: newAnimationSwitchboard });\r\n  }\r\n\r\n  /*\r\n   Stop latest player animation \r\n  */\r\n  popPlayerAnimationState = (index) => {\r\n    const persistContent = this.state.playerAnimationCase[index].content;\r\n    const newAnimationSwitchboard = Object.assign(\r\n      {},\r\n      this.state.playerAnimationCase,\r\n      { [index]: { isAnimating: false, content: persistContent } }\r\n    )\r\n    this.setState({ playerAnimationCase: newAnimationSwitchboard });\r\n  }\r\n\r\n  /*\r\n   Render Poker Table with Players, cards, etc.\r\n  */\r\n  renderTable = () => {\r\n    // update table features according to current game state\r\n    const {\r\n      players,\r\n      activePlayerIndex,\r\n      dealerIndex,\r\n      clearCards,\r\n      phase,\r\n      playerAnimationCase\r\n    } = this.state;\r\n\r\n    // changes turn of player each hand\r\n    const reversedPlayers = players.reduce((result, player, index) => {\r\n\r\n      const isActive = (index === activePlayerIndex);\r\n      const hasDealerChip = (index === dealerIndex);\r\n\r\n\r\n      // shift player in array to allow move dealer chip to each player counter clock-wise\r\n      result.unshift(\r\n        <Player\r\n          key={index}\r\n          arrayIndex={index}\r\n          isActive={isActive}\r\n          hasDealerChip={hasDealerChip}\r\n          player={player}\r\n          clearCards={clearCards}\r\n          phase={phase}\r\n          playerAnimationCase={playerAnimationCase}\r\n          endTransition={this.popPlayerAnimationState}\r\n        />\r\n      )\r\n      return result\r\n    }, []);\r\n    return reversedPlayers.map(component => component);\r\n  }\r\n\r\n  /*\r\n   Render action buttons for user such as check/call/raise/allin and fold\r\n  */\r\n  renderPlayerActionButtons = () => {\r\n    const { highBet, players, activePlayerIndex, phase, betInputValue } = this.state\r\n    // calculate min bet user has to place\r\n    const min = calculateMinBet(highBet, players[activePlayerIndex].chips, players[activePlayerIndex].bet)\r\n    // calculate max bet user can place\r\n    const max = players[activePlayerIndex].chips + players[activePlayerIndex].bet\r\n\r\n    // render different buttons/text according to user input \r\n    return ((players[activePlayerIndex].agent) || (phase === 'showdown')) ? null : (\r\n      <React.Fragment>\r\n        <button className='fold-button' onClick={() => this.managePlayerFold()}>\r\n          Fold\r\n        </button>\r\n        <button className='bet-button' onClick={() => this.manageBetSubmit(betInputValue, min, max)}>\r\n          {makeActionButtonText(highBet, betInputValue, players[activePlayerIndex])}\r\n        </button>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  /*\r\n   Render community cards that dealer deals on flop, turn and river\r\n  */\r\n  renderTableCommunityCards = (purgeAnimation) => {\r\n    return this.state.communityCards.map((card, index) => {\r\n      let cardData = { ...card };\r\n      if (purgeAnimation) {\r\n        cardData.animationDelay = 0;\r\n      }\r\n      // render card according to its value and suit\r\n      return (\r\n        <Card key={index} cardData={cardData} />\r\n      );\r\n    });\r\n  }\r\n\r\n  /*\r\n   Render player showdown at end of each hand.\r\n   Compares players' hands and indicates winnings \r\n   (win/losses of each active player)\r\n  */\r\n  renderPlayerShowdown = () => {\r\n    return (\r\n      <div className='showdown-div-wrapper'>\r\n        <h4 className=\"showdown-div-title\">\r\n          Hand Complete!\r\n        </h4>\r\n        <div className=\"showdown-div-messages\" aria-live=\"polite\">\r\n          {makeShowdownMessages(this.state.showDownMessages)}\r\n        </div>\r\n        <h4 className=\"showdown-div-community-card-label\">\r\n          Community Cards\r\n        </h4>\r\n        <div className='showdown-div-community-cards'>\r\n          {this.renderTableCommunityCards(true)}\r\n        </div>\r\n        <button className=\"showdown-nextRound-button\" onClick={() => this.manageNextRound()}> Next Hand </button>\r\n        { this.renderBestHands()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  /*\r\n   Render each active player's best hand\r\n   (considering player's private cards and \r\n   available community cards). Handles ties.\r\n  */\r\n  renderBestHands = () => {\r\n    // get best hands from current state of game\r\n    const { playerHierarchy } = this.state;\r\n\r\n    return playerHierarchy.map(rankSnapshot => {\r\n      const tie = Array.isArray(rankSnapshot);\r\n      return tie ? this.renderHandSplit(rankSnapshot) : this.renderHandWinner(rankSnapshot);\r\n    })\r\n  }\r\n\r\n  /*\r\n   Render pot split amongst winning players\r\n   when there is more than a single best hand.\r\n  */\r\n  renderHandSplit = (rankSnapshot) => {\r\n    return rankSnapshot.map(player => {\r\n      return this.renderHandWinner(player);\r\n    })\r\n  }\r\n\r\n  makeCards = (cards) => {\r\n    return cards.map((card, index) => {\r\n      const cardData = { ...card, animationDelay: 0 }\r\n      return <Card key={index} cardData={cardData} />\r\n    })\r\n  }\r\n\r\n  /*\r\n   Render player winning showdown. Displays best hand, \r\n   hand rankings and amount of chips won by player.\r\n  */\r\n  renderHandWinner = (player) => {\r\n    // get best hand and hand ranking from winning player\r\n    const { name, bestHand, handRank } = player;\r\n    // get info of winning player\r\n    const playerStateData = this.state.players.find(statePlayer => statePlayer.name === name);\r\n    // display winning player information\r\n    return (\r\n      <table class=\"showdown-table content-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Player</th>\r\n            <th>Private Cards</th>\r\n            <th>Best Hand</th>\r\n            <th>Hand Ranking</th>\r\n            <th>Win/Loss</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              {name}</td>\r\n            <td>\r\n              <div class=\"showdown-player-privateCards\">\r\n                <div class=\"showdown-player-cards\">\r\n                  {this.makeCards(playerStateData.cards)}\r\n                </div>\r\n              </div>\r\n            </td>\r\n            <td><div className=\"showdown-player-besthand-div\">\r\n              <div className='showdown-player-besthand-cards' style={{ alignItems: 'center' }}>\r\n                {\r\n                  bestHand.map((card, index) => {\r\n                    // reset animation delay for next round\r\n                    const cardData = { ...card, animationDelay: 0 }\r\n                    return <Card key={index} cardData={cardData} />\r\n                  })\r\n                }\r\n              </div>\r\n            </div>\r\n            </td>\r\n            <td>{handRank}</td>\r\n            <td>{makeNetPlayerEarnings(playerStateData.roundEndChips, playerStateData.roundStartChips)}</td>\r\n          </tr>\r\n\r\n        </tbody>\r\n      </table>\r\n\r\n\r\n\r\n    )\r\n  }\r\n\r\n  /*\r\n   Render Poker Game and all its entities. Table, Players, chips\r\n   action buttons, title, logo, etc. This renders the game in its\r\n   entirety.\r\n  */\r\n  renderGame = () => {\r\n    const { highBet, players, activePlayerIndex, phase } = this.state;\r\n    return (\r\n      <div className='app-background'>\r\n        <div className=\"title-text\" style={{ maxWidth: \"400px\" }}></div>\r\n        <div className=\"poker-table-div\">\r\n          <div className=\"title-logo\">\r\n            <img src={\"./assets/logo.svg\"} alt=\"App Logo\"></img>\r\n            <h3>No-Limit Texas Hold'em Poker</h3>\r\n            <DropdownButton id=\"dropdown-basic-button\" title=\"Menu\" alt=\"Menu Dropdown\" aria-label=\"Menu Dropdown\">\r\n              <Dropdown.Item href=\"#\"> <Link to=\"/dashboard\">Return to Dashboard</Link></Dropdown.Item>\r\n              <Dropdown.Item href=\"#\"> <Link to=\"/login\">Logout</Link></Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n          <img className=\"poker-table-image\" src={\"./assets/table.svg\"} alt=\"Poker Table\" />\r\n          {this.renderTable()}\r\n          <div className='community-hand-div' aria-label=\"Community Cards\">\r\n            {this.renderTableCommunityCards()}\r\n          </div>\r\n          <div className='pot-div'>\r\n            <img src={'./assets/pot.svg'} alt=\"Community Pot\" />\r\n            <h4> {`${this.state.pot}`} </h4>\r\n          </div>\r\n        </div>\r\n        { (this.state.phase === 'showdown') && this.renderPlayerShowdown()}\r\n        <div className='game-bar'>\r\n          <div className='game-buttons'>\r\n            {this.renderPlayerActionButtons()}\r\n          </div>\r\n          <div className='slider' aria-label=\"Betting Slider\">\r\n            {(!this.state.loading) && makeActionMenu(highBet, players, activePlayerIndex, phase, this.manageBetChange)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  /*\r\n   Render Poker Game until there is a winner. When that occurs \r\n   render \"Player wins\" page.\r\n  */\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className='poker-table-wrapper'>\r\n          {\r\n\r\n\r\n            (this.state.loading) ? <SpinnerLoading /> :\r\n              (this.state.winnerFound) ? <PlayerWin winner={this.state.winner} /> :\r\n                this.renderGame()\r\n\r\n            // to test Player Wins page\r\n            // <PlayerWin winner={this.state.winner} difficulty=\"\"/>\r\n          }\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}